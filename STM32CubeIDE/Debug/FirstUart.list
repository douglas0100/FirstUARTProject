
FirstUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009658  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080098f8  080098f8  0000a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800999c  0800999c  0000a99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099a4  080099a4  0000a9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080099a8  080099a8  0000a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000c0  24000000  080099ac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000c0  08009a6c  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000120  08009acc  0000b120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  24000180  08009b2c  0000b180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000964  08009b2c  0000b964  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b53  00000000  00000000  0000b1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cec  00000000  00000000  00024d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  000279f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca3  00000000  00000000  00028a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037f74  00000000  00000000  000296eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a30  00000000  00000000  0006165f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00161559  00000000  00000000  0007908f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001da5e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa8  00000000  00000000  001da62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001df0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000180 	.word	0x24000180
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080098e0 	.word	0x080098e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000184 	.word	0x24000184
 80002dc:	080098e0 	.word	0x080098e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fe9a 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f8f4 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fa3c 	bl	8000b08 <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f970 	bl	8000974 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000694:	f000 f9ba 	bl	8000a0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000698:	f000 fa04 	bl	8000aa4 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 800069c:	2205      	movs	r2, #5
 800069e:	4904      	ldr	r1, [pc, #16]	@ (80006b0 <main+0x30>)
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <main+0x34>)
 80006a2:	f005 fc5d 	bl	8005f60 <HAL_UART_Receive_IT>

	  ExecuteProgram();
 80006a6:	f000 f807 	bl	80006b8 <ExecuteProgram>
  {
 80006aa:	bf00      	nop
 80006ac:	e7f6      	b.n	800069c <main+0x1c>
 80006ae:	bf00      	nop
 80006b0:	24000804 	.word	0x24000804
 80006b4:	24000284 	.word	0x24000284

080006b8 <ExecuteProgram>:
  /* USER CODE END 3 */

}

void ExecuteProgram()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	if(execute_flag == '1'){
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <ExecuteProgram+0x68>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b31      	cmp	r3, #49	@ 0x31
 80006c2:	d102      	bne.n	80006ca <ExecuteProgram+0x12>
		SendCount();
 80006c4:	f000 f832 	bl	800072c <SendCount>
		BrickLed(GPIOB, GPIO_PIN_0);
	}
	else if(execute_flag == '6'){
		BrickLed(GPIOE, GPIO_PIN_1);
	}
}
 80006c8:	e028      	b.n	800071c <ExecuteProgram+0x64>
	else if(execute_flag == '2'){
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <ExecuteProgram+0x68>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b32      	cmp	r3, #50	@ 0x32
 80006d0:	d102      	bne.n	80006d8 <ExecuteProgram+0x20>
		ClearCount();
 80006d2:	f000 f84f 	bl	8000774 <ClearCount>
}
 80006d6:	e021      	b.n	800071c <ExecuteProgram+0x64>
	else if(execute_flag == '3'){
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <ExecuteProgram+0x68>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b33      	cmp	r3, #51	@ 0x33
 80006de:	d102      	bne.n	80006e6 <ExecuteProgram+0x2e>
		GetTable();
 80006e0:	f000 f894 	bl	800080c <GetTable>
}
 80006e4:	e01a      	b.n	800071c <ExecuteProgram+0x64>
	else if(execute_flag == '4'){
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <ExecuteProgram+0x68>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b34      	cmp	r3, #52	@ 0x34
 80006ec:	d105      	bne.n	80006fa <ExecuteProgram+0x42>
		BrickLed(GPIOB, GPIO_PIN_14);
 80006ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f2:	480c      	ldr	r0, [pc, #48]	@ (8000724 <ExecuteProgram+0x6c>)
 80006f4:	f000 f866 	bl	80007c4 <BrickLed>
}
 80006f8:	e010      	b.n	800071c <ExecuteProgram+0x64>
	else if(execute_flag == '5'){
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <ExecuteProgram+0x68>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b35      	cmp	r3, #53	@ 0x35
 8000700:	d104      	bne.n	800070c <ExecuteProgram+0x54>
		BrickLed(GPIOB, GPIO_PIN_0);
 8000702:	2101      	movs	r1, #1
 8000704:	4807      	ldr	r0, [pc, #28]	@ (8000724 <ExecuteProgram+0x6c>)
 8000706:	f000 f85d 	bl	80007c4 <BrickLed>
}
 800070a:	e007      	b.n	800071c <ExecuteProgram+0x64>
	else if(execute_flag == '6'){
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <ExecuteProgram+0x68>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b36      	cmp	r3, #54	@ 0x36
 8000712:	d103      	bne.n	800071c <ExecuteProgram+0x64>
		BrickLed(GPIOE, GPIO_PIN_1);
 8000714:	2102      	movs	r1, #2
 8000716:	4804      	ldr	r0, [pc, #16]	@ (8000728 <ExecuteProgram+0x70>)
 8000718:	f000 f854 	bl	80007c4 <BrickLed>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	24000000 	.word	0x24000000
 8000724:	58020400 	.word	0x58020400
 8000728:	58021000 	.word	0x58021000

0800072c <SendCount>:

void SendCount()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
	char counterMessage[5];
	snprintf(counterMessage, 3, "%d\r\n", counter);
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <SendCount+0x38>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4638      	mov	r0, r7
 8000738:	4a0b      	ldr	r2, [pc, #44]	@ (8000768 <SendCount+0x3c>)
 800073a:	2103      	movs	r1, #3
 800073c:	f008 fc0a 	bl	8008f54 <sniprintf>
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000740:	463b      	mov	r3, r7
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fdcc 	bl	80002e0 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4806      	ldr	r0, [pc, #24]	@ (800076c <SendCount+0x40>)
 8000752:	f005 fb71 	bl	8005e38 <HAL_UART_Transmit_IT>
	execute_flag = '0';
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <SendCount+0x44>)
 8000758:	2230      	movs	r2, #48	@ 0x30
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	240007fc 	.word	0x240007fc
 8000768:	080098f8 	.word	0x080098f8
 800076c:	24000284 	.word	0x24000284
 8000770:	24000000 	.word	0x24000000

08000774 <ClearCount>:

void ClearCount()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	counter = 0;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <ClearCount+0x40>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
	char counterMessage[3];
	snprintf(counterMessage, 3, "%d\r\n", counter);
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <ClearCount+0x40>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	1d38      	adds	r0, r7, #4
 8000786:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <ClearCount+0x44>)
 8000788:	2103      	movs	r1, #3
 800078a:	f008 fbe3 	bl	8008f54 <sniprintf>
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fda5 	bl	80002e0 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <ClearCount+0x48>)
 80007a0:	f005 fb4a 	bl	8005e38 <HAL_UART_Transmit_IT>
	execute_flag = '0';
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <ClearCount+0x4c>)
 80007a6:	2230      	movs	r2, #48	@ 0x30
 80007a8:	701a      	strb	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	240007fc 	.word	0x240007fc
 80007b8:	080098f8 	.word	0x080098f8
 80007bc:	24000284 	.word	0x24000284
 80007c0:	24000000 	.word	0x24000000

080007c4 <BrickLed>:


void BrickLed(GPIO_TypeDef *porta, uint16_t portaPino)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
	ledStatus = (ledStatus == 0) ? 1 : 0;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <BrickLed+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <BrickLed+0x40>)
 80007e2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(porta, portaPino, ledStatus);
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <BrickLed+0x40>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f002 fb12 	bl	8002e18 <HAL_GPIO_WritePin>
	execute_flag = '0';
 80007f4:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <BrickLed+0x44>)
 80007f6:	2230      	movs	r2, #48	@ 0x30
 80007f8:	701a      	strb	r2, [r3, #0]
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	24000800 	.word	0x24000800
 8000808:	24000000 	.word	0x24000000

0800080c <GetTable>:

void GetTable(){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	e01d      	b.n	8000854 <GetTable+0x48>
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)tabela[i], strlen(tabela[i]));
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	011b      	lsls	r3, r3, #4
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4a11      	ldr	r2, [pc, #68]	@ (8000868 <GetTable+0x5c>)
 8000824:	189c      	adds	r4, r3, r2
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4613      	mov	r3, r2
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	1a9b      	subs	r3, r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <GetTable+0x5c>)
 8000832:	4413      	add	r3, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fd53 	bl	80002e0 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29b      	uxth	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	4621      	mov	r1, r4
 8000842:	480a      	ldr	r0, [pc, #40]	@ (800086c <GetTable+0x60>)
 8000844:	f005 faf8 	bl	8005e38 <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8000848:	2064      	movs	r0, #100	@ 0x64
 800084a:	f000 fe49 	bl	80014e0 <HAL_Delay>
	for (int i = 0; i < 3; i++) {
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3301      	adds	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b02      	cmp	r3, #2
 8000858:	ddde      	ble.n	8000818 <GetTable+0xc>
	}
	execute_flag = '0';
 800085a:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <GetTable+0x64>)
 800085c:	2230      	movs	r2, #48	@ 0x30
 800085e:	701a      	strb	r2, [r3, #0]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bd90      	pop	{r4, r7, pc}
 8000868:	24000004 	.word	0x24000004
 800086c:	24000284 	.word	0x24000284
 8000870:	24000000 	.word	0x24000000

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087e:	224c      	movs	r2, #76	@ 0x4c
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f008 fb9a 	bl	8008fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2220      	movs	r2, #32
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f008 fb94 	bl	8008fbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000894:	2002      	movs	r0, #2
 8000896:	f002 fc23 	bl	80030e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b33      	ldr	r3, [pc, #204]	@ (800096c <SystemClock_Config+0xf8>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a2:	4a32      	ldr	r2, [pc, #200]	@ (800096c <SystemClock_Config+0xf8>)
 80008a4:	f023 0301 	bic.w	r3, r3, #1
 80008a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008aa:	4b30      	ldr	r3, [pc, #192]	@ (800096c <SystemClock_Config+0xf8>)
 80008ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000970 <SystemClock_Config+0xfc>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000970 <SystemClock_Config+0xfc>)
 80008be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <SystemClock_Config+0xfc>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d0:	bf00      	nop
 80008d2:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <SystemClock_Config+0xfc>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008de:	d1f8      	bne.n	80008d2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008e0:	2303      	movs	r3, #3
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ee:	2340      	movs	r3, #64	@ 0x40
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008fe:	2318      	movs	r3, #24
 8000900:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000906:	2304      	movs	r3, #4
 8000908:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800090e:	230c      	movs	r3, #12
 8000910:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000912:	2300      	movs	r3, #0
 8000914:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fc28 	bl	8003174 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800092a:	f000 fa41 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	233f      	movs	r3, #63	@ 0x3f
 8000930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2101      	movs	r1, #1
 8000952:	4618      	mov	r0, r3
 8000954:	f003 f868 	bl	8003a28 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800095e:	f000 fa27 	bl	8000db0 <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3770      	adds	r7, #112	@ 0x70
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	58000400 	.word	0x58000400
 8000970:	58024800 	.word	0x58024800

08000974 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000978:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <MX_ETH_Init+0x80>)
 800097a:	4a1f      	ldr	r2, [pc, #124]	@ (80009f8 <MX_ETH_Init+0x84>)
 800097c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800097e:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <MX_ETH_Init+0x88>)
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000984:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <MX_ETH_Init+0x88>)
 8000986:	2280      	movs	r2, #128	@ 0x80
 8000988:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800098a:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <MX_ETH_Init+0x88>)
 800098c:	22e1      	movs	r2, #225	@ 0xe1
 800098e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_ETH_Init+0x88>)
 8000992:	2200      	movs	r2, #0
 8000994:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <MX_ETH_Init+0x88>)
 8000998:	2200      	movs	r2, #0
 800099a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_ETH_Init+0x88>)
 800099e:	2200      	movs	r2, #0
 80009a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_ETH_Init+0x80>)
 80009a4:	4a15      	ldr	r2, [pc, #84]	@ (80009fc <MX_ETH_Init+0x88>)
 80009a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <MX_ETH_Init+0x80>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_ETH_Init+0x80>)
 80009b0:	4a13      	ldr	r2, [pc, #76]	@ (8000a00 <MX_ETH_Init+0x8c>)
 80009b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_ETH_Init+0x80>)
 80009b6:	4a13      	ldr	r2, [pc, #76]	@ (8000a04 <MX_ETH_Init+0x90>)
 80009b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_ETH_Init+0x80>)
 80009bc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80009c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009c2:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <MX_ETH_Init+0x80>)
 80009c4:	f001 fc44 	bl	8002250 <HAL_ETH_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009ce:	f000 f9ef 	bl	8000db0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009d2:	2238      	movs	r2, #56	@ 0x38
 80009d4:	2100      	movs	r1, #0
 80009d6:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <MX_ETH_Init+0x94>)
 80009d8:	f008 faf0 	bl	8008fbc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <MX_ETH_Init+0x94>)
 80009de:	2221      	movs	r2, #33	@ 0x21
 80009e0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_ETH_Init+0x94>)
 80009e4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009e8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009ea:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <MX_ETH_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	240001d4 	.word	0x240001d4
 80009f8:	40028000 	.word	0x40028000
 80009fc:	2400080c 	.word	0x2400080c
 8000a00:	24000120 	.word	0x24000120
 8000a04:	240000c0 	.word	0x240000c0
 8000a08:	2400019c 	.word	0x2400019c

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <MX_USART3_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a56:	f005 f99f 	bl	8005d98 <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f9a6 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a68:	f007 fea1 	bl	80087ae <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f99d 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a7a:	f007 fed6 	bl	800882a <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f994 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a8a:	f007 fe57 	bl	800873c <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f98c 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24000284 	.word	0x24000284
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000aac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2209      	movs	r2, #9
 8000ab2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	f002 f9c7 	bl	8002e7e <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000af6:	f000 f95b 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	24000318 	.word	0x24000318
 8000b04:	40080000 	.word	0x40080000

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b66      	ldr	r3, [pc, #408]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	4a64      	ldr	r2, [pc, #400]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2e:	4b62      	ldr	r3, [pc, #392]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	4a5d      	ldr	r2, [pc, #372]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b57      	ldr	r3, [pc, #348]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	4a55      	ldr	r2, [pc, #340]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6a:	4b53      	ldr	r3, [pc, #332]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b4f      	ldr	r3, [pc, #316]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	4a4e      	ldr	r2, [pc, #312]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b88:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b48      	ldr	r3, [pc, #288]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	4a46      	ldr	r2, [pc, #280]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba6:	4b44      	ldr	r3, [pc, #272]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	4b40      	ldr	r3, [pc, #256]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bba:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	4b39      	ldr	r3, [pc, #228]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	4a37      	ldr	r2, [pc, #220]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be2:	4b35      	ldr	r3, [pc, #212]	@ (8000cb8 <MX_GPIO_Init+0x1b0>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bf6:	4831      	ldr	r0, [pc, #196]	@ (8000cbc <MX_GPIO_Init+0x1b4>)
 8000bf8:	f002 f90e 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c02:	482f      	ldr	r0, [pc, #188]	@ (8000cc0 <MX_GPIO_Init+0x1b8>)
 8000c04:	f002 f908 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	482d      	ldr	r0, [pc, #180]	@ (8000cc4 <MX_GPIO_Init+0x1bc>)
 8000c0e:	f002 f903 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4827      	ldr	r0, [pc, #156]	@ (8000cc8 <MX_GPIO_Init+0x1c0>)
 8000c2a:	f001 ff45 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c2e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	481d      	ldr	r0, [pc, #116]	@ (8000cbc <MX_GPIO_Init+0x1b4>)
 8000c48:	f001 ff36 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <MX_GPIO_Init+0x1b8>)
 8000c66:	f001 ff27 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4813      	ldr	r0, [pc, #76]	@ (8000ccc <MX_GPIO_Init+0x1c4>)
 8000c80:	f001 ff1a 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480a      	ldr	r0, [pc, #40]	@ (8000cc4 <MX_GPIO_Init+0x1bc>)
 8000c9c:	f001 ff0c 	bl	8002ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2028      	movs	r0, #40	@ 0x28
 8000ca6:	f000 fd3a 	bl	800171e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000caa:	2028      	movs	r0, #40	@ 0x28
 8000cac:	f000 fd51 	bl	8001752 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3730      	adds	r7, #48	@ 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	58024400 	.word	0x58024400
 8000cbc:	58020400 	.word	0x58020400
 8000cc0:	58020c00 	.word	0x58020c00
 8000cc4:	58021000 	.word	0x58021000
 8000cc8:	58020800 	.word	0x58020800
 8000ccc:	58021800 	.word	0x58021800

08000cd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

  void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
	  if (GPIO_Pin == GPIO_PIN_13)
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ce0:	d104      	bne.n	8000cec <HAL_GPIO_EXTI_Callback+0x1c>
	  {
		  counter++;
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a03      	ldr	r2, [pc, #12]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000cea:	6013      	str	r3, [r2, #0]
	  }
  }
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	240007fc 	.word	0x240007fc

08000cfc <HAL_UART_RxCpltCallback>:

  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

	  if (strncmp(rx_buffer, "Sends", 5) == 0) {
 8000d04:	2205      	movs	r2, #5
 8000d06:	4922      	ldr	r1, [pc, #136]	@ (8000d90 <HAL_UART_RxCpltCallback+0x94>)
 8000d08:	4822      	ldr	r0, [pc, #136]	@ (8000d94 <HAL_UART_RxCpltCallback+0x98>)
 8000d0a:	f008 f95f 	bl	8008fcc <strncmp>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <HAL_UART_RxCpltCallback+0x1e>
		  execute_flag = '1';
 8000d14:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <HAL_UART_RxCpltCallback+0x9c>)
 8000d16:	2231      	movs	r2, #49	@ 0x31
 8000d18:	701a      	strb	r2, [r3, #0]
	  }
	  if (strncmp(rx_buffer, "Clear", 5) == 0) {
 8000d1a:	2205      	movs	r2, #5
 8000d1c:	491f      	ldr	r1, [pc, #124]	@ (8000d9c <HAL_UART_RxCpltCallback+0xa0>)
 8000d1e:	481d      	ldr	r0, [pc, #116]	@ (8000d94 <HAL_UART_RxCpltCallback+0x98>)
 8000d20:	f008 f954 	bl	8008fcc <strncmp>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x34>
		  execute_flag = '2';
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <HAL_UART_RxCpltCallback+0x9c>)
 8000d2c:	2232      	movs	r2, #50	@ 0x32
 8000d2e:	701a      	strb	r2, [r3, #0]
	  }
	  if (strncmp(rx_buffer, "Table", 5) == 0) {
 8000d30:	2205      	movs	r2, #5
 8000d32:	491b      	ldr	r1, [pc, #108]	@ (8000da0 <HAL_UART_RxCpltCallback+0xa4>)
 8000d34:	4817      	ldr	r0, [pc, #92]	@ (8000d94 <HAL_UART_RxCpltCallback+0x98>)
 8000d36:	f008 f949 	bl	8008fcc <strncmp>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <HAL_UART_RxCpltCallback+0x4a>
		  execute_flag = '3';
 8000d40:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_UART_RxCpltCallback+0x9c>)
 8000d42:	2233      	movs	r2, #51	@ 0x33
 8000d44:	701a      	strb	r2, [r3, #0]
	  }
	  if (strncmp(rx_buffer, "Led_R", 5) == 0) {
 8000d46:	2205      	movs	r2, #5
 8000d48:	4916      	ldr	r1, [pc, #88]	@ (8000da4 <HAL_UART_RxCpltCallback+0xa8>)
 8000d4a:	4812      	ldr	r0, [pc, #72]	@ (8000d94 <HAL_UART_RxCpltCallback+0x98>)
 8000d4c:	f008 f93e 	bl	8008fcc <strncmp>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <HAL_UART_RxCpltCallback+0x60>
		  execute_flag = '4';
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_UART_RxCpltCallback+0x9c>)
 8000d58:	2234      	movs	r2, #52	@ 0x34
 8000d5a:	701a      	strb	r2, [r3, #0]
	  }
	  if (strncmp(rx_buffer, "Led_G", 5) == 0) {
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	4912      	ldr	r1, [pc, #72]	@ (8000da8 <HAL_UART_RxCpltCallback+0xac>)
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <HAL_UART_RxCpltCallback+0x98>)
 8000d62:	f008 f933 	bl	8008fcc <strncmp>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <HAL_UART_RxCpltCallback+0x76>
		  execute_flag = '5';
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_UART_RxCpltCallback+0x9c>)
 8000d6e:	2235      	movs	r2, #53	@ 0x35
 8000d70:	701a      	strb	r2, [r3, #0]
	  }
	  if (strncmp(rx_buffer, "Led_B", 5) == 0) {
 8000d72:	2205      	movs	r2, #5
 8000d74:	490d      	ldr	r1, [pc, #52]	@ (8000dac <HAL_UART_RxCpltCallback+0xb0>)
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <HAL_UART_RxCpltCallback+0x98>)
 8000d78:	f008 f928 	bl	8008fcc <strncmp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <HAL_UART_RxCpltCallback+0x8c>
		  execute_flag = '6';
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_UART_RxCpltCallback+0x9c>)
 8000d84:	2236      	movs	r2, #54	@ 0x36
 8000d86:	701a      	strb	r2, [r3, #0]
	  }
  }
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	08009900 	.word	0x08009900
 8000d94:	24000804 	.word	0x24000804
 8000d98:	24000000 	.word	0x24000000
 8000d9c:	08009908 	.word	0x08009908
 8000da0:	08009910 	.word	0x08009910
 8000da4:	08009918 	.word	0x08009918
 8000da8:	08009920 	.word	0x08009920
 8000dac:	08009928 	.word	0x08009928

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_MspInit+0x30>)
 8000dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc8:	4a08      	ldr	r2, [pc, #32]	@ (8000dec <HAL_MspInit+0x30>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_MspInit+0x30>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	58024400 	.word	0x58024400

08000df0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	@ 0x38
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a59      	ldr	r2, [pc, #356]	@ (8000f74 <HAL_ETH_MspInit+0x184>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f040 80ab 	bne.w	8000f6a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e14:	4b58      	ldr	r3, [pc, #352]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e1a:	4a57      	ldr	r2, [pc, #348]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e24:	4b54      	ldr	r3, [pc, #336]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e32:	4b51      	ldr	r3, [pc, #324]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e38:	4a4f      	ldr	r2, [pc, #316]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e42:	4b4d      	ldr	r3, [pc, #308]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e50:	4b49      	ldr	r3, [pc, #292]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e56:	4a48      	ldr	r2, [pc, #288]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e5c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e60:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b42      	ldr	r3, [pc, #264]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	4a40      	ldr	r2, [pc, #256]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	4a39      	ldr	r2, [pc, #228]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9c:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b33      	ldr	r3, [pc, #204]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	4a31      	ldr	r2, [pc, #196]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eba:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	4a2a      	ldr	r2, [pc, #168]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed8:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <HAL_ETH_MspInit+0x188>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ee6:	2332      	movs	r3, #50	@ 0x32
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef6:	230b      	movs	r3, #11
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	481e      	ldr	r0, [pc, #120]	@ (8000f7c <HAL_ETH_MspInit+0x18c>)
 8000f02:	f001 fdd9 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f06:	2386      	movs	r3, #134	@ 0x86
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f16:	230b      	movs	r3, #11
 8000f18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4817      	ldr	r0, [pc, #92]	@ (8000f80 <HAL_ETH_MspInit+0x190>)
 8000f22:	f001 fdc9 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	4810      	ldr	r0, [pc, #64]	@ (8000f84 <HAL_ETH_MspInit+0x194>)
 8000f44:	f001 fdb8 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f48:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5a:	230b      	movs	r3, #11
 8000f5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <HAL_ETH_MspInit+0x198>)
 8000f66:	f001 fda7 	bl	8002ab8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3738      	adds	r7, #56	@ 0x38
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40028000 	.word	0x40028000
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020800 	.word	0x58020800
 8000f80:	58020000 	.word	0x58020000
 8000f84:	58020400 	.word	0x58020400
 8000f88:	58021800 	.word	0x58021800

08000f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	22c0      	movs	r2, #192	@ 0xc0
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f008 f805 	bl	8008fbc <memset>
  if(huart->Instance==USART3)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8001064 <HAL_UART_MspInit+0xd8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d14e      	bne.n	800105a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fbc:	f04f 0202 	mov.w	r2, #2
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f8b4 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fde:	f7ff fee7 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe2:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <HAL_UART_MspInit+0xdc>)
 8000fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8001068 <HAL_UART_MspInit+0xdc>)
 8000fea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <HAL_UART_MspInit+0xdc>)
 8000ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_UART_MspInit+0xdc>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	4a18      	ldr	r2, [pc, #96]	@ (8001068 <HAL_UART_MspInit+0xdc>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <HAL_UART_MspInit+0xdc>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001038:	2307      	movs	r3, #7
 800103a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001042:	4619      	mov	r1, r3
 8001044:	4809      	ldr	r0, [pc, #36]	@ (800106c <HAL_UART_MspInit+0xe0>)
 8001046:	f001 fd37 	bl	8002ab8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2027      	movs	r0, #39	@ 0x27
 8001050:	f000 fb65 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001054:	2027      	movs	r0, #39	@ 0x27
 8001056:	f000 fb7c 	bl	8001752 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800105a:	bf00      	nop
 800105c:	37e8      	adds	r7, #232	@ 0xe8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40004800 	.word	0x40004800
 8001068:	58024400 	.word	0x58024400
 800106c:	58020c00 	.word	0x58020c00

08001070 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ba      	sub	sp, #232	@ 0xe8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	22c0      	movs	r2, #192	@ 0xc0
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f007 ff93 	bl	8008fbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a30      	ldr	r2, [pc, #192]	@ (800115c <HAL_PCD_MspInit+0xec>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d159      	bne.n	8001154 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010a0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f841 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80010c4:	f7ff fe74 	bl	8000db0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010c8:	f002 f844 	bl	8003154 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <HAL_PCD_MspInit+0xf0>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d2:	4a23      	ldr	r2, [pc, #140]	@ (8001160 <HAL_PCD_MspInit+0xf0>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010dc:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <HAL_PCD_MspInit+0xf0>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010ea:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80010ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001104:	230a      	movs	r3, #10
 8001106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800110e:	4619      	mov	r1, r3
 8001110:	4814      	ldr	r0, [pc, #80]	@ (8001164 <HAL_PCD_MspInit+0xf4>)
 8001112:	f001 fcd1 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001116:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <HAL_PCD_MspInit+0xf4>)
 8001132:	f001 fcc1 	bl	8002ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_PCD_MspInit+0xf0>)
 8001138:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800113c:	4a08      	ldr	r2, [pc, #32]	@ (8001160 <HAL_PCD_MspInit+0xf0>)
 800113e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001142:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_PCD_MspInit+0xf0>)
 8001148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800114c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001154:	bf00      	nop
 8001156:	37e8      	adds	r7, #232	@ 0xe8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40080000 	.word	0x40080000
 8001160:	58024400 	.word	0x58024400
 8001164:	58020000 	.word	0x58020000

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <NMI_Handler+0x4>

08001170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MemManage_Handler+0x4>

08001180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <UsageFault_Handler+0x4>

08001190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011be:	f000 f96f 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <USART3_IRQHandler+0x10>)
 80011ce:	f004 ff13 	bl	8005ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	24000284 	.word	0x24000284

080011dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011e4:	f001 fe31 	bl	8002e4a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f4:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <_sbrk+0x5c>)
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <_sbrk+0x60>)
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <_sbrk+0x64>)
 800120a:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <_sbrk+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	429a      	cmp	r2, r3
 800121a:	d207      	bcs.n	800122c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800121c:	f007 fee8 	bl	8008ff0 <__errno>
 8001220:	4603      	mov	r3, r0
 8001222:	220c      	movs	r2, #12
 8001224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	e009      	b.n	8001240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <_sbrk+0x64>)
 800123c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	24080000 	.word	0x24080000
 800124c:	00000400 	.word	0x00000400
 8001250:	24000814 	.word	0x24000814
 8001254:	24000968 	.word	0x24000968

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001290 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800125c:	f000 f826 	bl	80012ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	@ (80012a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001286:	f007 feb9 	bl	8008ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff f9f9 	bl	8000680 <main>
  bx  lr
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001294:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001298:	240000c0 	.word	0x240000c0
  ldr r2, =_sidata
 800129c:	080099ac 	.word	0x080099ac
  ldr r2, =_sbss
 80012a0:	24000180 	.word	0x24000180
  ldr r4, =_ebss
 80012a4:	24000964 	.word	0x24000964

080012a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC3_IRQHandler>
	...

080012ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012b0:	4b37      	ldr	r3, [pc, #220]	@ (8001390 <SystemInit+0xe4>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b6:	4a36      	ldr	r2, [pc, #216]	@ (8001390 <SystemInit+0xe4>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012c0:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <SystemInit+0xe8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	2b06      	cmp	r3, #6
 80012ca:	d807      	bhi.n	80012dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012cc:	4b31      	ldr	r3, [pc, #196]	@ (8001394 <SystemInit+0xe8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 030f 	bic.w	r3, r3, #15
 80012d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001394 <SystemInit+0xe8>)
 80012d6:	f043 0307 	orr.w	r3, r3, #7
 80012da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <SystemInit+0xec>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001398 <SystemInit+0xec>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <SystemInit+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <SystemInit+0xec>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4929      	ldr	r1, [pc, #164]	@ (8001398 <SystemInit+0xec>)
 80012f4:	4b29      	ldr	r3, [pc, #164]	@ (800139c <SystemInit+0xf0>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <SystemInit+0xe8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <SystemInit+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 030f 	bic.w	r3, r3, #15
 800130e:	4a21      	ldr	r2, [pc, #132]	@ (8001394 <SystemInit+0xe8>)
 8001310:	f043 0307 	orr.w	r3, r3, #7
 8001314:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <SystemInit+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800131c:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <SystemInit+0xec>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001322:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <SystemInit+0xec>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <SystemInit+0xec>)
 800132a:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <SystemInit+0xf4>)
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800132e:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <SystemInit+0xec>)
 8001330:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <SystemInit+0xf8>)
 8001332:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001334:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <SystemInit+0xec>)
 8001336:	4a1c      	ldr	r2, [pc, #112]	@ (80013a8 <SystemInit+0xfc>)
 8001338:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <SystemInit+0xec>)
 800133c:	2200      	movs	r2, #0
 800133e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <SystemInit+0xec>)
 8001342:	4a19      	ldr	r2, [pc, #100]	@ (80013a8 <SystemInit+0xfc>)
 8001344:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <SystemInit+0xec>)
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <SystemInit+0xec>)
 800134e:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <SystemInit+0xfc>)
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <SystemInit+0xec>)
 8001354:	2200      	movs	r2, #0
 8001356:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <SystemInit+0xec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <SystemInit+0xec>)
 800135e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001362:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <SystemInit+0xec>)
 8001366:	2200      	movs	r2, #0
 8001368:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <SystemInit+0x100>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <SystemInit+0x104>)
 8001370:	4013      	ands	r3, r2
 8001372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001376:	d202      	bcs.n	800137e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001378:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <SystemInit+0x108>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <SystemInit+0x10c>)
 8001380:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001384:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00
 8001394:	52002000 	.word	0x52002000
 8001398:	58024400 	.word	0x58024400
 800139c:	eaf6ed7f 	.word	0xeaf6ed7f
 80013a0:	02020200 	.word	0x02020200
 80013a4:	01ff0000 	.word	0x01ff0000
 80013a8:	01010280 	.word	0x01010280
 80013ac:	5c001000 	.word	0x5c001000
 80013b0:	ffff0000 	.word	0xffff0000
 80013b4:	51008108 	.word	0x51008108
 80013b8:	52004000 	.word	0x52004000

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 f9a0 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013c8:	f002 fce4 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 80013cc:	4602      	mov	r2, r0
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <HAL_Init+0x68>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	4913      	ldr	r1, [pc, #76]	@ (8001428 <HAL_Init+0x6c>)
 80013da:	5ccb      	ldrb	r3, [r1, r3]
 80013dc:	f003 031f 	and.w	r3, r3, #31
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_Init+0x68>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001428 <HAL_Init+0x6c>)
 80013f0:	5cd3      	ldrb	r3, [r2, r3]
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	4a0b      	ldr	r2, [pc, #44]	@ (800142c <HAL_Init+0x70>)
 80013fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001400:	4a0b      	ldr	r2, [pc, #44]	@ (8001430 <HAL_Init+0x74>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f814 	bl	8001434 <HAL_InitTick>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e002      	b.n	800141c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001416:	f7ff fcd1 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	58024400 	.word	0x58024400
 8001428:	08009930 	.word	0x08009930
 800142c:	24000064 	.word	0x24000064
 8001430:	24000060 	.word	0x24000060

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_InitTick+0x60>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e021      	b.n	800148c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <HAL_InitTick+0x64>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <HAL_InitTick+0x60>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f985 	bl	800176e <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f94f 	bl	800171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_InitTick+0x68>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2400006c 	.word	0x2400006c
 8001498:	24000060 	.word	0x24000060
 800149c:	24000068 	.word	0x24000068

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	2400006c 	.word	0x2400006c
 80014c4:	24000818 	.word	0x24000818

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	24000818 	.word	0x24000818

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2400006c 	.word	0x2400006c

08001528 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <HAL_GetREVID+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0c1b      	lsrs	r3, r3, #16
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	5c001000 	.word	0x5c001000

08001540 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001550:	4904      	ldr	r1, [pc, #16]	@ (8001564 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	58000400 	.word	0x58000400

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <__NVIC_SetPriorityGrouping+0x40>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	4313      	orrs	r3, r2
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	@ (80015a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	05fa0000 	.word	0x05fa0000

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	@ (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	@ (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	@ (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	@ 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff8e 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff29 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff40 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff90 	bl	800165c <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5f 	bl	8001608 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff33 	bl	80015cc <__NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffa4 	bl	80016c4 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff fe9a 	bl	80014c8 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e2dc      	b.n	8001d5a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d008      	beq.n	80017be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2280      	movs	r2, #128	@ 0x80
 80017b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e2cd      	b.n	8001d5a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a76      	ldr	r2, [pc, #472]	@ (800199c <HAL_DMA_Abort+0x214>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d04a      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a74      	ldr	r2, [pc, #464]	@ (80019a0 <HAL_DMA_Abort+0x218>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d045      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a73      	ldr	r2, [pc, #460]	@ (80019a4 <HAL_DMA_Abort+0x21c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d040      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a71      	ldr	r2, [pc, #452]	@ (80019a8 <HAL_DMA_Abort+0x220>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d03b      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a70      	ldr	r2, [pc, #448]	@ (80019ac <HAL_DMA_Abort+0x224>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d036      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a6e      	ldr	r2, [pc, #440]	@ (80019b0 <HAL_DMA_Abort+0x228>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d031      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6d      	ldr	r2, [pc, #436]	@ (80019b4 <HAL_DMA_Abort+0x22c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d02c      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a6b      	ldr	r2, [pc, #428]	@ (80019b8 <HAL_DMA_Abort+0x230>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d027      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6a      	ldr	r2, [pc, #424]	@ (80019bc <HAL_DMA_Abort+0x234>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d022      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a68      	ldr	r2, [pc, #416]	@ (80019c0 <HAL_DMA_Abort+0x238>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01d      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a67      	ldr	r2, [pc, #412]	@ (80019c4 <HAL_DMA_Abort+0x23c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d018      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a65      	ldr	r2, [pc, #404]	@ (80019c8 <HAL_DMA_Abort+0x240>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a64      	ldr	r2, [pc, #400]	@ (80019cc <HAL_DMA_Abort+0x244>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00e      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a62      	ldr	r2, [pc, #392]	@ (80019d0 <HAL_DMA_Abort+0x248>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d009      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a61      	ldr	r2, [pc, #388]	@ (80019d4 <HAL_DMA_Abort+0x24c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d004      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a5f      	ldr	r2, [pc, #380]	@ (80019d8 <HAL_DMA_Abort+0x250>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_DMA_Abort+0xda>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_DMA_Abort+0xdc>
 8001862:	2300      	movs	r3, #0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 021e 	bic.w	r2, r2, #30
 8001876:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001886:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e00a      	b.n	80018a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 020e 	bic.w	r2, r2, #14
 800189e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a3c      	ldr	r2, [pc, #240]	@ (800199c <HAL_DMA_Abort+0x214>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d072      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a3a      	ldr	r2, [pc, #232]	@ (80019a0 <HAL_DMA_Abort+0x218>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d06d      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a39      	ldr	r2, [pc, #228]	@ (80019a4 <HAL_DMA_Abort+0x21c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d068      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a37      	ldr	r2, [pc, #220]	@ (80019a8 <HAL_DMA_Abort+0x220>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d063      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a36      	ldr	r2, [pc, #216]	@ (80019ac <HAL_DMA_Abort+0x224>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d05e      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a34      	ldr	r2, [pc, #208]	@ (80019b0 <HAL_DMA_Abort+0x228>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d059      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a33      	ldr	r2, [pc, #204]	@ (80019b4 <HAL_DMA_Abort+0x22c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d054      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a31      	ldr	r2, [pc, #196]	@ (80019b8 <HAL_DMA_Abort+0x230>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d04f      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a30      	ldr	r2, [pc, #192]	@ (80019bc <HAL_DMA_Abort+0x234>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d04a      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2e      	ldr	r2, [pc, #184]	@ (80019c0 <HAL_DMA_Abort+0x238>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d045      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2d      	ldr	r2, [pc, #180]	@ (80019c4 <HAL_DMA_Abort+0x23c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d040      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2b      	ldr	r2, [pc, #172]	@ (80019c8 <HAL_DMA_Abort+0x240>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d03b      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2a      	ldr	r2, [pc, #168]	@ (80019cc <HAL_DMA_Abort+0x244>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d036      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <HAL_DMA_Abort+0x248>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d031      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a27      	ldr	r2, [pc, #156]	@ (80019d4 <HAL_DMA_Abort+0x24c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d02c      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a25      	ldr	r2, [pc, #148]	@ (80019d8 <HAL_DMA_Abort+0x250>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d027      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a24      	ldr	r2, [pc, #144]	@ (80019dc <HAL_DMA_Abort+0x254>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d022      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a22      	ldr	r2, [pc, #136]	@ (80019e0 <HAL_DMA_Abort+0x258>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01d      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a21      	ldr	r2, [pc, #132]	@ (80019e4 <HAL_DMA_Abort+0x25c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d018      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1f      	ldr	r2, [pc, #124]	@ (80019e8 <HAL_DMA_Abort+0x260>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1e      	ldr	r2, [pc, #120]	@ (80019ec <HAL_DMA_Abort+0x264>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00e      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <HAL_DMA_Abort+0x268>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d009      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1b      	ldr	r2, [pc, #108]	@ (80019f4 <HAL_DMA_Abort+0x26c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d004      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_DMA_Abort+0x270>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d132      	bne.n	80019fc <HAL_DMA_Abort+0x274>
 8001996:	2301      	movs	r3, #1
 8001998:	e031      	b.n	80019fe <HAL_DMA_Abort+0x276>
 800199a:	bf00      	nop
 800199c:	40020010 	.word	0x40020010
 80019a0:	40020028 	.word	0x40020028
 80019a4:	40020040 	.word	0x40020040
 80019a8:	40020058 	.word	0x40020058
 80019ac:	40020070 	.word	0x40020070
 80019b0:	40020088 	.word	0x40020088
 80019b4:	400200a0 	.word	0x400200a0
 80019b8:	400200b8 	.word	0x400200b8
 80019bc:	40020410 	.word	0x40020410
 80019c0:	40020428 	.word	0x40020428
 80019c4:	40020440 	.word	0x40020440
 80019c8:	40020458 	.word	0x40020458
 80019cc:	40020470 	.word	0x40020470
 80019d0:	40020488 	.word	0x40020488
 80019d4:	400204a0 	.word	0x400204a0
 80019d8:	400204b8 	.word	0x400204b8
 80019dc:	58025408 	.word	0x58025408
 80019e0:	5802541c 	.word	0x5802541c
 80019e4:	58025430 	.word	0x58025430
 80019e8:	58025444 	.word	0x58025444
 80019ec:	58025458 	.word	0x58025458
 80019f0:	5802546c 	.word	0x5802546c
 80019f4:	58025480 	.word	0x58025480
 80019f8:	58025494 	.word	0x58025494
 80019fc:	2300      	movs	r3, #0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6d      	ldr	r2, [pc, #436]	@ (8001bcc <HAL_DMA_Abort+0x444>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d04a      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6b      	ldr	r2, [pc, #428]	@ (8001bd0 <HAL_DMA_Abort+0x448>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d045      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6a      	ldr	r2, [pc, #424]	@ (8001bd4 <HAL_DMA_Abort+0x44c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d040      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a68      	ldr	r2, [pc, #416]	@ (8001bd8 <HAL_DMA_Abort+0x450>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d03b      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a67      	ldr	r2, [pc, #412]	@ (8001bdc <HAL_DMA_Abort+0x454>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d036      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a65      	ldr	r2, [pc, #404]	@ (8001be0 <HAL_DMA_Abort+0x458>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d031      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a64      	ldr	r2, [pc, #400]	@ (8001be4 <HAL_DMA_Abort+0x45c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d02c      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a62      	ldr	r2, [pc, #392]	@ (8001be8 <HAL_DMA_Abort+0x460>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d027      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a61      	ldr	r2, [pc, #388]	@ (8001bec <HAL_DMA_Abort+0x464>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d022      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a5f      	ldr	r2, [pc, #380]	@ (8001bf0 <HAL_DMA_Abort+0x468>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01d      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001bf4 <HAL_DMA_Abort+0x46c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d018      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf8 <HAL_DMA_Abort+0x470>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bfc <HAL_DMA_Abort+0x474>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d00e      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a59      	ldr	r2, [pc, #356]	@ (8001c00 <HAL_DMA_Abort+0x478>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d009      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <HAL_DMA_Abort+0x47c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d004      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a56      	ldr	r2, [pc, #344]	@ (8001c08 <HAL_DMA_Abort+0x480>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d108      	bne.n	8001ac4 <HAL_DMA_Abort+0x33c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e007      	b.n	8001ad4 <HAL_DMA_Abort+0x34c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ad4:	e013      	b.n	8001afe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad6:	f7ff fcf7 	bl	80014c8 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d90c      	bls.n	8001afe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2203      	movs	r2, #3
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e12d      	b.n	8001d5a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1e5      	bne.n	8001ad6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001bcc <HAL_DMA_Abort+0x444>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04a      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd0 <HAL_DMA_Abort+0x448>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d045      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2c      	ldr	r2, [pc, #176]	@ (8001bd4 <HAL_DMA_Abort+0x44c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d040      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd8 <HAL_DMA_Abort+0x450>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d03b      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a29      	ldr	r2, [pc, #164]	@ (8001bdc <HAL_DMA_Abort+0x454>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d036      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a27      	ldr	r2, [pc, #156]	@ (8001be0 <HAL_DMA_Abort+0x458>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d031      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a26      	ldr	r2, [pc, #152]	@ (8001be4 <HAL_DMA_Abort+0x45c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d02c      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a24      	ldr	r2, [pc, #144]	@ (8001be8 <HAL_DMA_Abort+0x460>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d027      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a23      	ldr	r2, [pc, #140]	@ (8001bec <HAL_DMA_Abort+0x464>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d022      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a21      	ldr	r2, [pc, #132]	@ (8001bf0 <HAL_DMA_Abort+0x468>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01d      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a20      	ldr	r2, [pc, #128]	@ (8001bf4 <HAL_DMA_Abort+0x46c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d018      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf8 <HAL_DMA_Abort+0x470>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <HAL_DMA_Abort+0x474>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00e      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1b      	ldr	r2, [pc, #108]	@ (8001c00 <HAL_DMA_Abort+0x478>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c04 <HAL_DMA_Abort+0x47c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <HAL_DMA_Abort+0x480>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_DMA_Abort+0x426>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_DMA_Abort+0x428>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d02b      	beq.n	8001c0c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	223f      	movs	r2, #63	@ 0x3f
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	e02a      	b.n	8001c22 <HAL_DMA_Abort+0x49a>
 8001bcc:	40020010 	.word	0x40020010
 8001bd0:	40020028 	.word	0x40020028
 8001bd4:	40020040 	.word	0x40020040
 8001bd8:	40020058 	.word	0x40020058
 8001bdc:	40020070 	.word	0x40020070
 8001be0:	40020088 	.word	0x40020088
 8001be4:	400200a0 	.word	0x400200a0
 8001be8:	400200b8 	.word	0x400200b8
 8001bec:	40020410 	.word	0x40020410
 8001bf0:	40020428 	.word	0x40020428
 8001bf4:	40020440 	.word	0x40020440
 8001bf8:	40020458 	.word	0x40020458
 8001bfc:	40020470 	.word	0x40020470
 8001c00:	40020488 	.word	0x40020488
 8001c04:	400204a0 	.word	0x400204a0
 8001c08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c10:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a4f      	ldr	r2, [pc, #316]	@ (8001d64 <HAL_DMA_Abort+0x5dc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d072      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a4d      	ldr	r2, [pc, #308]	@ (8001d68 <HAL_DMA_Abort+0x5e0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d06d      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d6c <HAL_DMA_Abort+0x5e4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d068      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a4a      	ldr	r2, [pc, #296]	@ (8001d70 <HAL_DMA_Abort+0x5e8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d063      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a49      	ldr	r2, [pc, #292]	@ (8001d74 <HAL_DMA_Abort+0x5ec>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d05e      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a47      	ldr	r2, [pc, #284]	@ (8001d78 <HAL_DMA_Abort+0x5f0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d059      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a46      	ldr	r2, [pc, #280]	@ (8001d7c <HAL_DMA_Abort+0x5f4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d054      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a44      	ldr	r2, [pc, #272]	@ (8001d80 <HAL_DMA_Abort+0x5f8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d04f      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a43      	ldr	r2, [pc, #268]	@ (8001d84 <HAL_DMA_Abort+0x5fc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d04a      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a41      	ldr	r2, [pc, #260]	@ (8001d88 <HAL_DMA_Abort+0x600>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d045      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a40      	ldr	r2, [pc, #256]	@ (8001d8c <HAL_DMA_Abort+0x604>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d040      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a3e      	ldr	r2, [pc, #248]	@ (8001d90 <HAL_DMA_Abort+0x608>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d03b      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d94 <HAL_DMA_Abort+0x60c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d036      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8001d98 <HAL_DMA_Abort+0x610>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d031      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a3a      	ldr	r2, [pc, #232]	@ (8001d9c <HAL_DMA_Abort+0x614>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d02c      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a38      	ldr	r2, [pc, #224]	@ (8001da0 <HAL_DMA_Abort+0x618>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d027      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a37      	ldr	r2, [pc, #220]	@ (8001da4 <HAL_DMA_Abort+0x61c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d022      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a35      	ldr	r2, [pc, #212]	@ (8001da8 <HAL_DMA_Abort+0x620>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01d      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a34      	ldr	r2, [pc, #208]	@ (8001dac <HAL_DMA_Abort+0x624>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d018      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a32      	ldr	r2, [pc, #200]	@ (8001db0 <HAL_DMA_Abort+0x628>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a31      	ldr	r2, [pc, #196]	@ (8001db4 <HAL_DMA_Abort+0x62c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00e      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8001db8 <HAL_DMA_Abort+0x630>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2e      	ldr	r2, [pc, #184]	@ (8001dbc <HAL_DMA_Abort+0x634>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc0 <HAL_DMA_Abort+0x638>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_DMA_Abort+0x58e>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_DMA_Abort+0x590>
 8001d16:	2300      	movs	r3, #0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d24:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00c      	beq.n	8001d48 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d46:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40020010 	.word	0x40020010
 8001d68:	40020028 	.word	0x40020028
 8001d6c:	40020040 	.word	0x40020040
 8001d70:	40020058 	.word	0x40020058
 8001d74:	40020070 	.word	0x40020070
 8001d78:	40020088 	.word	0x40020088
 8001d7c:	400200a0 	.word	0x400200a0
 8001d80:	400200b8 	.word	0x400200b8
 8001d84:	40020410 	.word	0x40020410
 8001d88:	40020428 	.word	0x40020428
 8001d8c:	40020440 	.word	0x40020440
 8001d90:	40020458 	.word	0x40020458
 8001d94:	40020470 	.word	0x40020470
 8001d98:	40020488 	.word	0x40020488
 8001d9c:	400204a0 	.word	0x400204a0
 8001da0:	400204b8 	.word	0x400204b8
 8001da4:	58025408 	.word	0x58025408
 8001da8:	5802541c 	.word	0x5802541c
 8001dac:	58025430 	.word	0x58025430
 8001db0:	58025444 	.word	0x58025444
 8001db4:	58025458 	.word	0x58025458
 8001db8:	5802546c 	.word	0x5802546c
 8001dbc:	58025480 	.word	0x58025480
 8001dc0:	58025494 	.word	0x58025494

08001dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e237      	b.n	8002246 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d004      	beq.n	8001dec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2280      	movs	r2, #128	@ 0x80
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e22c      	b.n	8002246 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a5c      	ldr	r2, [pc, #368]	@ (8001f64 <HAL_DMA_Abort_IT+0x1a0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d04a      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8001f68 <HAL_DMA_Abort_IT+0x1a4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d045      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a59      	ldr	r2, [pc, #356]	@ (8001f6c <HAL_DMA_Abort_IT+0x1a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d040      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a58      	ldr	r2, [pc, #352]	@ (8001f70 <HAL_DMA_Abort_IT+0x1ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d03b      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a56      	ldr	r2, [pc, #344]	@ (8001f74 <HAL_DMA_Abort_IT+0x1b0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d036      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a55      	ldr	r2, [pc, #340]	@ (8001f78 <HAL_DMA_Abort_IT+0x1b4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d031      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a53      	ldr	r2, [pc, #332]	@ (8001f7c <HAL_DMA_Abort_IT+0x1b8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d02c      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a52      	ldr	r2, [pc, #328]	@ (8001f80 <HAL_DMA_Abort_IT+0x1bc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d027      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a50      	ldr	r2, [pc, #320]	@ (8001f84 <HAL_DMA_Abort_IT+0x1c0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d022      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a4f      	ldr	r2, [pc, #316]	@ (8001f88 <HAL_DMA_Abort_IT+0x1c4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d01d      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a4d      	ldr	r2, [pc, #308]	@ (8001f8c <HAL_DMA_Abort_IT+0x1c8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d018      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f90 <HAL_DMA_Abort_IT+0x1cc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a4a      	ldr	r2, [pc, #296]	@ (8001f94 <HAL_DMA_Abort_IT+0x1d0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00e      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a49      	ldr	r2, [pc, #292]	@ (8001f98 <HAL_DMA_Abort_IT+0x1d4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a47      	ldr	r2, [pc, #284]	@ (8001f9c <HAL_DMA_Abort_IT+0x1d8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a46      	ldr	r2, [pc, #280]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1dc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Abort_IT+0xcc>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_DMA_Abort_IT+0xce>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8086 	beq.w	8001fa4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8001f64 <HAL_DMA_Abort_IT+0x1a0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d04a      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2e      	ldr	r2, [pc, #184]	@ (8001f68 <HAL_DMA_Abort_IT+0x1a4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d045      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f6c <HAL_DMA_Abort_IT+0x1a8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d040      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8001f70 <HAL_DMA_Abort_IT+0x1ac>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d03b      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a29      	ldr	r2, [pc, #164]	@ (8001f74 <HAL_DMA_Abort_IT+0x1b0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d036      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a28      	ldr	r2, [pc, #160]	@ (8001f78 <HAL_DMA_Abort_IT+0x1b4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d031      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a26      	ldr	r2, [pc, #152]	@ (8001f7c <HAL_DMA_Abort_IT+0x1b8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02c      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a25      	ldr	r2, [pc, #148]	@ (8001f80 <HAL_DMA_Abort_IT+0x1bc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d027      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a23      	ldr	r2, [pc, #140]	@ (8001f84 <HAL_DMA_Abort_IT+0x1c0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d022      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a22      	ldr	r2, [pc, #136]	@ (8001f88 <HAL_DMA_Abort_IT+0x1c4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d01d      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a20      	ldr	r2, [pc, #128]	@ (8001f8c <HAL_DMA_Abort_IT+0x1c8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d018      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1f      	ldr	r2, [pc, #124]	@ (8001f90 <HAL_DMA_Abort_IT+0x1cc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f94 <HAL_DMA_Abort_IT+0x1d0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00e      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1c      	ldr	r2, [pc, #112]	@ (8001f98 <HAL_DMA_Abort_IT+0x1d4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1a      	ldr	r2, [pc, #104]	@ (8001f9c <HAL_DMA_Abort_IT+0x1d8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x17c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a19      	ldr	r2, [pc, #100]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1dc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <HAL_DMA_Abort_IT+0x18e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e178      	b.n	8002244 <HAL_DMA_Abort_IT+0x480>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e16f      	b.n	8002244 <HAL_DMA_Abort_IT+0x480>
 8001f64:	40020010 	.word	0x40020010
 8001f68:	40020028 	.word	0x40020028
 8001f6c:	40020040 	.word	0x40020040
 8001f70:	40020058 	.word	0x40020058
 8001f74:	40020070 	.word	0x40020070
 8001f78:	40020088 	.word	0x40020088
 8001f7c:	400200a0 	.word	0x400200a0
 8001f80:	400200b8 	.word	0x400200b8
 8001f84:	40020410 	.word	0x40020410
 8001f88:	40020428 	.word	0x40020428
 8001f8c:	40020440 	.word	0x40020440
 8001f90:	40020458 	.word	0x40020458
 8001f94:	40020470 	.word	0x40020470
 8001f98:	40020488 	.word	0x40020488
 8001f9c:	400204a0 	.word	0x400204a0
 8001fa0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 020e 	bic.w	r2, r2, #14
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a6c      	ldr	r2, [pc, #432]	@ (800216c <HAL_DMA_Abort_IT+0x3a8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d04a      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a6b      	ldr	r2, [pc, #428]	@ (8002170 <HAL_DMA_Abort_IT+0x3ac>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d045      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a69      	ldr	r2, [pc, #420]	@ (8002174 <HAL_DMA_Abort_IT+0x3b0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d040      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a68      	ldr	r2, [pc, #416]	@ (8002178 <HAL_DMA_Abort_IT+0x3b4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d03b      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a66      	ldr	r2, [pc, #408]	@ (800217c <HAL_DMA_Abort_IT+0x3b8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d036      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a65      	ldr	r2, [pc, #404]	@ (8002180 <HAL_DMA_Abort_IT+0x3bc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d031      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a63      	ldr	r2, [pc, #396]	@ (8002184 <HAL_DMA_Abort_IT+0x3c0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02c      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a62      	ldr	r2, [pc, #392]	@ (8002188 <HAL_DMA_Abort_IT+0x3c4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d027      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a60      	ldr	r2, [pc, #384]	@ (800218c <HAL_DMA_Abort_IT+0x3c8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5f      	ldr	r2, [pc, #380]	@ (8002190 <HAL_DMA_Abort_IT+0x3cc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d01d      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a5d      	ldr	r2, [pc, #372]	@ (8002194 <HAL_DMA_Abort_IT+0x3d0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d018      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a5c      	ldr	r2, [pc, #368]	@ (8002198 <HAL_DMA_Abort_IT+0x3d4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a5a      	ldr	r2, [pc, #360]	@ (800219c <HAL_DMA_Abort_IT+0x3d8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00e      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a59      	ldr	r2, [pc, #356]	@ (80021a0 <HAL_DMA_Abort_IT+0x3dc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a57      	ldr	r2, [pc, #348]	@ (80021a4 <HAL_DMA_Abort_IT+0x3e0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_DMA_Abort_IT+0x290>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a56      	ldr	r2, [pc, #344]	@ (80021a8 <HAL_DMA_Abort_IT+0x3e4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <HAL_DMA_Abort_IT+0x2a2>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e007      	b.n	8002076 <HAL_DMA_Abort_IT+0x2b2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a3c      	ldr	r2, [pc, #240]	@ (800216c <HAL_DMA_Abort_IT+0x3a8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d072      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a3a      	ldr	r2, [pc, #232]	@ (8002170 <HAL_DMA_Abort_IT+0x3ac>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d06d      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a39      	ldr	r2, [pc, #228]	@ (8002174 <HAL_DMA_Abort_IT+0x3b0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d068      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a37      	ldr	r2, [pc, #220]	@ (8002178 <HAL_DMA_Abort_IT+0x3b4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d063      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a36      	ldr	r2, [pc, #216]	@ (800217c <HAL_DMA_Abort_IT+0x3b8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d05e      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a34      	ldr	r2, [pc, #208]	@ (8002180 <HAL_DMA_Abort_IT+0x3bc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d059      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a33      	ldr	r2, [pc, #204]	@ (8002184 <HAL_DMA_Abort_IT+0x3c0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d054      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a31      	ldr	r2, [pc, #196]	@ (8002188 <HAL_DMA_Abort_IT+0x3c4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d04f      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a30      	ldr	r2, [pc, #192]	@ (800218c <HAL_DMA_Abort_IT+0x3c8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04a      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002190 <HAL_DMA_Abort_IT+0x3cc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d045      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2d      	ldr	r2, [pc, #180]	@ (8002194 <HAL_DMA_Abort_IT+0x3d0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d040      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002198 <HAL_DMA_Abort_IT+0x3d4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d03b      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2a      	ldr	r2, [pc, #168]	@ (800219c <HAL_DMA_Abort_IT+0x3d8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d036      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a28      	ldr	r2, [pc, #160]	@ (80021a0 <HAL_DMA_Abort_IT+0x3dc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d031      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a27      	ldr	r2, [pc, #156]	@ (80021a4 <HAL_DMA_Abort_IT+0x3e0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d02c      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a25      	ldr	r2, [pc, #148]	@ (80021a8 <HAL_DMA_Abort_IT+0x3e4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d027      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a24      	ldr	r2, [pc, #144]	@ (80021ac <HAL_DMA_Abort_IT+0x3e8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d022      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a22      	ldr	r2, [pc, #136]	@ (80021b0 <HAL_DMA_Abort_IT+0x3ec>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01d      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a21      	ldr	r2, [pc, #132]	@ (80021b4 <HAL_DMA_Abort_IT+0x3f0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d018      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <HAL_DMA_Abort_IT+0x3f4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1e      	ldr	r2, [pc, #120]	@ (80021bc <HAL_DMA_Abort_IT+0x3f8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1c      	ldr	r2, [pc, #112]	@ (80021c0 <HAL_DMA_Abort_IT+0x3fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1b      	ldr	r2, [pc, #108]	@ (80021c4 <HAL_DMA_Abort_IT+0x400>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_DMA_Abort_IT+0x3a2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a19      	ldr	r2, [pc, #100]	@ (80021c8 <HAL_DMA_Abort_IT+0x404>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d132      	bne.n	80021cc <HAL_DMA_Abort_IT+0x408>
 8002166:	2301      	movs	r3, #1
 8002168:	e031      	b.n	80021ce <HAL_DMA_Abort_IT+0x40a>
 800216a:	bf00      	nop
 800216c:	40020010 	.word	0x40020010
 8002170:	40020028 	.word	0x40020028
 8002174:	40020040 	.word	0x40020040
 8002178:	40020058 	.word	0x40020058
 800217c:	40020070 	.word	0x40020070
 8002180:	40020088 	.word	0x40020088
 8002184:	400200a0 	.word	0x400200a0
 8002188:	400200b8 	.word	0x400200b8
 800218c:	40020410 	.word	0x40020410
 8002190:	40020428 	.word	0x40020428
 8002194:	40020440 	.word	0x40020440
 8002198:	40020458 	.word	0x40020458
 800219c:	40020470 	.word	0x40020470
 80021a0:	40020488 	.word	0x40020488
 80021a4:	400204a0 	.word	0x400204a0
 80021a8:	400204b8 	.word	0x400204b8
 80021ac:	58025408 	.word	0x58025408
 80021b0:	5802541c 	.word	0x5802541c
 80021b4:	58025430 	.word	0x58025430
 80021b8:	58025444 	.word	0x58025444
 80021bc:	58025458 	.word	0x58025458
 80021c0:	5802546c 	.word	0x5802546c
 80021c4:	58025480 	.word	0x58025480
 80021c8:	58025494 	.word	0x58025494
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d028      	beq.n	8002224 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	2201      	movs	r2, #1
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002200:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00c      	beq.n	8002224 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002218:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002222:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop

08002250 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0e3      	b.n	800242a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002268:	2b00      	cmp	r3, #0
 800226a:	d106      	bne.n	800227a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2223      	movs	r2, #35	@ 0x23
 8002270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7fe fdbb 	bl	8000df0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	4b6e      	ldr	r3, [pc, #440]	@ (8002434 <HAL_ETH_Init+0x1e4>)
 800227c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002280:	4a6c      	ldr	r2, [pc, #432]	@ (8002434 <HAL_ETH_Init+0x1e4>)
 8002282:	f043 0302 	orr.w	r3, r3, #2
 8002286:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800228a:	4b6a      	ldr	r3, [pc, #424]	@ (8002434 <HAL_ETH_Init+0x1e4>)
 800228c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7a1b      	ldrb	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff f94d 	bl	8001540 <HAL_SYSCFG_ETHInterfaceSelect>
 80022a6:	e003      	b.n	80022b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80022a8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80022ac:	f7ff f948 	bl	8001540 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80022b0:	4b61      	ldr	r3, [pc, #388]	@ (8002438 <HAL_ETH_Init+0x1e8>)
 80022b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022cc:	f7ff f8fc 	bl	80014c8 <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80022d2:	e011      	b.n	80022f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80022d4:	f7ff f8f8 	bl	80014c8 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80022e2:	d909      	bls.n	80022f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2204      	movs	r2, #4
 80022e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	22e0      	movs	r2, #224	@ 0xe0
 80022f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e098      	b.n	800242a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e4      	bne.n	80022d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f89e 	bl	800244c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002310:	f001 feba 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 8002314:	4603      	mov	r3, r0
 8002316:	4a49      	ldr	r2, [pc, #292]	@ (800243c <HAL_ETH_Init+0x1ec>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	0c9a      	lsrs	r2, r3, #18
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3a01      	subs	r2, #1
 8002324:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fa81 	bl	8002830 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002336:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800233a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002346:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800234a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	22e0      	movs	r2, #224	@ 0xe0
 8002366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e05d      	b.n	800242a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002376:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800237a:	4b31      	ldr	r3, [pc, #196]	@ (8002440 <HAL_ETH_Init+0x1f0>)
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6952      	ldr	r2, [r2, #20]
 8002382:	0051      	lsls	r1, r2, #1
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800238e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fae9 	bl	800296a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fb2f 	bl	80029fc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	3305      	adds	r3, #5
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	021a      	lsls	r2, r3, #8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	3303      	adds	r3, #3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	061a      	lsls	r2, r3, #24
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	3302      	adds	r3, #2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	041b      	lsls	r3, r3, #16
 80023d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	3301      	adds	r3, #1
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80023ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023ec:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <HAL_ETH_Init+0x1f4>)
 80023fe:	430b      	orrs	r3, r1
 8002400:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_ETH_Init+0x1f8>)
 8002412:	430b      	orrs	r3, r1
 8002414:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2210      	movs	r2, #16
 8002424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	58024400 	.word	0x58024400
 8002438:	58000400 	.word	0x58000400
 800243c:	431bde83 	.word	0x431bde83
 8002440:	ffff8001 	.word	0xffff8001
 8002444:	0c020060 	.word	0x0c020060
 8002448:	0c20c000 	.word	0x0c20c000

0800244c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800245c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002464:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002466:	f001 fe0f 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 800246a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4a1a      	ldr	r2, [pc, #104]	@ (80024d8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d804      	bhi.n	800247e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e022      	b.n	80024c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4a16      	ldr	r2, [pc, #88]	@ (80024dc <HAL_ETH_SetMDIOClockRange+0x90>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d204      	bcs.n	8002490 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e019      	b.n	80024c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d915      	bls.n	80024c4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d804      	bhi.n	80024aa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e00c      	b.n	80024c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4a0e      	ldr	r2, [pc, #56]	@ (80024e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d804      	bhi.n	80024bc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e003      	b.n	80024c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80024c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	02160ebf 	.word	0x02160ebf
 80024dc:	03938700 	.word	0x03938700
 80024e0:	05f5e0ff 	.word	0x05f5e0ff
 80024e4:	08f0d17f 	.word	0x08f0d17f
 80024e8:	0ee6b27f 	.word	0x0ee6b27f

080024ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80024fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	791b      	ldrb	r3, [r3, #4]
 8002504:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002506:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	7b1b      	ldrb	r3, [r3, #12]
 800250c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800250e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	7b5b      	ldrb	r3, [r3, #13]
 8002514:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002516:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	7b9b      	ldrb	r3, [r3, #14]
 800251c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800251e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7bdb      	ldrb	r3, [r3, #15]
 8002524:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002526:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	7c12      	ldrb	r2, [r2, #16]
 800252c:	2a00      	cmp	r2, #0
 800252e:	d102      	bne.n	8002536 <ETH_SetMACConfig+0x4a>
 8002530:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002534:	e000      	b.n	8002538 <ETH_SetMACConfig+0x4c>
 8002536:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002538:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	7c52      	ldrb	r2, [r2, #17]
 800253e:	2a00      	cmp	r2, #0
 8002540:	d102      	bne.n	8002548 <ETH_SetMACConfig+0x5c>
 8002542:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002546:	e000      	b.n	800254a <ETH_SetMACConfig+0x5e>
 8002548:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800254a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	7c9b      	ldrb	r3, [r3, #18]
 8002550:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002552:	431a      	orrs	r2, r3
               macconf->Speed |
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002558:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800255e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	7f1b      	ldrb	r3, [r3, #28]
 8002564:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002566:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	7f5b      	ldrb	r3, [r3, #29]
 800256c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800256e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	7f92      	ldrb	r2, [r2, #30]
 8002574:	2a00      	cmp	r2, #0
 8002576:	d102      	bne.n	800257e <ETH_SetMACConfig+0x92>
 8002578:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800257c:	e000      	b.n	8002580 <ETH_SetMACConfig+0x94>
 800257e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002580:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	7fdb      	ldrb	r3, [r3, #31]
 8002586:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002588:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d102      	bne.n	800259a <ETH_SetMACConfig+0xae>
 8002594:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0xb0>
 800259a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800259c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80025ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b56      	ldr	r3, [pc, #344]	@ (8002718 <ETH_SetMACConfig+0x22c>)
 80025be:	4013      	ands	r3, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	68f9      	ldr	r1, [r7, #12]
 80025c6:	430b      	orrs	r3, r1
 80025c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80025ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	d102      	bne.n	80025fe <ETH_SetMACConfig+0x112>
 80025f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025fc:	e000      	b.n	8002600 <ETH_SetMACConfig+0x114>
 80025fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002600:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4b42      	ldr	r3, [pc, #264]	@ (800271c <ETH_SetMACConfig+0x230>)
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	430b      	orrs	r3, r1
 800261c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002624:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b3a      	ldr	r3, [pc, #232]	@ (8002720 <ETH_SetMACConfig+0x234>)
 8002636:	4013      	ands	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	430b      	orrs	r3, r1
 8002640:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002648:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800264e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002656:	2a00      	cmp	r2, #0
 8002658:	d101      	bne.n	800265e <ETH_SetMACConfig+0x172>
 800265a:	2280      	movs	r2, #128	@ 0x80
 800265c:	e000      	b.n	8002660 <ETH_SetMACConfig+0x174>
 800265e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002660:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002666:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002672:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	68f9      	ldr	r1, [r7, #12]
 800267e:	430b      	orrs	r3, r1
 8002680:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002688:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002690:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	f023 0103 	bic.w	r1, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80026b6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80026d2:	2a00      	cmp	r2, #0
 80026d4:	d101      	bne.n	80026da <ETH_SetMACConfig+0x1ee>
 80026d6:	2240      	movs	r2, #64	@ 0x40
 80026d8:	e000      	b.n	80026dc <ETH_SetMACConfig+0x1f0>
 80026da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80026dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80026e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80026ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80026fc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	430a      	orrs	r2, r1
 8002708:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	00048083 	.word	0x00048083
 800271c:	c0f88000 	.word	0xc0f88000
 8002720:	fffffef0 	.word	0xfffffef0

08002724 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b38      	ldr	r3, [pc, #224]	@ (800281c <ETH_SetDMAConfig+0xf8>)
 800273a:	4013      	ands	r3, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6811      	ldr	r1, [r2, #0]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	430b      	orrs	r3, r1
 8002746:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800274a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	791b      	ldrb	r3, [r3, #4]
 8002750:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002756:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7b1b      	ldrb	r3, [r3, #12]
 800275c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4b2c      	ldr	r3, [pc, #176]	@ (8002820 <ETH_SetDMAConfig+0xfc>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	430b      	orrs	r3, r1
 8002778:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800277c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7b5b      	ldrb	r3, [r3, #13]
 8002782:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002794:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002798:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <ETH_SetDMAConfig+0x100>)
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027a8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	7d1b      	ldrb	r3, [r3, #20]
 80027b4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80027b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	7f5b      	ldrb	r3, [r3, #29]
 80027bc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80027ce:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <ETH_SetDMAConfig+0x104>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	68f9      	ldr	r1, [r7, #12]
 80027d8:	430b      	orrs	r3, r1
 80027da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7f1b      	ldrb	r3, [r3, #28]
 80027e6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <ETH_SetDMAConfig+0x108>)
 80027fe:	4013      	ands	r3, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	430b      	orrs	r3, r1
 8002808:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800280c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	ffff87fd 	.word	0xffff87fd
 8002820:	ffff2ffe 	.word	0xffff2ffe
 8002824:	fffec000 	.word	0xfffec000
 8002828:	ffc0efef 	.word	0xffc0efef
 800282c:	7fc0ffff 	.word	0x7fc0ffff

08002830 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0a4      	sub	sp, #144	@ 0x90
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800283e:	2300      	movs	r3, #0
 8002840:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002854:	2301      	movs	r3, #1
 8002856:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800286c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002870:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002878:	2300      	movs	r3, #0
 800287a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002888:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800288c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002894:	2300      	movs	r3, #0
 8002896:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80028aa:	2300      	movs	r3, #0
 80028ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80028b2:	2300      	movs	r3, #0
 80028b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80028c8:	2320      	movs	r3, #32
 80028ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80028da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028e4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80028ec:	2302      	movs	r3, #2
 80028ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800290a:	2300      	movs	r3, #0
 800290c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fde6 	bl	80024ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002920:	2301      	movs	r3, #1
 8002922:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002924:	2301      	movs	r3, #1
 8002926:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800293a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800293e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002944:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002948:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002950:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff fee1 	bl	8002724 <ETH_SetDMAConfig>
}
 8002962:	bf00      	nop
 8002964:	3790      	adds	r7, #144	@ 0x90
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e01d      	b.n	80029b4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68d9      	ldr	r1, [r3, #12]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	3206      	adds	r2, #6
 80029aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3301      	adds	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d9de      	bls.n	8002978 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c8:	461a      	mov	r2, r3
 80029ca:	2303      	movs	r3, #3
 80029cc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029dc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e023      	b.n	8002a52 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6919      	ldr	r1, [r3, #16]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	3212      	adds	r2, #18
 8002a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d9d8      	bls.n	8002a0a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2303      	movs	r3, #3
 8002a82:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a92:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aa6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	@ 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ac6:	4b89      	ldr	r3, [pc, #548]	@ (8002cec <HAL_GPIO_Init+0x234>)
 8002ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002aca:	e194      	b.n	8002df6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8186 	beq.w	8002df0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d005      	beq.n	8002afc <HAL_GPIO_Init+0x44>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d130      	bne.n	8002b5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b32:	2201      	movs	r2, #1
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0201 	and.w	r2, r3, #1
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d017      	beq.n	8002b9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d123      	bne.n	8002bee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	08da      	lsrs	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3208      	adds	r2, #8
 8002be8:	69b9      	ldr	r1, [r7, #24]
 8002bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0203 	and.w	r2, r3, #3
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80e0 	beq.w	8002df0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c30:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <HAL_GPIO_Init+0x238>)
 8002c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c36:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf0 <HAL_GPIO_Init+0x238>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c40:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf0 <HAL_GPIO_Init+0x238>)
 8002c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c4e:	4a29      	ldr	r2, [pc, #164]	@ (8002cf4 <HAL_GPIO_Init+0x23c>)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a20      	ldr	r2, [pc, #128]	@ (8002cf8 <HAL_GPIO_Init+0x240>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d052      	beq.n	8002d20 <HAL_GPIO_Init+0x268>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cfc <HAL_GPIO_Init+0x244>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d031      	beq.n	8002ce6 <HAL_GPIO_Init+0x22e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1e      	ldr	r2, [pc, #120]	@ (8002d00 <HAL_GPIO_Init+0x248>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d02b      	beq.n	8002ce2 <HAL_GPIO_Init+0x22a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <HAL_GPIO_Init+0x24c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d025      	beq.n	8002cde <HAL_GPIO_Init+0x226>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1c      	ldr	r2, [pc, #112]	@ (8002d08 <HAL_GPIO_Init+0x250>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01f      	beq.n	8002cda <HAL_GPIO_Init+0x222>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <HAL_GPIO_Init+0x254>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d019      	beq.n	8002cd6 <HAL_GPIO_Init+0x21e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d10 <HAL_GPIO_Init+0x258>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_GPIO_Init+0x21a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a19      	ldr	r2, [pc, #100]	@ (8002d14 <HAL_GPIO_Init+0x25c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00d      	beq.n	8002cce <HAL_GPIO_Init+0x216>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	@ (8002d18 <HAL_GPIO_Init+0x260>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d007      	beq.n	8002cca <HAL_GPIO_Init+0x212>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a17      	ldr	r2, [pc, #92]	@ (8002d1c <HAL_GPIO_Init+0x264>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_GPIO_Init+0x20e>
 8002cc2:	2309      	movs	r3, #9
 8002cc4:	e02d      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cc6:	230a      	movs	r3, #10
 8002cc8:	e02b      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cca:	2308      	movs	r3, #8
 8002ccc:	e029      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e027      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cd2:	2306      	movs	r3, #6
 8002cd4:	e025      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	e023      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	e021      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e01f      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e01d      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e01b      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cea:	bf00      	nop
 8002cec:	58000080 	.word	0x58000080
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	58000400 	.word	0x58000400
 8002cf8:	58020000 	.word	0x58020000
 8002cfc:	58020400 	.word	0x58020400
 8002d00:	58020800 	.word	0x58020800
 8002d04:	58020c00 	.word	0x58020c00
 8002d08:	58021000 	.word	0x58021000
 8002d0c:	58021400 	.word	0x58021400
 8002d10:	58021800 	.word	0x58021800
 8002d14:	58021c00 	.word	0x58021c00
 8002d18:	58022000 	.word	0x58022000
 8002d1c:	58022400 	.word	0x58022400
 8002d20:	2300      	movs	r3, #0
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f002 0203 	and.w	r2, r2, #3
 8002d28:	0092      	lsls	r2, r2, #2
 8002d2a:	4093      	lsls	r3, r2
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d32:	4938      	ldr	r1, [pc, #224]	@ (8002e14 <HAL_GPIO_Init+0x35c>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3301      	adds	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f47f ae63 	bne.w	8002acc <HAL_GPIO_Init+0x14>
  }
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	3724      	adds	r7, #36	@ 0x24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	58000400 	.word	0x58000400

08002e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
 8002e24:	4613      	mov	r3, r2
 8002e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e28:	787b      	ldrb	r3, [r7, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e34:	e003      	b.n	8002e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e36:	887b      	ldrh	r3, [r7, #2]
 8002e38:	041a      	lsls	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	619a      	str	r2, [r3, #24]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e58:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd ff2d 	bl	8000cd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af02      	add	r7, sp, #8
 8002e84:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0fe      	b.n	800308e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7fe f8e3 	bl	8001070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2203      	movs	r2, #3
 8002eae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f005 fdb6 	bl	8008a28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7c1a      	ldrb	r2, [r3, #16]
 8002ec4:	f88d 2000 	strb.w	r2, [sp]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ecc:	f005 fd3a 	bl	8008944 <USB_CoreInit>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0d5      	b.n	800308e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fdae 	bl	8008a4a <USB_SetCurrentMode>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0c6      	b.n	800308e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e04a      	b.n	8002f9c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3315      	adds	r3, #21
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3314      	adds	r3, #20
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	b298      	uxth	r0, r3
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	332e      	adds	r3, #46	@ 0x2e
 8002f42:	4602      	mov	r2, r0
 8002f44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3318      	adds	r3, #24
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	331c      	adds	r3, #28
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3320      	adds	r3, #32
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f82:	7bfa      	ldrb	r2, [r7, #15]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3324      	adds	r3, #36	@ 0x24
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	791b      	ldrb	r3, [r3, #4]
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d3af      	bcc.n	8002f06 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
 8002faa:	e044      	b.n	8003036 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	3301      	adds	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	791b      	ldrb	r3, [r3, #4]
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	429a      	cmp	r2, r3
 800303e:	d3b5      	bcc.n	8002fac <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7c1a      	ldrb	r2, [r3, #16]
 8003048:	f88d 2000 	strb.w	r2, [sp]
 800304c:	3304      	adds	r3, #4
 800304e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003050:	f005 fd48 	bl	8008ae4 <USB_DevInit>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e013      	b.n	800308e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7b1b      	ldrb	r3, [r3, #12]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d102      	bne.n	8003082 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f80b 	bl	8003098 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f005 ff03 	bl	8008e92 <USB_DevDisconnect>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_PCDEx_ActivateLPM+0x44>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	10000003 	.word	0x10000003

080030e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80030e8:	4b19      	ldr	r3, [pc, #100]	@ (8003150 <HAL_PWREx_ConfigSupply+0x70>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d00a      	beq.n	800310a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030f4:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <HAL_PWREx_ConfigSupply+0x70>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e01f      	b.n	8003146 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e01d      	b.n	8003146 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800310a:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <HAL_PWREx_ConfigSupply+0x70>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	490f      	ldr	r1, [pc, #60]	@ (8003150 <HAL_PWREx_ConfigSupply+0x70>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4313      	orrs	r3, r2
 8003118:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800311a:	f7fe f9d5 	bl	80014c8 <HAL_GetTick>
 800311e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003120:	e009      	b.n	8003136 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003122:	f7fe f9d1 	bl	80014c8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003130:	d901      	bls.n	8003136 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_PWREx_ConfigSupply+0x70>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800313e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003142:	d1ee      	bne.n	8003122 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	58024800 	.word	0x58024800

08003154 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a04      	ldr	r2, [pc, #16]	@ (8003170 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003162:	60d3      	str	r3, [r2, #12]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	58024800 	.word	0x58024800

08003174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	@ 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f000 bc48 	b.w	8003a18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8088 	beq.w	80032a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003196:	4b99      	ldr	r3, [pc, #612]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800319e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031a0:	4b96      	ldr	r3, [pc, #600]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80031a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d007      	beq.n	80031bc <HAL_RCC_OscConfig+0x48>
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ae:	2b18      	cmp	r3, #24
 80031b0:	d111      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62>
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	4b8f      	ldr	r3, [pc, #572]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d06d      	beq.n	80032a4 <HAL_RCC_OscConfig+0x130>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d169      	bne.n	80032a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f000 bc21 	b.w	8003a18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x7a>
 80031e0:	4b86      	ldr	r3, [pc, #536]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a85      	ldr	r2, [pc, #532]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e02e      	b.n	800324c <HAL_RCC_OscConfig+0xd8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x9c>
 80031f6:	4b81      	ldr	r3, [pc, #516]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a80      	ldr	r2, [pc, #512]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b7e      	ldr	r3, [pc, #504]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7d      	ldr	r2, [pc, #500]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003208:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e01d      	b.n	800324c <HAL_RCC_OscConfig+0xd8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0xc0>
 800321a:	4b78      	ldr	r3, [pc, #480]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a77      	ldr	r2, [pc, #476]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b75      	ldr	r3, [pc, #468]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a74      	ldr	r2, [pc, #464]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0xd8>
 8003234:	4b71      	ldr	r3, [pc, #452]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a70      	ldr	r2, [pc, #448]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b6e      	ldr	r3, [pc, #440]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6d      	ldr	r2, [pc, #436]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800324a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe f938 	bl	80014c8 <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe f934 	bl	80014c8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	@ 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e3d4      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800326e:	4b63      	ldr	r3, [pc, #396]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0xe8>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe f924 	bl	80014c8 <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe f920 	bl	80014c8 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	@ 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e3c0      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003296:	4b59      	ldr	r3, [pc, #356]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x110>
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80ca 	beq.w	8003448 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b4:	4b51      	ldr	r3, [pc, #324]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032be:	4b4f      	ldr	r3, [pc, #316]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80032c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_RCC_OscConfig+0x166>
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	2b18      	cmp	r3, #24
 80032ce:	d156      	bne.n	800337e <HAL_RCC_OscConfig+0x20a>
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d151      	bne.n	800337e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032da:	4b48      	ldr	r3, [pc, #288]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_OscConfig+0x17e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e392      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032f2:	4b42      	ldr	r3, [pc, #264]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 0219 	bic.w	r2, r3, #25
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	493f      	ldr	r1, [pc, #252]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe f8e0 	bl	80014c8 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330c:	f7fe f8dc 	bl	80014c8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e37c      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800331e:	4b37      	ldr	r3, [pc, #220]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	f7fe f8fd 	bl	8001528 <HAL_GetREVID>
 800332e:	4603      	mov	r3, r0
 8003330:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003334:	4293      	cmp	r3, r2
 8003336:	d817      	bhi.n	8003368 <HAL_RCC_OscConfig+0x1f4>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b40      	cmp	r3, #64	@ 0x40
 800333e:	d108      	bne.n	8003352 <HAL_RCC_OscConfig+0x1de>
 8003340:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003348:	4a2c      	ldr	r2, [pc, #176]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003350:	e07a      	b.n	8003448 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b2a      	ldr	r3, [pc, #168]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	031b      	lsls	r3, r3, #12
 8003360:	4926      	ldr	r1, [pc, #152]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003366:	e06f      	b.n	8003448 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	4921      	ldr	r1, [pc, #132]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337c:	e064      	b.n	8003448 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d047      	beq.n	8003416 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003386:	4b1d      	ldr	r3, [pc, #116]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 0219 	bic.w	r2, r3, #25
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	491a      	ldr	r1, [pc, #104]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe f896 	bl	80014c8 <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fe f892 	bl	80014c8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e332      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033b2:	4b12      	ldr	r3, [pc, #72]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033be:	f7fe f8b3 	bl	8001528 <HAL_GetREVID>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d819      	bhi.n	8003400 <HAL_RCC_OscConfig+0x28c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b40      	cmp	r3, #64	@ 0x40
 80033d2:	d108      	bne.n	80033e6 <HAL_RCC_OscConfig+0x272>
 80033d4:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80033dc:	4a07      	ldr	r2, [pc, #28]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80033de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e2:	6053      	str	r3, [r2, #4]
 80033e4:	e030      	b.n	8003448 <HAL_RCC_OscConfig+0x2d4>
 80033e6:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	031b      	lsls	r3, r3, #12
 80033f4:	4901      	ldr	r1, [pc, #4]	@ (80033fc <HAL_RCC_OscConfig+0x288>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
 80033fa:	e025      	b.n	8003448 <HAL_RCC_OscConfig+0x2d4>
 80033fc:	58024400 	.word	0x58024400
 8003400:	4b9a      	ldr	r3, [pc, #616]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	4997      	ldr	r1, [pc, #604]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
 8003414:	e018      	b.n	8003448 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003416:	4b95      	ldr	r3, [pc, #596]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a94      	ldr	r2, [pc, #592]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe f851 	bl	80014c8 <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342a:	f7fe f84d 	bl	80014c8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e2ed      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800343c:	4b8b      	ldr	r3, [pc, #556]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a9 	beq.w	80035a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003456:	4b85      	ldr	r3, [pc, #532]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800345e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003460:	4b82      	ldr	r3, [pc, #520]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d007      	beq.n	800347c <HAL_RCC_OscConfig+0x308>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b18      	cmp	r3, #24
 8003470:	d13a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x374>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d135      	bne.n	80034e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800347c:	4b7b      	ldr	r3, [pc, #492]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_OscConfig+0x320>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	2b80      	cmp	r3, #128	@ 0x80
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e2c1      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003494:	f7fe f848 	bl	8001528 <HAL_GetREVID>
 8003498:	4603      	mov	r3, r0
 800349a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800349e:	4293      	cmp	r3, r2
 80034a0:	d817      	bhi.n	80034d2 <HAL_RCC_OscConfig+0x35e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d108      	bne.n	80034bc <HAL_RCC_OscConfig+0x348>
 80034aa:	4b70      	ldr	r3, [pc, #448]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80034b2:	4a6e      	ldr	r2, [pc, #440]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80034b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034ba:	e075      	b.n	80035a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034bc:	4b6b      	ldr	r3, [pc, #428]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	069b      	lsls	r3, r3, #26
 80034ca:	4968      	ldr	r1, [pc, #416]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034d0:	e06a      	b.n	80035a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d2:	4b66      	ldr	r3, [pc, #408]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	061b      	lsls	r3, r3, #24
 80034e0:	4962      	ldr	r1, [pc, #392]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034e6:	e05f      	b.n	80035a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d042      	beq.n	8003576 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034f0:	4b5e      	ldr	r3, [pc, #376]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a5d      	ldr	r2, [pc, #372]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80034f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fd ffe4 	bl	80014c8 <HAL_GetTick>
 8003500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003504:	f7fd ffe0 	bl	80014c8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e280      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003516:	4b55      	ldr	r3, [pc, #340]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003522:	f7fe f801 	bl	8001528 <HAL_GetREVID>
 8003526:	4603      	mov	r3, r0
 8003528:	f241 0203 	movw	r2, #4099	@ 0x1003
 800352c:	4293      	cmp	r3, r2
 800352e:	d817      	bhi.n	8003560 <HAL_RCC_OscConfig+0x3ec>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	2b20      	cmp	r3, #32
 8003536:	d108      	bne.n	800354a <HAL_RCC_OscConfig+0x3d6>
 8003538:	4b4c      	ldr	r3, [pc, #304]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003540:	4a4a      	ldr	r2, [pc, #296]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003542:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003546:	6053      	str	r3, [r2, #4]
 8003548:	e02e      	b.n	80035a8 <HAL_RCC_OscConfig+0x434>
 800354a:	4b48      	ldr	r3, [pc, #288]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	069b      	lsls	r3, r3, #26
 8003558:	4944      	ldr	r1, [pc, #272]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
 800355e:	e023      	b.n	80035a8 <HAL_RCC_OscConfig+0x434>
 8003560:	4b42      	ldr	r3, [pc, #264]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	061b      	lsls	r3, r3, #24
 800356e:	493f      	ldr	r1, [pc, #252]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003570:	4313      	orrs	r3, r2
 8003572:	60cb      	str	r3, [r1, #12]
 8003574:	e018      	b.n	80035a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003576:	4b3d      	ldr	r3, [pc, #244]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a3c      	ldr	r2, [pc, #240]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800357c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fd ffa1 	bl	80014c8 <HAL_GetTick>
 8003586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800358a:	f7fd ff9d 	bl	80014c8 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e23d      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800359c:	4b33      	ldr	r3, [pc, #204]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f0      	bne.n	800358a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d036      	beq.n	8003622 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d019      	beq.n	80035f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035bc:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c0:	4a2a      	ldr	r2, [pc, #168]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fd ff7e 	bl	80014c8 <HAL_GetTick>
 80035cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fd ff7a 	bl	80014c8 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e21a      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035e2:	4b22      	ldr	r3, [pc, #136]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x45c>
 80035ee:	e018      	b.n	8003622 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f0:	4b1e      	ldr	r3, [pc, #120]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80035f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f4:	4a1d      	ldr	r2, [pc, #116]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fd ff64 	bl	80014c8 <HAL_GetTick>
 8003600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003604:	f7fd ff60 	bl	80014c8 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e200      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003616:	4b15      	ldr	r3, [pc, #84]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b00      	cmp	r3, #0
 800362c:	d039      	beq.n	80036a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01c      	beq.n	8003670 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a0c      	ldr	r2, [pc, #48]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800363c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003640:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003642:	f7fd ff41 	bl	80014c8 <HAL_GetTick>
 8003646:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800364a:	f7fd ff3d 	bl	80014c8 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1dd      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800365c:	4b03      	ldr	r3, [pc, #12]	@ (800366c <HAL_RCC_OscConfig+0x4f8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x4d6>
 8003668:	e01b      	b.n	80036a2 <HAL_RCC_OscConfig+0x52e>
 800366a:	bf00      	nop
 800366c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003670:	4b9b      	ldr	r3, [pc, #620]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a9a      	ldr	r2, [pc, #616]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800367a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800367c:	f7fd ff24 	bl	80014c8 <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003684:	f7fd ff20 	bl	80014c8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e1c0      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003696:	4b92      	ldr	r3, [pc, #584]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8081 	beq.w	80037b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036b0:	4b8c      	ldr	r3, [pc, #560]	@ (80038e4 <HAL_RCC_OscConfig+0x770>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a8b      	ldr	r2, [pc, #556]	@ (80038e4 <HAL_RCC_OscConfig+0x770>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036bc:	f7fd ff04 	bl	80014c8 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c4:	f7fd ff00 	bl	80014c8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	@ 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e1a0      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d6:	4b83      	ldr	r3, [pc, #524]	@ (80038e4 <HAL_RCC_OscConfig+0x770>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d106      	bne.n	80036f8 <HAL_RCC_OscConfig+0x584>
 80036ea:	4b7d      	ldr	r3, [pc, #500]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	4a7c      	ldr	r2, [pc, #496]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f6:	e02d      	b.n	8003754 <HAL_RCC_OscConfig+0x5e0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10c      	bne.n	800371a <HAL_RCC_OscConfig+0x5a6>
 8003700:	4b77      	ldr	r3, [pc, #476]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	4a76      	ldr	r2, [pc, #472]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
 800370c:	4b74      	ldr	r3, [pc, #464]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a73      	ldr	r2, [pc, #460]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
 8003718:	e01c      	b.n	8003754 <HAL_RCC_OscConfig+0x5e0>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b05      	cmp	r3, #5
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x5c8>
 8003722:	4b6f      	ldr	r3, [pc, #444]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	4a6e      	ldr	r2, [pc, #440]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6713      	str	r3, [r2, #112]	@ 0x70
 800372e:	4b6c      	ldr	r3, [pc, #432]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	4a6b      	ldr	r2, [pc, #428]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6713      	str	r3, [r2, #112]	@ 0x70
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0x5e0>
 800373c:	4b68      	ldr	r3, [pc, #416]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003740:	4a67      	ldr	r2, [pc, #412]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6713      	str	r3, [r2, #112]	@ 0x70
 8003748:	4b65      	ldr	r3, [pc, #404]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374c:	4a64      	ldr	r2, [pc, #400]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 800374e:	f023 0304 	bic.w	r3, r3, #4
 8003752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fd feb4 	bl	80014c8 <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fd feb0 	bl	80014c8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e14e      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800377a:	4b59      	ldr	r3, [pc, #356]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ee      	beq.n	8003764 <HAL_RCC_OscConfig+0x5f0>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fd fe9e 	bl	80014c8 <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fd fe9a 	bl	80014c8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e138      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037a6:	4b4e      	ldr	r3, [pc, #312]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ee      	bne.n	8003790 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 812d 	beq.w	8003a16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037bc:	4b48      	ldr	r3, [pc, #288]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037c4:	2b18      	cmp	r3, #24
 80037c6:	f000 80bd 	beq.w	8003944 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	f040 809e 	bne.w	8003910 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d4:	4b42      	ldr	r3, [pc, #264]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a41      	ldr	r2, [pc, #260]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80037da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd fe72 	bl	80014c8 <HAL_GetTick>
 80037e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fd fe6e 	bl	80014c8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e10e      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037fa:	4b39      	ldr	r3, [pc, #228]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003806:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800380a:	4b37      	ldr	r3, [pc, #220]	@ (80038e8 <HAL_RCC_OscConfig+0x774>)
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	430a      	orrs	r2, r1
 800381a:	4931      	ldr	r1, [pc, #196]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 800381c:	4313      	orrs	r3, r2
 800381e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	3b01      	subs	r3, #1
 8003826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382e:	3b01      	subs	r3, #1
 8003830:	025b      	lsls	r3, r3, #9
 8003832:	b29b      	uxth	r3, r3
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383a:	3b01      	subs	r3, #1
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003848:	3b01      	subs	r3, #1
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003850:	4923      	ldr	r1, [pc, #140]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003856:	4b22      	ldr	r3, [pc, #136]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385a:	4a21      	ldr	r2, [pc, #132]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003862:	4b1f      	ldr	r3, [pc, #124]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003866:	4b21      	ldr	r3, [pc, #132]	@ (80038ec <HAL_RCC_OscConfig+0x778>)
 8003868:	4013      	ands	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800386e:	00d2      	lsls	r2, r2, #3
 8003870:	491b      	ldr	r1, [pc, #108]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003876:	4b1a      	ldr	r3, [pc, #104]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	f023 020c 	bic.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	4917      	ldr	r1, [pc, #92]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003888:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	f023 0202 	bic.w	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	4912      	ldr	r1, [pc, #72]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800389a:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	4a10      	ldr	r2, [pc, #64]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a6:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038aa:	4a0d      	ldr	r2, [pc, #52]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80038ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038b2:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	4a0a      	ldr	r2, [pc, #40]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	4a07      	ldr	r2, [pc, #28]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ca:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a04      	ldr	r2, [pc, #16]	@ (80038e0 <HAL_RCC_OscConfig+0x76c>)
 80038d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fd fdf7 	bl	80014c8 <HAL_GetTick>
 80038da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038dc:	e011      	b.n	8003902 <HAL_RCC_OscConfig+0x78e>
 80038de:	bf00      	nop
 80038e0:	58024400 	.word	0x58024400
 80038e4:	58024800 	.word	0x58024800
 80038e8:	fffffc0c 	.word	0xfffffc0c
 80038ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fd fdea 	bl	80014c8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e08a      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003902:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x77c>
 800390e:	e082      	b.n	8003a16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003910:	4b43      	ldr	r3, [pc, #268]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a42      	ldr	r2, [pc, #264]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 8003916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fd fdd4 	bl	80014c8 <HAL_GetTick>
 8003920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fd fdd0 	bl	80014c8 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e070      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003936:	4b3a      	ldr	r3, [pc, #232]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x7b0>
 8003942:	e068      	b.n	8003a16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003944:	4b36      	ldr	r3, [pc, #216]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800394a:	4b35      	ldr	r3, [pc, #212]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	2b01      	cmp	r3, #1
 8003956:	d031      	beq.n	80039bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d12a      	bne.n	80039bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d122      	bne.n	80039bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d11a      	bne.n	80039bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	0a5b      	lsrs	r3, r3, #9
 800398a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003992:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d111      	bne.n	80039bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d108      	bne.n	80039bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	0e1b      	lsrs	r3, r3, #24
 80039ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e02b      	b.n	8003a18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80039c0:	4b17      	ldr	r3, [pc, #92]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 80039c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c4:	08db      	lsrs	r3, r3, #3
 80039c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d01f      	beq.n	8003a16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80039d6:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	4a11      	ldr	r2, [pc, #68]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039e2:	f7fd fd71 	bl	80014c8 <HAL_GetTick>
 80039e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80039e8:	bf00      	nop
 80039ea:	f7fd fd6d 	bl	80014c8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d0f9      	beq.n	80039ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 80039f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <HAL_RCC_OscConfig+0x8b0>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a02:	00d2      	lsls	r2, r2, #3
 8003a04:	4906      	ldr	r1, [pc, #24]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a0a:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <HAL_RCC_OscConfig+0x8ac>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3730      	adds	r7, #48	@ 0x30
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	58024400 	.word	0x58024400
 8003a24:	ffff0007 	.word	0xffff0007

08003a28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e19c      	b.n	8003d76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8003c68 <HAL_RCC_ClockConfig+0x240>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d910      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b87      	ldr	r3, [pc, #540]	@ (8003c68 <HAL_RCC_ClockConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 020f 	bic.w	r2, r3, #15
 8003a52:	4985      	ldr	r1, [pc, #532]	@ (8003c68 <HAL_RCC_ClockConfig+0x240>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b83      	ldr	r3, [pc, #524]	@ (8003c68 <HAL_RCC_ClockConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e184      	b.n	8003d76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d010      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d908      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a88:	4b78      	ldr	r3, [pc, #480]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	4975      	ldr	r1, [pc, #468]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d010      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	4b70      	ldr	r3, [pc, #448]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d908      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	496a      	ldr	r1, [pc, #424]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d010      	beq.n	8003af6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	4b64      	ldr	r3, [pc, #400]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d908      	bls.n	8003af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ae4:	4b61      	ldr	r3, [pc, #388]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	495e      	ldr	r1, [pc, #376]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d010      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	4b59      	ldr	r3, [pc, #356]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d908      	bls.n	8003b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b12:	4b56      	ldr	r3, [pc, #344]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	4953      	ldr	r1, [pc, #332]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d010      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4b4d      	ldr	r3, [pc, #308]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d908      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b4a      	ldr	r3, [pc, #296]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f023 020f 	bic.w	r2, r3, #15
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4947      	ldr	r1, [pc, #284]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d055      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b5e:	4b43      	ldr	r3, [pc, #268]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	4940      	ldr	r1, [pc, #256]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b78:	4b3c      	ldr	r3, [pc, #240]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d121      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0f6      	b.n	8003d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b90:	4b36      	ldr	r3, [pc, #216]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d115      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0ea      	b.n	8003d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ba8:	4b30      	ldr	r3, [pc, #192]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0de      	b.n	8003d76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0d6      	b.n	8003d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bc8:	4b28      	ldr	r3, [pc, #160]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f023 0207 	bic.w	r2, r3, #7
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4925      	ldr	r1, [pc, #148]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bda:	f7fd fc75 	bl	80014c8 <HAL_GetTick>
 8003bde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be2:	f7fd fc71 	bl	80014c8 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0be      	b.n	8003d76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d1eb      	bne.n	8003be2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d010      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d208      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c26:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f023 020f 	bic.w	r2, r3, #15
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	490e      	ldr	r1, [pc, #56]	@ (8003c6c <HAL_RCC_ClockConfig+0x244>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_ClockConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d214      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b08      	ldr	r3, [pc, #32]	@ (8003c68 <HAL_RCC_ClockConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 020f 	bic.w	r2, r3, #15
 8003c4e:	4906      	ldr	r1, [pc, #24]	@ (8003c68 <HAL_RCC_ClockConfig+0x240>)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b04      	ldr	r3, [pc, #16]	@ (8003c68 <HAL_RCC_ClockConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e086      	b.n	8003d76 <HAL_RCC_ClockConfig+0x34e>
 8003c68:	52002000 	.word	0x52002000
 8003c6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	4b3f      	ldr	r3, [pc, #252]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d208      	bcs.n	8003c9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	4939      	ldr	r1, [pc, #228]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	4b34      	ldr	r3, [pc, #208]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d208      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cba:	4b31      	ldr	r3, [pc, #196]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	492e      	ldr	r1, [pc, #184]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	4b28      	ldr	r3, [pc, #160]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d208      	bcs.n	8003cfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ce8:	4b25      	ldr	r3, [pc, #148]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	4922      	ldr	r1, [pc, #136]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d010      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d208      	bcs.n	8003d28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d16:	4b1a      	ldr	r3, [pc, #104]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	4917      	ldr	r1, [pc, #92]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d28:	f000 f834 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b14      	ldr	r3, [pc, #80]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	4912      	ldr	r1, [pc, #72]	@ (8003d84 <HAL_RCC_ClockConfig+0x35c>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
 8003d44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d46:	4b0e      	ldr	r3, [pc, #56]	@ (8003d80 <HAL_RCC_ClockConfig+0x358>)
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d84 <HAL_RCC_ClockConfig+0x35c>)
 8003d50:	5cd3      	ldrb	r3, [r2, r3]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d88 <HAL_RCC_ClockConfig+0x360>)
 8003d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d60:	4a0a      	ldr	r2, [pc, #40]	@ (8003d8c <HAL_RCC_ClockConfig+0x364>)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <HAL_RCC_ClockConfig+0x368>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fb62 	bl	8001434 <HAL_InitTick>
 8003d70:	4603      	mov	r3, r0
 8003d72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
 8003d84:	08009930 	.word	0x08009930
 8003d88:	24000064 	.word	0x24000064
 8003d8c:	24000060 	.word	0x24000060
 8003d90:	24000068 	.word	0x24000068

08003d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d9a:	4bb3      	ldr	r3, [pc, #716]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003da2:	2b18      	cmp	r3, #24
 8003da4:	f200 8155 	bhi.w	8004052 <HAL_RCC_GetSysClockFreq+0x2be>
 8003da8:	a201      	add	r2, pc, #4	@ (adr r2, 8003db0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dae:	bf00      	nop
 8003db0:	08003e15 	.word	0x08003e15
 8003db4:	08004053 	.word	0x08004053
 8003db8:	08004053 	.word	0x08004053
 8003dbc:	08004053 	.word	0x08004053
 8003dc0:	08004053 	.word	0x08004053
 8003dc4:	08004053 	.word	0x08004053
 8003dc8:	08004053 	.word	0x08004053
 8003dcc:	08004053 	.word	0x08004053
 8003dd0:	08003e3b 	.word	0x08003e3b
 8003dd4:	08004053 	.word	0x08004053
 8003dd8:	08004053 	.word	0x08004053
 8003ddc:	08004053 	.word	0x08004053
 8003de0:	08004053 	.word	0x08004053
 8003de4:	08004053 	.word	0x08004053
 8003de8:	08004053 	.word	0x08004053
 8003dec:	08004053 	.word	0x08004053
 8003df0:	08003e41 	.word	0x08003e41
 8003df4:	08004053 	.word	0x08004053
 8003df8:	08004053 	.word	0x08004053
 8003dfc:	08004053 	.word	0x08004053
 8003e00:	08004053 	.word	0x08004053
 8003e04:	08004053 	.word	0x08004053
 8003e08:	08004053 	.word	0x08004053
 8003e0c:	08004053 	.word	0x08004053
 8003e10:	08003e47 	.word	0x08003e47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e14:	4b94      	ldr	r3, [pc, #592]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e20:	4b91      	ldr	r3, [pc, #580]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	08db      	lsrs	r3, r3, #3
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	4a90      	ldr	r2, [pc, #576]	@ (800406c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e32:	e111      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e34:	4b8d      	ldr	r3, [pc, #564]	@ (800406c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e36:	61bb      	str	r3, [r7, #24]
      break;
 8003e38:	e10e      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e3c:	61bb      	str	r3, [r7, #24]
      break;
 8003e3e:	e10b      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e40:	4b8c      	ldr	r3, [pc, #560]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e42:	61bb      	str	r3, [r7, #24]
      break;
 8003e44:	e108      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e46:	4b88      	ldr	r3, [pc, #544]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e50:	4b85      	ldr	r3, [pc, #532]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e5c:	4b82      	ldr	r3, [pc, #520]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e66:	4b80      	ldr	r3, [pc, #512]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6a:	08db      	lsrs	r3, r3, #3
 8003e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80e1 	beq.w	800404c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	f000 8083 	beq.w	8003f98 <HAL_RCC_GetSysClockFreq+0x204>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	f200 80a1 	bhi.w	8003fdc <HAL_RCC_GetSysClockFreq+0x248>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x114>
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d056      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ea6:	e099      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02d      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	4a6b      	ldr	r2, [pc, #428]	@ (800406c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ede:	4b62      	ldr	r3, [pc, #392]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ef2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f0e:	e087      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800407c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f22:	4b51      	ldr	r3, [pc, #324]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f52:	e065      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f66:	4b40      	ldr	r3, [pc, #256]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f96:	e043      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004084 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b2f      	ldr	r3, [pc, #188]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fbe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fda:	e021      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004002:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800401e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004020:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	0a5b      	lsrs	r3, r3, #9
 8004026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800402a:	3301      	adds	r3, #1
 800402c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004038:	edd7 6a07 	vldr	s13, [r7, #28]
 800403c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004044:	ee17 3a90 	vmov	r3, s15
 8004048:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800404a:	e005      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	61bb      	str	r3, [r7, #24]
      break;
 8004050:	e002      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004054:	61bb      	str	r3, [r7, #24]
      break;
 8004056:	bf00      	nop
  }

  return sysclockfreq;
 8004058:	69bb      	ldr	r3, [r7, #24]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3724      	adds	r7, #36	@ 0x24
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	58024400 	.word	0x58024400
 800406c:	03d09000 	.word	0x03d09000
 8004070:	003d0900 	.word	0x003d0900
 8004074:	007a1200 	.word	0x007a1200
 8004078:	46000000 	.word	0x46000000
 800407c:	4c742400 	.word	0x4c742400
 8004080:	4a742400 	.word	0x4a742400
 8004084:	4af42400 	.word	0x4af42400

08004088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800408e:	f7ff fe81 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8004092:	4602      	mov	r2, r0
 8004094:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	490f      	ldr	r1, [pc, #60]	@ (80040dc <HAL_RCC_GetHCLKFreq+0x54>)
 80040a0:	5ccb      	ldrb	r3, [r1, r3]
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040ac:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	4a09      	ldr	r2, [pc, #36]	@ (80040dc <HAL_RCC_GetHCLKFreq+0x54>)
 80040b6:	5cd3      	ldrb	r3, [r2, r3]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	4a07      	ldr	r2, [pc, #28]	@ (80040e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80040c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040c6:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040cc:	4b04      	ldr	r3, [pc, #16]	@ (80040e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	58024400 	.word	0x58024400
 80040dc:	08009930 	.word	0x08009930
 80040e0:	24000064 	.word	0x24000064
 80040e4:	24000060 	.word	0x24000060

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80040ec:	f7ff ffcc 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b06      	ldr	r3, [pc, #24]	@ (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4904      	ldr	r1, [pc, #16]	@ (8004110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	58024400 	.word	0x58024400
 8004110:	08009930 	.word	0x08009930

08004114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004118:	f7ff ffb6 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4904      	ldr	r1, [pc, #16]	@ (800413c <HAL_RCC_GetPCLK2Freq+0x28>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}
 8004138:	58024400 	.word	0x58024400
 800413c:	08009930 	.word	0x08009930

08004140 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004144:	b0ca      	sub	sp, #296	@ 0x128
 8004146:	af00      	add	r7, sp, #0
 8004148:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800414c:	2300      	movs	r3, #0
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004152:	2300      	movs	r3, #0
 8004154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004164:	2500      	movs	r5, #0
 8004166:	ea54 0305 	orrs.w	r3, r4, r5
 800416a:	d049      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004172:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004176:	d02f      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004178:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800417c:	d828      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800417e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004182:	d01a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004188:	d822      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004192:	d007      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004194:	e01c      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004196:	4bb8      	ldr	r3, [pc, #736]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	4ab7      	ldr	r2, [pc, #732]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800419c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041a2:	e01a      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a8:	3308      	adds	r3, #8
 80041aa:	2102      	movs	r1, #2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 fc8f 	bl	8005ad0 <RCCEx_PLL2_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041b8:	e00f      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	3328      	adds	r3, #40	@ 0x28
 80041c0:	2102      	movs	r1, #2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 fd36 	bl	8005c34 <RCCEx_PLL3_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041ce:	e004      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041e2:	4ba5      	ldr	r3, [pc, #660]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041f0:	4aa1      	ldr	r2, [pc, #644]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041f2:	430b      	orrs	r3, r1
 80041f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80041f6:	e003      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800420c:	f04f 0900 	mov.w	r9, #0
 8004210:	ea58 0309 	orrs.w	r3, r8, r9
 8004214:	d047      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421c:	2b04      	cmp	r3, #4
 800421e:	d82a      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004220:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800423d 	.word	0x0800423d
 800422c:	0800424b 	.word	0x0800424b
 8004230:	08004261 	.word	0x08004261
 8004234:	0800427f 	.word	0x0800427f
 8004238:	0800427f 	.word	0x0800427f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423c:	4b8e      	ldr	r3, [pc, #568]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	4a8d      	ldr	r2, [pc, #564]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004248:	e01a      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	3308      	adds	r3, #8
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f001 fc3c 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800425e:	e00f      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	3328      	adds	r3, #40	@ 0x28
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fce3 	bl	8005c34 <RCCEx_PLL3_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004274:	e004      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800427c:	e000      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800427e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004288:	4b7b      	ldr	r3, [pc, #492]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800428a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428c:	f023 0107 	bic.w	r1, r3, #7
 8004290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004296:	4a78      	ldr	r2, [pc, #480]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004298:	430b      	orrs	r3, r1
 800429a:	6513      	str	r3, [r2, #80]	@ 0x50
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80042b2:	f04f 0b00 	mov.w	fp, #0
 80042b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80042ba:	d04c      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c6:	d030      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80042c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042cc:	d829      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80042d0:	d02d      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80042d4:	d825      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042d6:	2b80      	cmp	r3, #128	@ 0x80
 80042d8:	d018      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80042da:	2b80      	cmp	r3, #128	@ 0x80
 80042dc:	d821      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80042e2:	2b40      	cmp	r3, #64	@ 0x40
 80042e4:	d007      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80042e6:	e01c      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e8:	4b63      	ldr	r3, [pc, #396]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	4a62      	ldr	r2, [pc, #392]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80042f4:	e01c      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	3308      	adds	r3, #8
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 fbe6 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800430a:	e011      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004310:	3328      	adds	r3, #40	@ 0x28
 8004312:	2100      	movs	r1, #0
 8004314:	4618      	mov	r0, r3
 8004316:	f001 fc8d 	bl	8005c34 <RCCEx_PLL3_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004320:	e006      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004328:	e002      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800432e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004338:	4b4f      	ldr	r3, [pc, #316]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800433a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004346:	4a4c      	ldr	r2, [pc, #304]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004348:	430b      	orrs	r3, r1
 800434a:	6513      	str	r3, [r2, #80]	@ 0x50
 800434c:	e003      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004362:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800436c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004370:	460b      	mov	r3, r1
 8004372:	4313      	orrs	r3, r2
 8004374:	d053      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800437e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004382:	d035      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004384:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004388:	d82e      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800438a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800438e:	d031      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004390:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004394:	d828      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800439a:	d01a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800439c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a0:	d822      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80043a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043aa:	d007      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80043ac:	e01c      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ae:	4b32      	ldr	r3, [pc, #200]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b2:	4a31      	ldr	r2, [pc, #196]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043ba:	e01c      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c0:	3308      	adds	r3, #8
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f001 fb83 	bl	8005ad0 <RCCEx_PLL2_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043d0:	e011      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	3328      	adds	r3, #40	@ 0x28
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 fc2a 	bl	8005c34 <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043e6:	e006      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ee:	e002      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80043f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80043fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800440e:	4a1a      	ldr	r2, [pc, #104]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004410:	430b      	orrs	r3, r1
 8004412:	6593      	str	r3, [r2, #88]	@ 0x58
 8004414:	e003      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800442a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004434:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d056      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004446:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800444a:	d038      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800444c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004450:	d831      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004452:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004456:	d034      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004458:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800445c:	d82b      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800445e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004462:	d01d      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004468:	d825      	bhi.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800446e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004474:	e01f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004476:	bf00      	nop
 8004478:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4ba2      	ldr	r3, [pc, #648]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	4aa1      	ldr	r2, [pc, #644]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004488:	e01c      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448e:	3308      	adds	r3, #8
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f001 fb1c 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800449e:	e011      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	3328      	adds	r3, #40	@ 0x28
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 fbc3 	bl	8005c34 <RCCEx_PLL3_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044b4:	e006      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044bc:	e002      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10b      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044cc:	4b8e      	ldr	r3, [pc, #568]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80044dc:	4a8a      	ldr	r2, [pc, #552]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044de:	430b      	orrs	r3, r1
 80044e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044e2:	e003      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80044f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044fc:	2300      	movs	r3, #0
 80044fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004502:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004506:	460b      	mov	r3, r1
 8004508:	4313      	orrs	r3, r2
 800450a:	d03a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004512:	2b30      	cmp	r3, #48	@ 0x30
 8004514:	d01f      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004516:	2b30      	cmp	r3, #48	@ 0x30
 8004518:	d819      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800451a:	2b20      	cmp	r3, #32
 800451c:	d00c      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800451e:	2b20      	cmp	r3, #32
 8004520:	d815      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d019      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004526:	2b10      	cmp	r3, #16
 8004528:	d111      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452a:	4b77      	ldr	r3, [pc, #476]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	4a76      	ldr	r2, [pc, #472]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004534:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004536:	e011      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453c:	3308      	adds	r3, #8
 800453e:	2102      	movs	r1, #2
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fac5 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800454c:	e006      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004554:	e002      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800455a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004564:	4b68      	ldr	r3, [pc, #416]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004568:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004572:	4a65      	ldr	r2, [pc, #404]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004574:	430b      	orrs	r3, r1
 8004576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004578:	e003      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800458e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004598:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800459c:	460b      	mov	r3, r1
 800459e:	4313      	orrs	r3, r2
 80045a0:	d051      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ac:	d035      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80045ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b2:	d82e      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045b8:	d031      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80045ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045be:	d828      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045c4:	d01a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ca:	d822      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80045d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d4:	d007      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80045d6:	e01c      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045e4:	e01c      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	3308      	adds	r3, #8
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 fa6e 	bl	8005ad0 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045fa:	e011      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004600:	3328      	adds	r3, #40	@ 0x28
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f001 fb15 	bl	8005c34 <RCCEx_PLL3_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004610:	e006      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004618:	e002      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800461e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004628:	4b37      	ldr	r3, [pc, #220]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800462a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004636:	4a34      	ldr	r2, [pc, #208]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6513      	str	r3, [r2, #80]	@ 0x50
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004656:	2300      	movs	r3, #0
 8004658:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800465c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004660:	460b      	mov	r3, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	d056      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800466c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004670:	d033      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004672:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004676:	d82c      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004678:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800467c:	d02f      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800467e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004682:	d826      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004684:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004688:	d02b      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800468a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800468e:	d820      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004694:	d012      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800469a:	d81a      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d022      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a4:	d115      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046aa:	3308      	adds	r3, #8
 80046ac:	2101      	movs	r1, #1
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 fa0e 	bl	8005ad0 <RCCEx_PLL2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046ba:	e015      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	3328      	adds	r3, #40	@ 0x28
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 fab5 	bl	8005c34 <RCCEx_PLL3_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046d0:	e00a      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046da:	bf00      	nop
 80046dc:	e004      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10d      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046fe:	4a02      	ldr	r2, [pc, #8]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004700:	430b      	orrs	r3, r1
 8004702:	6513      	str	r3, [r2, #80]	@ 0x50
 8004704:	e006      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004706:	bf00      	nop
 8004708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800472a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d055      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800473c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004740:	d033      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004742:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004746:	d82c      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474c:	d02f      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004752:	d826      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004754:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004758:	d02b      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800475a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800475e:	d820      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004764:	d012      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800476a:	d81a      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d022      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004774:	d115      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	3308      	adds	r3, #8
 800477c:	2101      	movs	r1, #1
 800477e:	4618      	mov	r0, r3
 8004780:	f001 f9a6 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800478a:	e015      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004790:	3328      	adds	r3, #40	@ 0x28
 8004792:	2101      	movs	r1, #1
 8004794:	4618      	mov	r0, r3
 8004796:	f001 fa4d 	bl	8005c34 <RCCEx_PLL3_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047a0:	e00a      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047a8:	e006      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047aa:	bf00      	nop
 80047ac:	e004      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047c0:	4ba3      	ldr	r3, [pc, #652]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80047d0:	4a9f      	ldr	r2, [pc, #636]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047d2:	430b      	orrs	r3, r1
 80047d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d6:	e003      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80047ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80047f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047fa:	460b      	mov	r3, r1
 80047fc:	4313      	orrs	r3, r2
 80047fe:	d037      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800480a:	d00e      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800480c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004810:	d816      	bhi.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d018      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004816:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800481a:	d111      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800481c:	4b8c      	ldr	r3, [pc, #560]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	4a8b      	ldr	r2, [pc, #556]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004828:	e00f      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482e:	3308      	adds	r3, #8
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f001 f94c 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800483e:	e004      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004846:	e000      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800484a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004852:	4b7f      	ldr	r3, [pc, #508]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004856:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004860:	4a7b      	ldr	r2, [pc, #492]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004862:	430b      	orrs	r3, r1
 8004864:	6513      	str	r3, [r2, #80]	@ 0x50
 8004866:	e003      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800487c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004886:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d039      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004896:	2b03      	cmp	r3, #3
 8004898:	d81c      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800489a:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a0:	080048dd 	.word	0x080048dd
 80048a4:	080048b1 	.word	0x080048b1
 80048a8:	080048bf 	.word	0x080048bf
 80048ac:	080048dd 	.word	0x080048dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b0:	4b67      	ldr	r3, [pc, #412]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	4a66      	ldr	r2, [pc, #408]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048bc:	e00f      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c2:	3308      	adds	r3, #8
 80048c4:	2102      	movs	r1, #2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 f902 	bl	8005ad0 <RCCEx_PLL2_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048d2:	e004      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048da:	e000      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80048dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80048e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ea:	f023 0103 	bic.w	r1, r3, #3
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f4:	4a56      	ldr	r2, [pc, #344]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048f6:	430b      	orrs	r3, r1
 80048f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048fa:	e003      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004910:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004914:	2300      	movs	r3, #0
 8004916:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800491a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	f000 809f 	beq.w	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004926:	4b4b      	ldr	r3, [pc, #300]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a4a      	ldr	r2, [pc, #296]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800492c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004930:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004932:	f7fc fdc9 	bl	80014c8 <HAL_GetTick>
 8004936:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800493a:	e00b      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493c:	f7fc fdc4 	bl	80014c8 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b64      	cmp	r3, #100	@ 0x64
 800494a:	d903      	bls.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004952:	e005      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004954:	4b3f      	ldr	r3, [pc, #252]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ed      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004964:	2b00      	cmp	r3, #0
 8004966:	d179      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004968:	4b39      	ldr	r3, [pc, #228]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800496a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800496c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004970:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004974:	4053      	eors	r3, r2
 8004976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800497e:	4b34      	ldr	r3, [pc, #208]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004986:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800498a:	4b31      	ldr	r3, [pc, #196]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	4a30      	ldr	r2, [pc, #192]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004994:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004996:	4b2e      	ldr	r3, [pc, #184]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800499c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b6:	d118      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fc fd86 	bl	80014c8 <HAL_GetTick>
 80049bc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049c0:	e00d      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fc fd81 	bl	80014c8 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80049cc:	1ad2      	subs	r2, r2, r3
 80049ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d903      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80049dc:	e005      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049de:	4b1c      	ldr	r3, [pc, #112]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0eb      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80049ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d129      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a02:	d10e      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004a04:	4b12      	ldr	r3, [pc, #72]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a14:	091a      	lsrs	r2, r3, #4
 8004a16:	4b10      	ldr	r3, [pc, #64]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6113      	str	r3, [r2, #16]
 8004a20:	e005      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004a22:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004a2c:	6113      	str	r3, [r2, #16]
 8004a2e:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3e:	4a04      	ldr	r2, [pc, #16]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a44:	e00e      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004a4e:	e009      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004a50:	58024400 	.word	0x58024400
 8004a54:	58024800 	.word	0x58024800
 8004a58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f002 0301 	and.w	r3, r2, #1
 8004a70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f000 8089 	beq.w	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a8c:	2b28      	cmp	r3, #40	@ 0x28
 8004a8e:	d86b      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004a90:	a201      	add	r2, pc, #4	@ (adr r2, 8004a98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004b71 	.word	0x08004b71
 8004a9c:	08004b69 	.word	0x08004b69
 8004aa0:	08004b69 	.word	0x08004b69
 8004aa4:	08004b69 	.word	0x08004b69
 8004aa8:	08004b69 	.word	0x08004b69
 8004aac:	08004b69 	.word	0x08004b69
 8004ab0:	08004b69 	.word	0x08004b69
 8004ab4:	08004b69 	.word	0x08004b69
 8004ab8:	08004b3d 	.word	0x08004b3d
 8004abc:	08004b69 	.word	0x08004b69
 8004ac0:	08004b69 	.word	0x08004b69
 8004ac4:	08004b69 	.word	0x08004b69
 8004ac8:	08004b69 	.word	0x08004b69
 8004acc:	08004b69 	.word	0x08004b69
 8004ad0:	08004b69 	.word	0x08004b69
 8004ad4:	08004b69 	.word	0x08004b69
 8004ad8:	08004b53 	.word	0x08004b53
 8004adc:	08004b69 	.word	0x08004b69
 8004ae0:	08004b69 	.word	0x08004b69
 8004ae4:	08004b69 	.word	0x08004b69
 8004ae8:	08004b69 	.word	0x08004b69
 8004aec:	08004b69 	.word	0x08004b69
 8004af0:	08004b69 	.word	0x08004b69
 8004af4:	08004b69 	.word	0x08004b69
 8004af8:	08004b71 	.word	0x08004b71
 8004afc:	08004b69 	.word	0x08004b69
 8004b00:	08004b69 	.word	0x08004b69
 8004b04:	08004b69 	.word	0x08004b69
 8004b08:	08004b69 	.word	0x08004b69
 8004b0c:	08004b69 	.word	0x08004b69
 8004b10:	08004b69 	.word	0x08004b69
 8004b14:	08004b69 	.word	0x08004b69
 8004b18:	08004b71 	.word	0x08004b71
 8004b1c:	08004b69 	.word	0x08004b69
 8004b20:	08004b69 	.word	0x08004b69
 8004b24:	08004b69 	.word	0x08004b69
 8004b28:	08004b69 	.word	0x08004b69
 8004b2c:	08004b69 	.word	0x08004b69
 8004b30:	08004b69 	.word	0x08004b69
 8004b34:	08004b69 	.word	0x08004b69
 8004b38:	08004b71 	.word	0x08004b71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b40:	3308      	adds	r3, #8
 8004b42:	2101      	movs	r1, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 ffc3 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b50:	e00f      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	3328      	adds	r3, #40	@ 0x28
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 f86a 	bl	8005c34 <RCCEx_PLL3_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b66:	e004      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b6e:	e000      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b7a:	4bbf      	ldr	r3, [pc, #764]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b88:	4abb      	ldr	r2, [pc, #748]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b8e:	e003      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f002 0302 	and.w	r3, r2, #2
 8004ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004bae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	d041      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d824      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004c15 	.word	0x08004c15
 8004bcc:	08004be1 	.word	0x08004be1
 8004bd0:	08004bf7 	.word	0x08004bf7
 8004bd4:	08004c15 	.word	0x08004c15
 8004bd8:	08004c15 	.word	0x08004c15
 8004bdc:	08004c15 	.word	0x08004c15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	3308      	adds	r3, #8
 8004be6:	2101      	movs	r1, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 ff71 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004bf4:	e00f      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	3328      	adds	r3, #40	@ 0x28
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 f818 	bl	8005c34 <RCCEx_PLL3_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c0a:	e004      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c12:	e000      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c1e:	4b96      	ldr	r3, [pc, #600]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c22:	f023 0107 	bic.w	r1, r3, #7
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c2c:	4a92      	ldr	r2, [pc, #584]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c32:	e003      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f002 0304 	and.w	r3, r2, #4
 8004c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	d044      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c64:	2b05      	cmp	r3, #5
 8004c66:	d825      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004c68:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004cbd 	.word	0x08004cbd
 8004c74:	08004c89 	.word	0x08004c89
 8004c78:	08004c9f 	.word	0x08004c9f
 8004c7c:	08004cbd 	.word	0x08004cbd
 8004c80:	08004cbd 	.word	0x08004cbd
 8004c84:	08004cbd 	.word	0x08004cbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	2101      	movs	r1, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 ff1d 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c9c:	e00f      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	3328      	adds	r3, #40	@ 0x28
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 ffc4 	bl	8005c34 <RCCEx_PLL3_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004cb2:	e004      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cc6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cca:	f023 0107 	bic.w	r1, r3, #7
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd6:	4a68      	ldr	r2, [pc, #416]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cdc:	e003      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f002 0320 	and.w	r3, r2, #32
 8004cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d00:	460b      	mov	r3, r1
 8004d02:	4313      	orrs	r3, r2
 8004d04:	d055      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d12:	d033      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d18:	d82c      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1e:	d02f      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d24:	d826      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d2a:	d02b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004d2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d30:	d820      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d36:	d012      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d3c:	d81a      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d022      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d46:	d115      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 febd 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d5c:	e015      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	3328      	adds	r3, #40	@ 0x28
 8004d64:	2102      	movs	r1, #2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 ff64 	bl	8005c34 <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d72:	e00a      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d7a:	e006      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e004      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d80:	bf00      	nop
 8004d82:	e002      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d84:	bf00      	nop
 8004d86:	e000      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10b      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d92:	4b39      	ldr	r3, [pc, #228]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da2:	4a35      	ldr	r2, [pc, #212]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004da4:	430b      	orrs	r3, r1
 8004da6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004da8:	e003      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004dc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d058      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004dde:	d033      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004de0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004de4:	d82c      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dea:	d02f      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df0:	d826      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004df2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004df6:	d02b      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004df8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dfc:	d820      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004dfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e02:	d012      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e08:	d81a      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d022      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e12:	d115      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e18:	3308      	adds	r3, #8
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fe57 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e28:	e015      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	3328      	adds	r3, #40	@ 0x28
 8004e30:	2102      	movs	r1, #2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fefe 	bl	8005c34 <RCCEx_PLL3_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e46:	e006      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e48:	bf00      	nop
 8004e4a:	e004      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e4c:	bf00      	nop
 8004e4e:	e002      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e50:	bf00      	nop
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10e      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e5e:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e6e:	4a02      	ldr	r2, [pc, #8]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e74:	e006      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004e76:	bf00      	nop
 8004e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	d055      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004eac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004eb0:	d033      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004eb2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004eb6:	d82c      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ebc:	d02f      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ec2:	d826      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ec4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ec8:	d02b      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004eca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ece:	d820      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ed0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ed4:	d012      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004ed6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eda:	d81a      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d022      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee4:	d115      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eea:	3308      	adds	r3, #8
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fdee 	bl	8005ad0 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004efa:	e015      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f00:	3328      	adds	r3, #40	@ 0x28
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fe95 	bl	8005c34 <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f10:	e00a      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f18:	e006      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f1a:	bf00      	nop
 8004f1c:	e004      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f1e:	bf00      	nop
 8004f20:	e002      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f30:	4ba1      	ldr	r3, [pc, #644]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f34:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f40:	4a9d      	ldr	r2, [pc, #628]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f46:	e003      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f002 0308 	and.w	r3, r2, #8
 8004f5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f60:	2300      	movs	r3, #0
 8004f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	d01e      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f82:	3328      	adds	r3, #40	@ 0x28
 8004f84:	2102      	movs	r1, #2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fe54 	bl	8005c34 <RCCEx_PLL3_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f98:	4b87      	ldr	r3, [pc, #540]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa8:	4a83      	ldr	r2, [pc, #524]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004faa:	430b      	orrs	r3, r1
 8004fac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	f002 0310 	and.w	r3, r2, #16
 8004fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004fc4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	d01e      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fda:	d10c      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe0:	3328      	adds	r3, #40	@ 0x28
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fe25 	bl	8005c34 <RCCEx_PLL3_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ff6:	4b70      	ldr	r3, [pc, #448]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005006:	4a6c      	ldr	r2, [pc, #432]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005008:	430b      	orrs	r3, r1
 800500a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005018:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005022:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005026:	460b      	mov	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	d03e      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800502c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005030:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005038:	d022      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800503a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800503e:	d81b      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005048:	d00b      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800504a:	e015      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800504c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005050:	3308      	adds	r3, #8
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fd3b 	bl	8005ad0 <RCCEx_PLL2_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005060:	e00f      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005066:	3328      	adds	r3, #40	@ 0x28
 8005068:	2102      	movs	r1, #2
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fde2 	bl	8005c34 <RCCEx_PLL3_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005076:	e004      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800508a:	4b4b      	ldr	r3, [pc, #300]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800509a:	4a47      	ldr	r2, [pc, #284]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800509c:	430b      	orrs	r3, r1
 800509e:	6593      	str	r3, [r2, #88]	@ 0x58
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80050b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050b8:	2300      	movs	r3, #0
 80050ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80050c0:	460b      	mov	r3, r1
 80050c2:	4313      	orrs	r3, r2
 80050c4:	d03b      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050d2:	d01f      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80050d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050d8:	d818      	bhi.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80050da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050de:	d003      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80050e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050e4:	d007      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80050e6:	e011      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e8:	4b33      	ldr	r3, [pc, #204]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	4a32      	ldr	r2, [pc, #200]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80050f4:	e00f      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fa:	3328      	adds	r3, #40	@ 0x28
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fd98 	bl	8005c34 <RCCEx_PLL3_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800510a:	e004      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005112:	e000      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800511e:	4b26      	ldr	r3, [pc, #152]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005122:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	4a22      	ldr	r2, [pc, #136]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005130:	430b      	orrs	r3, r1
 8005132:	6553      	str	r3, [r2, #84]	@ 0x54
 8005134:	e003      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800513a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800514a:	673b      	str	r3, [r7, #112]	@ 0x70
 800514c:	2300      	movs	r3, #0
 800514e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005150:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005154:	460b      	mov	r3, r1
 8005156:	4313      	orrs	r3, r2
 8005158:	d034      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005168:	d007      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800516a:	e011      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516c:	4b12      	ldr	r3, [pc, #72]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	4a11      	ldr	r2, [pc, #68]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005178:	e00e      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517e:	3308      	adds	r3, #8
 8005180:	2102      	movs	r1, #2
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fca4 	bl	8005ad0 <RCCEx_PLL2_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800518e:	e003      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10d      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051a0:	4b05      	ldr	r3, [pc, #20]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ae:	4a02      	ldr	r2, [pc, #8]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051b0:	430b      	orrs	r3, r1
 80051b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051b4:	e006      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80051b6:	bf00      	nop
 80051b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80051d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051d2:	2300      	movs	r3, #0
 80051d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80051da:	460b      	mov	r3, r1
 80051dc:	4313      	orrs	r3, r2
 80051de:	d00c      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e4:	3328      	adds	r3, #40	@ 0x28
 80051e6:	2102      	movs	r1, #2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fd23 	bl	8005c34 <RCCEx_PLL3_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005206:	663b      	str	r3, [r7, #96]	@ 0x60
 8005208:	2300      	movs	r3, #0
 800520a:	667b      	str	r3, [r7, #100]	@ 0x64
 800520c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005210:	460b      	mov	r3, r1
 8005212:	4313      	orrs	r3, r2
 8005214:	d038      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800521e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005222:	d018      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005228:	d811      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800522a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800522e:	d014      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005234:	d80b      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d011      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800523a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800523e:	d106      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005240:	4bc3      	ldr	r3, [pc, #780]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	4ac2      	ldr	r2, [pc, #776]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800524a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800524c:	e008      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005254:	e004      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800525e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005268:	4bb9      	ldr	r3, [pc, #740]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800526a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005278:	4ab5      	ldr	r2, [pc, #724]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800527a:	430b      	orrs	r3, r1
 800527c:	6553      	str	r3, [r2, #84]	@ 0x54
 800527e:	e003      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005294:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005296:	2300      	movs	r3, #0
 8005298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800529a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800529e:	460b      	mov	r3, r1
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d009      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052a4:	4baa      	ldr	r3, [pc, #680]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80052ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b2:	4aa7      	ldr	r2, [pc, #668]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80052c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80052c6:	2300      	movs	r3, #0
 80052c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80052ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80052ce:	460b      	mov	r3, r1
 80052d0:	4313      	orrs	r3, r2
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80052d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80052dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80052e4:	4a9a      	ldr	r2, [pc, #616]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052e6:	430b      	orrs	r3, r1
 80052e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f8:	2300      	movs	r3, #0
 80052fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005300:	460b      	mov	r3, r1
 8005302:	4313      	orrs	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005306:	4b92      	ldr	r3, [pc, #584]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005314:	4a8e      	ldr	r2, [pc, #568]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005316:	430b      	orrs	r3, r1
 8005318:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800531a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005326:	643b      	str	r3, [r7, #64]	@ 0x40
 8005328:	2300      	movs	r3, #0
 800532a:	647b      	str	r3, [r7, #68]	@ 0x44
 800532c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005330:	460b      	mov	r3, r1
 8005332:	4313      	orrs	r3, r2
 8005334:	d00e      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005336:	4b86      	ldr	r3, [pc, #536]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	4a85      	ldr	r2, [pc, #532]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800533c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005340:	6113      	str	r3, [r2, #16]
 8005342:	4b83      	ldr	r3, [pc, #524]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005344:	6919      	ldr	r1, [r3, #16]
 8005346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800534e:	4a80      	ldr	r2, [pc, #512]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005350:	430b      	orrs	r3, r1
 8005352:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005360:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005362:	2300      	movs	r3, #0
 8005364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005366:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005370:	4b77      	ldr	r3, [pc, #476]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005374:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537e:	4a74      	ldr	r2, [pc, #464]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005380:	430b      	orrs	r3, r1
 8005382:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005390:	633b      	str	r3, [r7, #48]	@ 0x30
 8005392:	2300      	movs	r3, #0
 8005394:	637b      	str	r3, [r7, #52]	@ 0x34
 8005396:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800539a:	460b      	mov	r3, r1
 800539c:	4313      	orrs	r3, r2
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053b0:	4a67      	ldr	r2, [pc, #412]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053b2:	430b      	orrs	r3, r1
 80053b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	2100      	movs	r1, #0
 80053c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80053cc:	460b      	mov	r3, r1
 80053ce:	4313      	orrs	r3, r2
 80053d0:	d011      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d6:	3308      	adds	r3, #8
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fb78 	bl	8005ad0 <RCCEx_PLL2_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80053e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	2100      	movs	r1, #0
 8005400:	6239      	str	r1, [r7, #32]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
 8005408:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800540c:	460b      	mov	r3, r1
 800540e:	4313      	orrs	r3, r2
 8005410:	d011      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	3308      	adds	r3, #8
 8005418:	2101      	movs	r1, #1
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fb58 	bl	8005ad0 <RCCEx_PLL2_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	2100      	movs	r1, #0
 8005440:	61b9      	str	r1, [r7, #24]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800544c:	460b      	mov	r3, r1
 800544e:	4313      	orrs	r3, r2
 8005450:	d011      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	3308      	adds	r3, #8
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fb38 	bl	8005ad0 <RCCEx_PLL2_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	2100      	movs	r1, #0
 8005480:	6139      	str	r1, [r7, #16]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800548c:	460b      	mov	r3, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	d011      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005496:	3328      	adds	r3, #40	@ 0x28
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fbca 	bl	8005c34 <RCCEx_PLL3_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80054a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	2100      	movs	r1, #0
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054cc:	460b      	mov	r3, r1
 80054ce:	4313      	orrs	r3, r2
 80054d0:	d011      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	3328      	adds	r3, #40	@ 0x28
 80054d8:	2101      	movs	r1, #1
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fbaa 	bl	8005c34 <RCCEx_PLL3_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80054e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80054f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	2100      	movs	r1, #0
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	e9d7 1200 	ldrd	r1, r2, [r7]
 800550c:	460b      	mov	r3, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	d011      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	3328      	adds	r3, #40	@ 0x28
 8005518:	2102      	movs	r1, #2
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fb8a 	bl	8005c34 <RCCEx_PLL3_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005536:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
}
 8005544:	4618      	mov	r0, r3
 8005546:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800554a:	46bd      	mov	sp, r7
 800554c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005550:	58024400 	.word	0x58024400

08005554 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005558:	f7fe fd96 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 800555c:	4602      	mov	r2, r0
 800555e:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	4904      	ldr	r1, [pc, #16]	@ (800557c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800556a:	5ccb      	ldrb	r3, [r1, r3]
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005574:	4618      	mov	r0, r3
 8005576:	bd80      	pop	{r7, pc}
 8005578:	58024400 	.word	0x58024400
 800557c:	08009930 	.word	0x08009930

08005580 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005580:	b480      	push	{r7}
 8005582:	b089      	sub	sp, #36	@ 0x24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005588:	4ba1      	ldr	r3, [pc, #644]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800558a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005592:	4b9f      	ldr	r3, [pc, #636]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005596:	0b1b      	lsrs	r3, r3, #12
 8005598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800559c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800559e:	4b9c      	ldr	r3, [pc, #624]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80055aa:	4b99      	ldr	r3, [pc, #612]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ae:	08db      	lsrs	r3, r3, #3
 80055b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8111 	beq.w	80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	f000 8083 	beq.w	80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	f200 80a1 	bhi.w	8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d056      	beq.n	8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80055ea:	e099      	b.n	8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ec:	4b88      	ldr	r3, [pc, #544]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d02d      	beq.n	8005654 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055f8:	4b85      	ldr	r3, [pc, #532]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	08db      	lsrs	r3, r3, #3
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	4a84      	ldr	r2, [pc, #528]	@ (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005622:	4b7b      	ldr	r3, [pc, #492]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005632:	ed97 6a03 	vldr	s12, [r7, #12]
 8005636:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800563a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005652:	e087      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800581c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005666:	4b6a      	ldr	r3, [pc, #424]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005676:	ed97 6a03 	vldr	s12, [r7, #12]
 800567a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800567e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800568a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005696:	e065      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056aa:	4b59      	ldr	r3, [pc, #356]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80056be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056da:	e043      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80056ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ee:	4b48      	ldr	r3, [pc, #288]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005702:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800571e:	e021      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800572e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005732:	4b37      	ldr	r3, [pc, #220]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005742:	ed97 6a03 	vldr	s12, [r7, #12]
 8005746:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800574a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005762:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005764:	4b2a      	ldr	r3, [pc, #168]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005768:	0a5b      	lsrs	r3, r3, #9
 800576a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800577a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800577e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800578a:	ee17 2a90 	vmov	r2, s15
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005792:	4b1f      	ldr	r3, [pc, #124]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005796:	0c1b      	lsrs	r3, r3, #16
 8005798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b8:	ee17 2a90 	vmov	r2, s15
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80057c0:	4b13      	ldr	r3, [pc, #76]	@ (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c4:	0e1b      	lsrs	r3, r3, #24
 80057c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057da:	edd7 6a07 	vldr	s13, [r7, #28]
 80057de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e6:	ee17 2a90 	vmov	r2, s15
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80057ee:	e008      	b.n	8005802 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	609a      	str	r2, [r3, #8]
}
 8005802:	bf00      	nop
 8005804:	3724      	adds	r7, #36	@ 0x24
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	58024400 	.word	0x58024400
 8005814:	03d09000 	.word	0x03d09000
 8005818:	46000000 	.word	0x46000000
 800581c:	4c742400 	.word	0x4c742400
 8005820:	4a742400 	.word	0x4a742400
 8005824:	4af42400 	.word	0x4af42400

08005828 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005828:	b480      	push	{r7}
 800582a:	b089      	sub	sp, #36	@ 0x24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005830:	4ba1      	ldr	r3, [pc, #644]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800583a:	4b9f      	ldr	r3, [pc, #636]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	0d1b      	lsrs	r3, r3, #20
 8005840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005844:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005846:	4b9c      	ldr	r3, [pc, #624]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005852:	4b99      	ldr	r3, [pc, #612]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005856:	08db      	lsrs	r3, r3, #3
 8005858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8111 	beq.w	8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b02      	cmp	r3, #2
 800587a:	f000 8083 	beq.w	8005984 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b02      	cmp	r3, #2
 8005882:	f200 80a1 	bhi.w	80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d056      	beq.n	8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005892:	e099      	b.n	80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005894:	4b88      	ldr	r3, [pc, #544]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d02d      	beq.n	80058fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058a0:	4b85      	ldr	r3, [pc, #532]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	08db      	lsrs	r3, r3, #3
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	4a84      	ldr	r2, [pc, #528]	@ (8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80058ac:	fa22 f303 	lsr.w	r3, r2, r3
 80058b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ca:	4b7b      	ldr	r3, [pc, #492]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058da:	ed97 6a03 	vldr	s12, [r7, #12]
 80058de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80058fa:	e087      	b.n	8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800590a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005922:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800593e:	e065      	b.n	8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005952:	4b59      	ldr	r3, [pc, #356]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005962:	ed97 6a03 	vldr	s12, [r7, #12]
 8005966:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005982:	e043      	b.n	8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005996:	4b48      	ldr	r3, [pc, #288]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059c6:	e021      	b.n	8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059da:	4b37      	ldr	r3, [pc, #220]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	0a5b      	lsrs	r3, r3, #9
 8005a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a32:	ee17 2a90 	vmov	r2, s15
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3e:	0c1b      	lsrs	r3, r3, #16
 8005a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a44:	ee07 3a90 	vmov	s15, r3
 8005a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a60:	ee17 2a90 	vmov	r2, s15
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005a68:	4b13      	ldr	r3, [pc, #76]	@ (8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	0e1b      	lsrs	r3, r3, #24
 8005a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8e:	ee17 2a90 	vmov	r2, s15
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a96:	e008      	b.n	8005aaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	609a      	str	r2, [r3, #8]
}
 8005aaa:	bf00      	nop
 8005aac:	3724      	adds	r7, #36	@ 0x24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	03d09000 	.word	0x03d09000
 8005ac0:	46000000 	.word	0x46000000
 8005ac4:	4c742400 	.word	0x4c742400
 8005ac8:	4a742400 	.word	0x4a742400
 8005acc:	4af42400 	.word	0x4af42400

08005ad0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ade:	4b53      	ldr	r3, [pc, #332]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d101      	bne.n	8005aee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e099      	b.n	8005c22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005aee:	4b4f      	ldr	r3, [pc, #316]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a4e      	ldr	r2, [pc, #312]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005af4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afa:	f7fb fce5 	bl	80014c8 <HAL_GetTick>
 8005afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b00:	e008      	b.n	8005b14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b02:	f7fb fce1 	bl	80014c8 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e086      	b.n	8005c22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b14:	4b45      	ldr	r3, [pc, #276]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f0      	bne.n	8005b02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b20:	4b42      	ldr	r3, [pc, #264]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	031b      	lsls	r3, r3, #12
 8005b2e:	493f      	ldr	r1, [pc, #252]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	025b      	lsls	r3, r3, #9
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	041b      	lsls	r3, r3, #16
 8005b52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	061b      	lsls	r3, r3, #24
 8005b60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b64:	4931      	ldr	r1, [pc, #196]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b6a:	4b30      	ldr	r3, [pc, #192]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	492d      	ldr	r1, [pc, #180]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	f023 0220 	bic.w	r2, r3, #32
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	4928      	ldr	r1, [pc, #160]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b8e:	4b27      	ldr	r3, [pc, #156]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b92:	4a26      	ldr	r2, [pc, #152]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b94:	f023 0310 	bic.w	r3, r3, #16
 8005b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b9a:	4b24      	ldr	r3, [pc, #144]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b9e:	4b24      	ldr	r3, [pc, #144]	@ (8005c30 <RCCEx_PLL2_Config+0x160>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	69d2      	ldr	r2, [r2, #28]
 8005ba6:	00d2      	lsls	r2, r2, #3
 8005ba8:	4920      	ldr	r1, [pc, #128]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bae:	4b1f      	ldr	r3, [pc, #124]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005bb4:	f043 0310 	orr.w	r3, r3, #16
 8005bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	4a19      	ldr	r2, [pc, #100]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005bc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bcc:	e00f      	b.n	8005bee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d106      	bne.n	8005be2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005bd4:	4b15      	ldr	r3, [pc, #84]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	4a14      	ldr	r2, [pc, #80]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005be0:	e005      	b.n	8005bee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005be2:	4b12      	ldr	r3, [pc, #72]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	4a11      	ldr	r2, [pc, #68]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005be8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005bee:	4b0f      	ldr	r3, [pc, #60]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005bf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bfa:	f7fb fc65 	bl	80014c8 <HAL_GetTick>
 8005bfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c00:	e008      	b.n	8005c14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c02:	f7fb fc61 	bl	80014c8 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e006      	b.n	8005c22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c14:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <RCCEx_PLL2_Config+0x15c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	58024400 	.word	0x58024400
 8005c30:	ffff0007 	.word	0xffff0007

08005c34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c42:	4b53      	ldr	r3, [pc, #332]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d101      	bne.n	8005c52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e099      	b.n	8005d86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c52:	4b4f      	ldr	r3, [pc, #316]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a4e      	ldr	r2, [pc, #312]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c5e:	f7fb fc33 	bl	80014c8 <HAL_GetTick>
 8005c62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c64:	e008      	b.n	8005c78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c66:	f7fb fc2f 	bl	80014c8 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e086      	b.n	8005d86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c78:	4b45      	ldr	r3, [pc, #276]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f0      	bne.n	8005c66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c84:	4b42      	ldr	r3, [pc, #264]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	051b      	lsls	r3, r3, #20
 8005c92:	493f      	ldr	r1, [pc, #252]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	025b      	lsls	r3, r3, #9
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	041b      	lsls	r3, r3, #16
 8005cb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	061b      	lsls	r3, r3, #24
 8005cc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005cc8:	4931      	ldr	r1, [pc, #196]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005cce:	4b30      	ldr	r3, [pc, #192]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	492d      	ldr	r1, [pc, #180]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	4928      	ldr	r1, [pc, #160]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005cf2:	4b27      	ldr	r3, [pc, #156]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	4a26      	ldr	r2, [pc, #152]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005cfe:	4b24      	ldr	r3, [pc, #144]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d02:	4b24      	ldr	r3, [pc, #144]	@ (8005d94 <RCCEx_PLL3_Config+0x160>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	69d2      	ldr	r2, [r2, #28]
 8005d0a:	00d2      	lsls	r2, r2, #3
 8005d0c:	4920      	ldr	r1, [pc, #128]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d12:	4b1f      	ldr	r3, [pc, #124]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	4a1e      	ldr	r2, [pc, #120]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d24:	4b1a      	ldr	r3, [pc, #104]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	4a19      	ldr	r2, [pc, #100]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d30:	e00f      	b.n	8005d52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d106      	bne.n	8005d46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d38:	4b15      	ldr	r3, [pc, #84]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3c:	4a14      	ldr	r2, [pc, #80]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d44:	e005      	b.n	8005d52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d46:	4b12      	ldr	r3, [pc, #72]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	4a11      	ldr	r2, [pc, #68]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d52:	4b0f      	ldr	r3, [pc, #60]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a0e      	ldr	r2, [pc, #56]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d5e:	f7fb fbb3 	bl	80014c8 <HAL_GetTick>
 8005d62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d64:	e008      	b.n	8005d78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d66:	f7fb fbaf 	bl	80014c8 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e006      	b.n	8005d86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d78:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <RCCEx_PLL3_Config+0x15c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f0      	beq.n	8005d66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	58024400 	.word	0x58024400
 8005d94:	ffff0007 	.word	0xffff0007

08005d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e042      	b.n	8005e30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7fb f8e5 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2224      	movs	r2, #36	@ 0x24
 8005dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 fa4a 	bl	800727c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fcdf 	bl	80067ac <UART_SetConfig>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e01b      	b.n	8005e30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 fac9 	bl	80073c0 <UART_CheckIdleState>
 8005e2e:	4603      	mov	r3, r0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b091      	sub	sp, #68	@ 0x44
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d178      	bne.n	8005f42 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <HAL_UART_Transmit_IT+0x24>
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e071      	b.n	8005f44 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	88fa      	ldrh	r2, [r7, #6]
 8005e6a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	88fa      	ldrh	r2, [r7, #6]
 8005e72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2221      	movs	r2, #33	@ 0x21
 8005e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e94:	d12a      	bne.n	8005eec <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e9e:	d107      	bne.n	8005eb0 <HAL_UART_Transmit_IT+0x78>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4a29      	ldr	r2, [pc, #164]	@ (8005f50 <HAL_UART_Transmit_IT+0x118>)
 8005eac:	679a      	str	r2, [r3, #120]	@ 0x78
 8005eae:	e002      	b.n	8005eb6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4a28      	ldr	r2, [pc, #160]	@ (8005f54 <HAL_UART_Transmit_IT+0x11c>)
 8005eb4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ed6:	637a      	str	r2, [r7, #52]	@ 0x34
 8005ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005edc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e5      	bne.n	8005eb6 <HAL_UART_Transmit_IT+0x7e>
 8005eea:	e028      	b.n	8005f3e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef4:	d107      	bne.n	8005f06 <HAL_UART_Transmit_IT+0xce>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <HAL_UART_Transmit_IT+0x120>)
 8005f02:	679a      	str	r2, [r3, #120]	@ 0x78
 8005f04:	e002      	b.n	8005f0c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a14      	ldr	r2, [pc, #80]	@ (8005f5c <HAL_UART_Transmit_IT+0x124>)
 8005f0a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	613b      	str	r3, [r7, #16]
   return(result);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	69f9      	ldr	r1, [r7, #28]
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e6      	bne.n	8005f0c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3744      	adds	r7, #68	@ 0x44
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	08007b87 	.word	0x08007b87
 8005f54:	08007aa7 	.word	0x08007aa7
 8005f58:	080079e5 	.word	0x080079e5
 8005f5c:	0800792d 	.word	0x0800792d

08005f60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	@ 0x28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d137      	bne.n	8005fe8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_UART_Receive_IT+0x24>
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e030      	b.n	8005fea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a18      	ldr	r2, [pc, #96]	@ (8005ff4 <HAL_UART_Receive_IT+0x94>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d01f      	beq.n	8005fd8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d018      	beq.n	8005fd8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	623b      	str	r3, [r7, #32]
 8005fc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	69f9      	ldr	r1, [r7, #28]
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e6      	bne.n	8005fa6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fd8:	88fb      	ldrh	r3, [r7, #6]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f001 fb06 	bl	80075f0 <UART_Start_Receive_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	e000      	b.n	8005fea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3728      	adds	r7, #40	@ 0x28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	58000c00 	.word	0x58000c00

08005ff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b0ba      	sub	sp, #232	@ 0xe8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800601e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006022:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006026:	4013      	ands	r3, r2
 8006028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800602c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d11b      	bne.n	800606c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d015      	beq.n	800606c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800604c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8377 	beq.w	8006750 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
      }
      return;
 800606a:	e371      	b.n	8006750 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800606c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8123 	beq.w	80062bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006076:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800607a:	4b8d      	ldr	r3, [pc, #564]	@ (80062b0 <HAL_UART_IRQHandler+0x2b8>)
 800607c:	4013      	ands	r3, r2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006086:	4b8b      	ldr	r3, [pc, #556]	@ (80062b4 <HAL_UART_IRQHandler+0x2bc>)
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8116 	beq.w	80062bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d011      	beq.n	80060c0 <HAL_UART_IRQHandler+0xc8>
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b6:	f043 0201 	orr.w	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d011      	beq.n	80060f0 <HAL_UART_IRQHandler+0xf8>
 80060cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00b      	beq.n	80060f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2202      	movs	r2, #2
 80060de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	f043 0204 	orr.w	r2, r3, #4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d011      	beq.n	8006120 <HAL_UART_IRQHandler+0x128>
 80060fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2204      	movs	r2, #4
 800610e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006116:	f043 0202 	orr.w	r2, r3, #2
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d017      	beq.n	800615c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d105      	bne.n	8006144 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006138:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800613c:	4b5c      	ldr	r3, [pc, #368]	@ (80062b0 <HAL_UART_IRQHandler+0x2b8>)
 800613e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2208      	movs	r2, #8
 800614a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006152:	f043 0208 	orr.w	r2, r3, #8
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006164:	2b00      	cmp	r3, #0
 8006166:	d012      	beq.n	800618e <HAL_UART_IRQHandler+0x196>
 8006168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800616c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00c      	beq.n	800618e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800617c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006184:	f043 0220 	orr.w	r2, r3, #32
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 82dd 	beq.w	8006754 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d013      	beq.n	80061ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d105      	bne.n	80061be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e2:	2b40      	cmp	r3, #64	@ 0x40
 80061e4:	d005      	beq.n	80061f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d054      	beq.n	800629c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 fb1e 	bl	8007834 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006202:	2b40      	cmp	r3, #64	@ 0x40
 8006204:	d146      	bne.n	8006294 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800621c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800623e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800624a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1d9      	bne.n	8006206 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006258:	2b00      	cmp	r3, #0
 800625a:	d017      	beq.n	800628c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006262:	4a15      	ldr	r2, [pc, #84]	@ (80062b8 <HAL_UART_IRQHandler+0x2c0>)
 8006264:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800626c:	4618      	mov	r0, r3
 800626e:	f7fb fda9 	bl	8001dc4 <HAL_DMA_Abort_IT>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d019      	beq.n	80062ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800627e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006286:	4610      	mov	r0, r2
 8006288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628a:	e00f      	b.n	80062ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fa77 	bl	8006780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006292:	e00b      	b.n	80062ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fa73 	bl	8006780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629a:	e007      	b.n	80062ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fa6f 	bl	8006780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80062aa:	e253      	b.n	8006754 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ac:	bf00      	nop
    return;
 80062ae:	e251      	b.n	8006754 <HAL_UART_IRQHandler+0x75c>
 80062b0:	10000001 	.word	0x10000001
 80062b4:	04000120 	.word	0x04000120
 80062b8:	08007901 	.word	0x08007901

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	f040 81e7 	bne.w	8006694 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 81e0 	beq.w	8006694 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 81d9 	beq.w	8006694 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2210      	movs	r2, #16
 80062e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	f040 8151 	bne.w	800659c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a96      	ldr	r2, [pc, #600]	@ (800655c <HAL_UART_IRQHandler+0x564>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d068      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a93      	ldr	r2, [pc, #588]	@ (8006560 <HAL_UART_IRQHandler+0x568>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d061      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a91      	ldr	r2, [pc, #580]	@ (8006564 <HAL_UART_IRQHandler+0x56c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d05a      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a8e      	ldr	r2, [pc, #568]	@ (8006568 <HAL_UART_IRQHandler+0x570>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d053      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a8c      	ldr	r2, [pc, #560]	@ (800656c <HAL_UART_IRQHandler+0x574>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d04c      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a89      	ldr	r2, [pc, #548]	@ (8006570 <HAL_UART_IRQHandler+0x578>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d045      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a87      	ldr	r2, [pc, #540]	@ (8006574 <HAL_UART_IRQHandler+0x57c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d03e      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a84      	ldr	r2, [pc, #528]	@ (8006578 <HAL_UART_IRQHandler+0x580>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d037      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a82      	ldr	r2, [pc, #520]	@ (800657c <HAL_UART_IRQHandler+0x584>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d030      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a7f      	ldr	r2, [pc, #508]	@ (8006580 <HAL_UART_IRQHandler+0x588>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d029      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a7d      	ldr	r2, [pc, #500]	@ (8006584 <HAL_UART_IRQHandler+0x58c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d022      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a7a      	ldr	r2, [pc, #488]	@ (8006588 <HAL_UART_IRQHandler+0x590>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01b      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a78      	ldr	r2, [pc, #480]	@ (800658c <HAL_UART_IRQHandler+0x594>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d014      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a75      	ldr	r2, [pc, #468]	@ (8006590 <HAL_UART_IRQHandler+0x598>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00d      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a73      	ldr	r2, [pc, #460]	@ (8006594 <HAL_UART_IRQHandler+0x59c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d006      	beq.n	80063da <HAL_UART_IRQHandler+0x3e2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a70      	ldr	r2, [pc, #448]	@ (8006598 <HAL_UART_IRQHandler+0x5a0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d106      	bne.n	80063e8 <HAL_UART_IRQHandler+0x3f0>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	e005      	b.n	80063f4 <HAL_UART_IRQHandler+0x3fc>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 81ab 	beq.w	8006758 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800640c:	429a      	cmp	r2, r3
 800640e:	f080 81a3 	bcs.w	8006758 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006418:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006428:	f000 8087 	beq.w	800653a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800645a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006462:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800646e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1da      	bne.n	800642c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3308      	adds	r3, #8
 8006496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800649a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800649e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e1      	bne.n	8006476 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e3      	bne.n	80064b2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006508:	f023 0310 	bic.w	r3, r3, #16
 800650c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800651a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800651c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e4      	bne.n	80064f8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006534:	4618      	mov	r0, r3
 8006536:	f7fb f927 	bl	8001788 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800654c:	b29b      	uxth	r3, r3
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	b29b      	uxth	r3, r3
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f91d 	bl	8006794 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800655a:	e0fd      	b.n	8006758 <HAL_UART_IRQHandler+0x760>
 800655c:	40020010 	.word	0x40020010
 8006560:	40020028 	.word	0x40020028
 8006564:	40020040 	.word	0x40020040
 8006568:	40020058 	.word	0x40020058
 800656c:	40020070 	.word	0x40020070
 8006570:	40020088 	.word	0x40020088
 8006574:	400200a0 	.word	0x400200a0
 8006578:	400200b8 	.word	0x400200b8
 800657c:	40020410 	.word	0x40020410
 8006580:	40020428 	.word	0x40020428
 8006584:	40020440 	.word	0x40020440
 8006588:	40020458 	.word	0x40020458
 800658c:	40020470 	.word	0x40020470
 8006590:	40020488 	.word	0x40020488
 8006594:	400204a0 	.word	0x400204a0
 8006598:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80cf 	beq.w	800675c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80065be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80ca 	beq.w	800675c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e4      	bne.n	80065c8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3308      	adds	r3, #8
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	623b      	str	r3, [r7, #32]
   return(result);
 800660e:	6a3a      	ldr	r2, [r7, #32]
 8006610:	4b55      	ldr	r3, [pc, #340]	@ (8006768 <HAL_UART_IRQHandler+0x770>)
 8006612:	4013      	ands	r3, r2
 8006614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006622:	633a      	str	r2, [r7, #48]	@ 0x30
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e3      	bne.n	80065fe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	60fb      	str	r3, [r7, #12]
   return(result);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0310 	bic.w	r3, r3, #16
 800665e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	69b9      	ldr	r1, [r7, #24]
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	617b      	str	r3, [r7, #20]
   return(result);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e4      	bne.n	800664a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f881 	bl	8006794 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006692:	e063      	b.n	800675c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00e      	beq.n	80066be <HAL_UART_IRQHandler+0x6c6>
 80066a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80066b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f002 f822 	bl	8008700 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066bc:	e051      	b.n	8006762 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d03a      	beq.n	8006760 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
    }
    return;
 80066f2:	e035      	b.n	8006760 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <HAL_UART_IRQHandler+0x71c>
 8006700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 faaf 	bl	8007c70 <UART_EndTransmit_IT>
    return;
 8006712:	e026      	b.n	8006762 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <HAL_UART_IRQHandler+0x73c>
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006724:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fffb 	bl	8008728 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006732:	e016      	b.n	8006762 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d010      	beq.n	8006762 <HAL_UART_IRQHandler+0x76a>
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006744:	2b00      	cmp	r3, #0
 8006746:	da0c      	bge.n	8006762 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 ffe3 	bl	8008714 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800674e:	e008      	b.n	8006762 <HAL_UART_IRQHandler+0x76a>
      return;
 8006750:	bf00      	nop
 8006752:	e006      	b.n	8006762 <HAL_UART_IRQHandler+0x76a>
    return;
 8006754:	bf00      	nop
 8006756:	e004      	b.n	8006762 <HAL_UART_IRQHandler+0x76a>
      return;
 8006758:	bf00      	nop
 800675a:	e002      	b.n	8006762 <HAL_UART_IRQHandler+0x76a>
      return;
 800675c:	bf00      	nop
 800675e:	e000      	b.n	8006762 <HAL_UART_IRQHandler+0x76a>
    return;
 8006760:	bf00      	nop
  }
}
 8006762:	37e8      	adds	r7, #232	@ 0xe8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	effffffe 	.word	0xeffffffe

0800676c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b0:	b092      	sub	sp, #72	@ 0x48
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	431a      	orrs	r2, r3
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4bbe      	ldr	r3, [pc, #760]	@ (8006ad4 <UART_SetConfig+0x328>)
 80067dc:	4013      	ands	r3, r2
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067e4:	430b      	orrs	r3, r1
 80067e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4ab3      	ldr	r2, [pc, #716]	@ (8006ad8 <UART_SetConfig+0x32c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006814:	4313      	orrs	r3, r2
 8006816:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	4baf      	ldr	r3, [pc, #700]	@ (8006adc <UART_SetConfig+0x330>)
 8006820:	4013      	ands	r3, r2
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006828:	430b      	orrs	r3, r1
 800682a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006832:	f023 010f 	bic.w	r1, r3, #15
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4aa6      	ldr	r2, [pc, #664]	@ (8006ae0 <UART_SetConfig+0x334>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d177      	bne.n	800693c <UART_SetConfig+0x190>
 800684c:	4ba5      	ldr	r3, [pc, #660]	@ (8006ae4 <UART_SetConfig+0x338>)
 800684e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006850:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006854:	2b28      	cmp	r3, #40	@ 0x28
 8006856:	d86d      	bhi.n	8006934 <UART_SetConfig+0x188>
 8006858:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <UART_SetConfig+0xb4>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006905 	.word	0x08006905
 8006864:	08006935 	.word	0x08006935
 8006868:	08006935 	.word	0x08006935
 800686c:	08006935 	.word	0x08006935
 8006870:	08006935 	.word	0x08006935
 8006874:	08006935 	.word	0x08006935
 8006878:	08006935 	.word	0x08006935
 800687c:	08006935 	.word	0x08006935
 8006880:	0800690d 	.word	0x0800690d
 8006884:	08006935 	.word	0x08006935
 8006888:	08006935 	.word	0x08006935
 800688c:	08006935 	.word	0x08006935
 8006890:	08006935 	.word	0x08006935
 8006894:	08006935 	.word	0x08006935
 8006898:	08006935 	.word	0x08006935
 800689c:	08006935 	.word	0x08006935
 80068a0:	08006915 	.word	0x08006915
 80068a4:	08006935 	.word	0x08006935
 80068a8:	08006935 	.word	0x08006935
 80068ac:	08006935 	.word	0x08006935
 80068b0:	08006935 	.word	0x08006935
 80068b4:	08006935 	.word	0x08006935
 80068b8:	08006935 	.word	0x08006935
 80068bc:	08006935 	.word	0x08006935
 80068c0:	0800691d 	.word	0x0800691d
 80068c4:	08006935 	.word	0x08006935
 80068c8:	08006935 	.word	0x08006935
 80068cc:	08006935 	.word	0x08006935
 80068d0:	08006935 	.word	0x08006935
 80068d4:	08006935 	.word	0x08006935
 80068d8:	08006935 	.word	0x08006935
 80068dc:	08006935 	.word	0x08006935
 80068e0:	08006925 	.word	0x08006925
 80068e4:	08006935 	.word	0x08006935
 80068e8:	08006935 	.word	0x08006935
 80068ec:	08006935 	.word	0x08006935
 80068f0:	08006935 	.word	0x08006935
 80068f4:	08006935 	.word	0x08006935
 80068f8:	08006935 	.word	0x08006935
 80068fc:	08006935 	.word	0x08006935
 8006900:	0800692d 	.word	0x0800692d
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690a:	e222      	b.n	8006d52 <UART_SetConfig+0x5a6>
 800690c:	2304      	movs	r3, #4
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e21e      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006914:	2308      	movs	r3, #8
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e21a      	b.n	8006d52 <UART_SetConfig+0x5a6>
 800691c:	2310      	movs	r3, #16
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e216      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006924:	2320      	movs	r3, #32
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e212      	b.n	8006d52 <UART_SetConfig+0x5a6>
 800692c:	2340      	movs	r3, #64	@ 0x40
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e20e      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006934:	2380      	movs	r3, #128	@ 0x80
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e20a      	b.n	8006d52 <UART_SetConfig+0x5a6>
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a69      	ldr	r2, [pc, #420]	@ (8006ae8 <UART_SetConfig+0x33c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d130      	bne.n	80069a8 <UART_SetConfig+0x1fc>
 8006946:	4b67      	ldr	r3, [pc, #412]	@ (8006ae4 <UART_SetConfig+0x338>)
 8006948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	2b05      	cmp	r3, #5
 8006950:	d826      	bhi.n	80069a0 <UART_SetConfig+0x1f4>
 8006952:	a201      	add	r2, pc, #4	@ (adr r2, 8006958 <UART_SetConfig+0x1ac>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	08006971 	.word	0x08006971
 800695c:	08006979 	.word	0x08006979
 8006960:	08006981 	.word	0x08006981
 8006964:	08006989 	.word	0x08006989
 8006968:	08006991 	.word	0x08006991
 800696c:	08006999 	.word	0x08006999
 8006970:	2300      	movs	r3, #0
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e1ec      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006978:	2304      	movs	r3, #4
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e1e8      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006980:	2308      	movs	r3, #8
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e1e4      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006988:	2310      	movs	r3, #16
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e1e0      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006990:	2320      	movs	r3, #32
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e1dc      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006998:	2340      	movs	r3, #64	@ 0x40
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e1d8      	b.n	8006d52 <UART_SetConfig+0x5a6>
 80069a0:	2380      	movs	r3, #128	@ 0x80
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e1d4      	b.n	8006d52 <UART_SetConfig+0x5a6>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a4f      	ldr	r2, [pc, #316]	@ (8006aec <UART_SetConfig+0x340>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d130      	bne.n	8006a14 <UART_SetConfig+0x268>
 80069b2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ae4 <UART_SetConfig+0x338>)
 80069b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	d826      	bhi.n	8006a0c <UART_SetConfig+0x260>
 80069be:	a201      	add	r2, pc, #4	@ (adr r2, 80069c4 <UART_SetConfig+0x218>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	080069dd 	.word	0x080069dd
 80069c8:	080069e5 	.word	0x080069e5
 80069cc:	080069ed 	.word	0x080069ed
 80069d0:	080069f5 	.word	0x080069f5
 80069d4:	080069fd 	.word	0x080069fd
 80069d8:	08006a05 	.word	0x08006a05
 80069dc:	2300      	movs	r3, #0
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e1b6      	b.n	8006d52 <UART_SetConfig+0x5a6>
 80069e4:	2304      	movs	r3, #4
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e1b2      	b.n	8006d52 <UART_SetConfig+0x5a6>
 80069ec:	2308      	movs	r3, #8
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f2:	e1ae      	b.n	8006d52 <UART_SetConfig+0x5a6>
 80069f4:	2310      	movs	r3, #16
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fa:	e1aa      	b.n	8006d52 <UART_SetConfig+0x5a6>
 80069fc:	2320      	movs	r3, #32
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e1a6      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a04:	2340      	movs	r3, #64	@ 0x40
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e1a2      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a0c:	2380      	movs	r3, #128	@ 0x80
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e19e      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a35      	ldr	r2, [pc, #212]	@ (8006af0 <UART_SetConfig+0x344>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d130      	bne.n	8006a80 <UART_SetConfig+0x2d4>
 8006a1e:	4b31      	ldr	r3, [pc, #196]	@ (8006ae4 <UART_SetConfig+0x338>)
 8006a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	2b05      	cmp	r3, #5
 8006a28:	d826      	bhi.n	8006a78 <UART_SetConfig+0x2cc>
 8006a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <UART_SetConfig+0x284>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a49 	.word	0x08006a49
 8006a34:	08006a51 	.word	0x08006a51
 8006a38:	08006a59 	.word	0x08006a59
 8006a3c:	08006a61 	.word	0x08006a61
 8006a40:	08006a69 	.word	0x08006a69
 8006a44:	08006a71 	.word	0x08006a71
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e180      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e17c      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e178      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e174      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a68:	2320      	movs	r3, #32
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e170      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a70:	2340      	movs	r3, #64	@ 0x40
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e16c      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a78:	2380      	movs	r3, #128	@ 0x80
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7e:	e168      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1b      	ldr	r2, [pc, #108]	@ (8006af4 <UART_SetConfig+0x348>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d142      	bne.n	8006b10 <UART_SetConfig+0x364>
 8006a8a:	4b16      	ldr	r3, [pc, #88]	@ (8006ae4 <UART_SetConfig+0x338>)
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d838      	bhi.n	8006b08 <UART_SetConfig+0x35c>
 8006a96:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <UART_SetConfig+0x2f0>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006ab5 	.word	0x08006ab5
 8006aa0:	08006abd 	.word	0x08006abd
 8006aa4:	08006ac5 	.word	0x08006ac5
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006af9 	.word	0x08006af9
 8006ab0:	08006b01 	.word	0x08006b01
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e14a      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006abc:	2304      	movs	r3, #4
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac2:	e146      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006ac4:	2308      	movs	r3, #8
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aca:	e142      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006acc:	2310      	movs	r3, #16
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad2:	e13e      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006ad4:	cfff69f3 	.word	0xcfff69f3
 8006ad8:	58000c00 	.word	0x58000c00
 8006adc:	11fff4ff 	.word	0x11fff4ff
 8006ae0:	40011000 	.word	0x40011000
 8006ae4:	58024400 	.word	0x58024400
 8006ae8:	40004400 	.word	0x40004400
 8006aec:	40004800 	.word	0x40004800
 8006af0:	40004c00 	.word	0x40004c00
 8006af4:	40005000 	.word	0x40005000
 8006af8:	2320      	movs	r3, #32
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afe:	e128      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006b00:	2340      	movs	r3, #64	@ 0x40
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b06:	e124      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006b08:	2380      	movs	r3, #128	@ 0x80
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0e:	e120      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4acb      	ldr	r2, [pc, #812]	@ (8006e44 <UART_SetConfig+0x698>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d176      	bne.n	8006c08 <UART_SetConfig+0x45c>
 8006b1a:	4bcb      	ldr	r3, [pc, #812]	@ (8006e48 <UART_SetConfig+0x69c>)
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b22:	2b28      	cmp	r3, #40	@ 0x28
 8006b24:	d86c      	bhi.n	8006c00 <UART_SetConfig+0x454>
 8006b26:	a201      	add	r2, pc, #4	@ (adr r2, 8006b2c <UART_SetConfig+0x380>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006bd1 	.word	0x08006bd1
 8006b30:	08006c01 	.word	0x08006c01
 8006b34:	08006c01 	.word	0x08006c01
 8006b38:	08006c01 	.word	0x08006c01
 8006b3c:	08006c01 	.word	0x08006c01
 8006b40:	08006c01 	.word	0x08006c01
 8006b44:	08006c01 	.word	0x08006c01
 8006b48:	08006c01 	.word	0x08006c01
 8006b4c:	08006bd9 	.word	0x08006bd9
 8006b50:	08006c01 	.word	0x08006c01
 8006b54:	08006c01 	.word	0x08006c01
 8006b58:	08006c01 	.word	0x08006c01
 8006b5c:	08006c01 	.word	0x08006c01
 8006b60:	08006c01 	.word	0x08006c01
 8006b64:	08006c01 	.word	0x08006c01
 8006b68:	08006c01 	.word	0x08006c01
 8006b6c:	08006be1 	.word	0x08006be1
 8006b70:	08006c01 	.word	0x08006c01
 8006b74:	08006c01 	.word	0x08006c01
 8006b78:	08006c01 	.word	0x08006c01
 8006b7c:	08006c01 	.word	0x08006c01
 8006b80:	08006c01 	.word	0x08006c01
 8006b84:	08006c01 	.word	0x08006c01
 8006b88:	08006c01 	.word	0x08006c01
 8006b8c:	08006be9 	.word	0x08006be9
 8006b90:	08006c01 	.word	0x08006c01
 8006b94:	08006c01 	.word	0x08006c01
 8006b98:	08006c01 	.word	0x08006c01
 8006b9c:	08006c01 	.word	0x08006c01
 8006ba0:	08006c01 	.word	0x08006c01
 8006ba4:	08006c01 	.word	0x08006c01
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006bf1 	.word	0x08006bf1
 8006bb0:	08006c01 	.word	0x08006c01
 8006bb4:	08006c01 	.word	0x08006c01
 8006bb8:	08006c01 	.word	0x08006c01
 8006bbc:	08006c01 	.word	0x08006c01
 8006bc0:	08006c01 	.word	0x08006c01
 8006bc4:	08006c01 	.word	0x08006c01
 8006bc8:	08006c01 	.word	0x08006c01
 8006bcc:	08006bf9 	.word	0x08006bf9
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd6:	e0bc      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bde:	e0b8      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be6:	e0b4      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bee:	e0b0      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006bf0:	2320      	movs	r3, #32
 8006bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf6:	e0ac      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006bf8:	2340      	movs	r3, #64	@ 0x40
 8006bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfe:	e0a8      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006c00:	2380      	movs	r3, #128	@ 0x80
 8006c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c06:	e0a4      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a8f      	ldr	r2, [pc, #572]	@ (8006e4c <UART_SetConfig+0x6a0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d130      	bne.n	8006c74 <UART_SetConfig+0x4c8>
 8006c12:	4b8d      	ldr	r3, [pc, #564]	@ (8006e48 <UART_SetConfig+0x69c>)
 8006c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b05      	cmp	r3, #5
 8006c1c:	d826      	bhi.n	8006c6c <UART_SetConfig+0x4c0>
 8006c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <UART_SetConfig+0x478>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c3d 	.word	0x08006c3d
 8006c28:	08006c45 	.word	0x08006c45
 8006c2c:	08006c4d 	.word	0x08006c4d
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c5d 	.word	0x08006c5d
 8006c38:	08006c65 	.word	0x08006c65
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c42:	e086      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006c44:	2304      	movs	r3, #4
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4a:	e082      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c52:	e07e      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006c54:	2310      	movs	r3, #16
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5a:	e07a      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006c5c:	2320      	movs	r3, #32
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c62:	e076      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006c64:	2340      	movs	r3, #64	@ 0x40
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6a:	e072      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006c6c:	2380      	movs	r3, #128	@ 0x80
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c72:	e06e      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a75      	ldr	r2, [pc, #468]	@ (8006e50 <UART_SetConfig+0x6a4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d130      	bne.n	8006ce0 <UART_SetConfig+0x534>
 8006c7e:	4b72      	ldr	r3, [pc, #456]	@ (8006e48 <UART_SetConfig+0x69c>)
 8006c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d826      	bhi.n	8006cd8 <UART_SetConfig+0x52c>
 8006c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0x4e4>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006ca9 	.word	0x08006ca9
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	08006cb9 	.word	0x08006cb9
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006cc9 	.word	0x08006cc9
 8006ca4:	08006cd1 	.word	0x08006cd1
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cae:	e050      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb6:	e04c      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006cb8:	2308      	movs	r3, #8
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cbe:	e048      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc6:	e044      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006cc8:	2320      	movs	r3, #32
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cce:	e040      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006cd0:	2340      	movs	r3, #64	@ 0x40
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd6:	e03c      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006cd8:	2380      	movs	r3, #128	@ 0x80
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cde:	e038      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a5b      	ldr	r2, [pc, #364]	@ (8006e54 <UART_SetConfig+0x6a8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d130      	bne.n	8006d4c <UART_SetConfig+0x5a0>
 8006cea:	4b57      	ldr	r3, [pc, #348]	@ (8006e48 <UART_SetConfig+0x69c>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d826      	bhi.n	8006d44 <UART_SetConfig+0x598>
 8006cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <UART_SetConfig+0x550>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d15 	.word	0x08006d15
 8006d00:	08006d1d 	.word	0x08006d1d
 8006d04:	08006d25 	.word	0x08006d25
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d35 	.word	0x08006d35
 8006d10:	08006d3d 	.word	0x08006d3d
 8006d14:	2302      	movs	r3, #2
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1a:	e01a      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d22:	e016      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006d24:	2308      	movs	r3, #8
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d2a:	e012      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d32:	e00e      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006d34:	2320      	movs	r3, #32
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3a:	e00a      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006d3c:	2340      	movs	r3, #64	@ 0x40
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d42:	e006      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006d44:	2380      	movs	r3, #128	@ 0x80
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4a:	e002      	b.n	8006d52 <UART_SetConfig+0x5a6>
 8006d4c:	2380      	movs	r3, #128	@ 0x80
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a3f      	ldr	r2, [pc, #252]	@ (8006e54 <UART_SetConfig+0x6a8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	f040 80f8 	bne.w	8006f4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	dc46      	bgt.n	8006df4 <UART_SetConfig+0x648>
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	f2c0 8082 	blt.w	8006e70 <UART_SetConfig+0x6c4>
 8006d6c:	3b02      	subs	r3, #2
 8006d6e:	2b1e      	cmp	r3, #30
 8006d70:	d87e      	bhi.n	8006e70 <UART_SetConfig+0x6c4>
 8006d72:	a201      	add	r2, pc, #4	@ (adr r2, 8006d78 <UART_SetConfig+0x5cc>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006dfb 	.word	0x08006dfb
 8006d7c:	08006e71 	.word	0x08006e71
 8006d80:	08006e03 	.word	0x08006e03
 8006d84:	08006e71 	.word	0x08006e71
 8006d88:	08006e71 	.word	0x08006e71
 8006d8c:	08006e71 	.word	0x08006e71
 8006d90:	08006e13 	.word	0x08006e13
 8006d94:	08006e71 	.word	0x08006e71
 8006d98:	08006e71 	.word	0x08006e71
 8006d9c:	08006e71 	.word	0x08006e71
 8006da0:	08006e71 	.word	0x08006e71
 8006da4:	08006e71 	.word	0x08006e71
 8006da8:	08006e71 	.word	0x08006e71
 8006dac:	08006e71 	.word	0x08006e71
 8006db0:	08006e23 	.word	0x08006e23
 8006db4:	08006e71 	.word	0x08006e71
 8006db8:	08006e71 	.word	0x08006e71
 8006dbc:	08006e71 	.word	0x08006e71
 8006dc0:	08006e71 	.word	0x08006e71
 8006dc4:	08006e71 	.word	0x08006e71
 8006dc8:	08006e71 	.word	0x08006e71
 8006dcc:	08006e71 	.word	0x08006e71
 8006dd0:	08006e71 	.word	0x08006e71
 8006dd4:	08006e71 	.word	0x08006e71
 8006dd8:	08006e71 	.word	0x08006e71
 8006ddc:	08006e71 	.word	0x08006e71
 8006de0:	08006e71 	.word	0x08006e71
 8006de4:	08006e71 	.word	0x08006e71
 8006de8:	08006e71 	.word	0x08006e71
 8006dec:	08006e71 	.word	0x08006e71
 8006df0:	08006e63 	.word	0x08006e63
 8006df4:	2b40      	cmp	r3, #64	@ 0x40
 8006df6:	d037      	beq.n	8006e68 <UART_SetConfig+0x6bc>
 8006df8:	e03a      	b.n	8006e70 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006dfa:	f7fe fbab 	bl	8005554 <HAL_RCCEx_GetD3PCLK1Freq>
 8006dfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e00:	e03c      	b.n	8006e7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fbba 	bl	8005580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e10:	e034      	b.n	8006e7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e12:	f107 0318 	add.w	r3, r7, #24
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe fd06 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e20:	e02c      	b.n	8006e7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e22:	4b09      	ldr	r3, [pc, #36]	@ (8006e48 <UART_SetConfig+0x69c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d016      	beq.n	8006e5c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <UART_SetConfig+0x69c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	08db      	lsrs	r3, r3, #3
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	4a07      	ldr	r2, [pc, #28]	@ (8006e58 <UART_SetConfig+0x6ac>)
 8006e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e40:	e01c      	b.n	8006e7c <UART_SetConfig+0x6d0>
 8006e42:	bf00      	nop
 8006e44:	40011400 	.word	0x40011400
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	40007800 	.word	0x40007800
 8006e50:	40007c00 	.word	0x40007c00
 8006e54:	58000c00 	.word	0x58000c00
 8006e58:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006e5c:	4b9d      	ldr	r3, [pc, #628]	@ (80070d4 <UART_SetConfig+0x928>)
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e60:	e00c      	b.n	8006e7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e62:	4b9d      	ldr	r3, [pc, #628]	@ (80070d8 <UART_SetConfig+0x92c>)
 8006e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e66:	e009      	b.n	8006e7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e6e:	e005      	b.n	8006e7c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 81de 	beq.w	8007240 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	4a94      	ldr	r2, [pc, #592]	@ (80070dc <UART_SetConfig+0x930>)
 8006e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e96:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	4413      	add	r3, r2
 8006ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d305      	bcc.n	8006eb4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d903      	bls.n	8006ebc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006eba:	e1c1      	b.n	8007240 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	60fa      	str	r2, [r7, #12]
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	4a84      	ldr	r2, [pc, #528]	@ (80070dc <UART_SetConfig+0x930>)
 8006eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ede:	f7f9 fa57 	bl	8000390 <__aeabi_uldivmod>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	4619      	mov	r1, r3
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	020b      	lsls	r3, r1, #8
 8006ef4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ef8:	0202      	lsls	r2, r0, #8
 8006efa:	6979      	ldr	r1, [r7, #20]
 8006efc:	6849      	ldr	r1, [r1, #4]
 8006efe:	0849      	lsrs	r1, r1, #1
 8006f00:	2000      	movs	r0, #0
 8006f02:	460c      	mov	r4, r1
 8006f04:	4605      	mov	r5, r0
 8006f06:	eb12 0804 	adds.w	r8, r2, r4
 8006f0a:	eb43 0905 	adc.w	r9, r3, r5
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	469a      	mov	sl, r3
 8006f16:	4693      	mov	fp, r2
 8006f18:	4652      	mov	r2, sl
 8006f1a:	465b      	mov	r3, fp
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 fa36 	bl	8000390 <__aeabi_uldivmod>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4613      	mov	r3, r2
 8006f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f32:	d308      	bcc.n	8006f46 <UART_SetConfig+0x79a>
 8006f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f3a:	d204      	bcs.n	8006f46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f42:	60da      	str	r2, [r3, #12]
 8006f44:	e17c      	b.n	8007240 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f4c:	e178      	b.n	8007240 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f56:	f040 80c5 	bne.w	80070e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006f5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	dc48      	bgt.n	8006ff4 <UART_SetConfig+0x848>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	db7b      	blt.n	800705e <UART_SetConfig+0x8b2>
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d879      	bhi.n	800705e <UART_SetConfig+0x8b2>
 8006f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <UART_SetConfig+0x7c4>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006ffb 	.word	0x08006ffb
 8006f74:	08007003 	.word	0x08007003
 8006f78:	0800705f 	.word	0x0800705f
 8006f7c:	0800705f 	.word	0x0800705f
 8006f80:	0800700b 	.word	0x0800700b
 8006f84:	0800705f 	.word	0x0800705f
 8006f88:	0800705f 	.word	0x0800705f
 8006f8c:	0800705f 	.word	0x0800705f
 8006f90:	0800701b 	.word	0x0800701b
 8006f94:	0800705f 	.word	0x0800705f
 8006f98:	0800705f 	.word	0x0800705f
 8006f9c:	0800705f 	.word	0x0800705f
 8006fa0:	0800705f 	.word	0x0800705f
 8006fa4:	0800705f 	.word	0x0800705f
 8006fa8:	0800705f 	.word	0x0800705f
 8006fac:	0800705f 	.word	0x0800705f
 8006fb0:	0800702b 	.word	0x0800702b
 8006fb4:	0800705f 	.word	0x0800705f
 8006fb8:	0800705f 	.word	0x0800705f
 8006fbc:	0800705f 	.word	0x0800705f
 8006fc0:	0800705f 	.word	0x0800705f
 8006fc4:	0800705f 	.word	0x0800705f
 8006fc8:	0800705f 	.word	0x0800705f
 8006fcc:	0800705f 	.word	0x0800705f
 8006fd0:	0800705f 	.word	0x0800705f
 8006fd4:	0800705f 	.word	0x0800705f
 8006fd8:	0800705f 	.word	0x0800705f
 8006fdc:	0800705f 	.word	0x0800705f
 8006fe0:	0800705f 	.word	0x0800705f
 8006fe4:	0800705f 	.word	0x0800705f
 8006fe8:	0800705f 	.word	0x0800705f
 8006fec:	0800705f 	.word	0x0800705f
 8006ff0:	08007051 	.word	0x08007051
 8006ff4:	2b40      	cmp	r3, #64	@ 0x40
 8006ff6:	d02e      	beq.n	8007056 <UART_SetConfig+0x8aa>
 8006ff8:	e031      	b.n	800705e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ffa:	f7fd f875 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 8006ffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007000:	e033      	b.n	800706a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007002:	f7fd f887 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 8007006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007008:	e02f      	b.n	800706a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800700a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe fab6 	bl	8005580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007018:	e027      	b.n	800706a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800701a:	f107 0318 	add.w	r3, r7, #24
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe fc02 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007028:	e01f      	b.n	800706a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800702a:	4b2d      	ldr	r3, [pc, #180]	@ (80070e0 <UART_SetConfig+0x934>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d009      	beq.n	800704a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007036:	4b2a      	ldr	r3, [pc, #168]	@ (80070e0 <UART_SetConfig+0x934>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	08db      	lsrs	r3, r3, #3
 800703c:	f003 0303 	and.w	r3, r3, #3
 8007040:	4a24      	ldr	r2, [pc, #144]	@ (80070d4 <UART_SetConfig+0x928>)
 8007042:	fa22 f303 	lsr.w	r3, r2, r3
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007048:	e00f      	b.n	800706a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800704a:	4b22      	ldr	r3, [pc, #136]	@ (80070d4 <UART_SetConfig+0x928>)
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800704e:	e00c      	b.n	800706a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007050:	4b21      	ldr	r3, [pc, #132]	@ (80070d8 <UART_SetConfig+0x92c>)
 8007052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007054:	e009      	b.n	800706a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705c:	e005      	b.n	800706a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007068:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800706a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80e7 	beq.w	8007240 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007076:	4a19      	ldr	r2, [pc, #100]	@ (80070dc <UART_SetConfig+0x930>)
 8007078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800707c:	461a      	mov	r2, r3
 800707e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007080:	fbb3 f3f2 	udiv	r3, r3, r2
 8007084:	005a      	lsls	r2, r3, #1
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	085b      	lsrs	r3, r3, #1
 800708c:	441a      	add	r2, r3
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	fbb2 f3f3 	udiv	r3, r2, r3
 8007096:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709a:	2b0f      	cmp	r3, #15
 800709c:	d916      	bls.n	80070cc <UART_SetConfig+0x920>
 800709e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a4:	d212      	bcs.n	80070cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f023 030f 	bic.w	r3, r3, #15
 80070ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80070be:	4313      	orrs	r3, r2
 80070c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80070c8:	60da      	str	r2, [r3, #12]
 80070ca:	e0b9      	b.n	8007240 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070d2:	e0b5      	b.n	8007240 <UART_SetConfig+0xa94>
 80070d4:	03d09000 	.word	0x03d09000
 80070d8:	003d0900 	.word	0x003d0900
 80070dc:	08009940 	.word	0x08009940
 80070e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80070e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	dc49      	bgt.n	8007180 <UART_SetConfig+0x9d4>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	db7c      	blt.n	80071ea <UART_SetConfig+0xa3e>
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d87a      	bhi.n	80071ea <UART_SetConfig+0xa3e>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <UART_SetConfig+0x950>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007187 	.word	0x08007187
 8007100:	0800718f 	.word	0x0800718f
 8007104:	080071eb 	.word	0x080071eb
 8007108:	080071eb 	.word	0x080071eb
 800710c:	08007197 	.word	0x08007197
 8007110:	080071eb 	.word	0x080071eb
 8007114:	080071eb 	.word	0x080071eb
 8007118:	080071eb 	.word	0x080071eb
 800711c:	080071a7 	.word	0x080071a7
 8007120:	080071eb 	.word	0x080071eb
 8007124:	080071eb 	.word	0x080071eb
 8007128:	080071eb 	.word	0x080071eb
 800712c:	080071eb 	.word	0x080071eb
 8007130:	080071eb 	.word	0x080071eb
 8007134:	080071eb 	.word	0x080071eb
 8007138:	080071eb 	.word	0x080071eb
 800713c:	080071b7 	.word	0x080071b7
 8007140:	080071eb 	.word	0x080071eb
 8007144:	080071eb 	.word	0x080071eb
 8007148:	080071eb 	.word	0x080071eb
 800714c:	080071eb 	.word	0x080071eb
 8007150:	080071eb 	.word	0x080071eb
 8007154:	080071eb 	.word	0x080071eb
 8007158:	080071eb 	.word	0x080071eb
 800715c:	080071eb 	.word	0x080071eb
 8007160:	080071eb 	.word	0x080071eb
 8007164:	080071eb 	.word	0x080071eb
 8007168:	080071eb 	.word	0x080071eb
 800716c:	080071eb 	.word	0x080071eb
 8007170:	080071eb 	.word	0x080071eb
 8007174:	080071eb 	.word	0x080071eb
 8007178:	080071eb 	.word	0x080071eb
 800717c:	080071dd 	.word	0x080071dd
 8007180:	2b40      	cmp	r3, #64	@ 0x40
 8007182:	d02e      	beq.n	80071e2 <UART_SetConfig+0xa36>
 8007184:	e031      	b.n	80071ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007186:	f7fc ffaf 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 800718a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800718c:	e033      	b.n	80071f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800718e:	f7fc ffc1 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 8007192:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007194:	e02f      	b.n	80071f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe f9f0 	bl	8005580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a4:	e027      	b.n	80071f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a6:	f107 0318 	add.w	r3, r7, #24
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fb3c 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b4:	e01f      	b.n	80071f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071b6:	4b2d      	ldr	r3, [pc, #180]	@ (800726c <UART_SetConfig+0xac0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071c2:	4b2a      	ldr	r3, [pc, #168]	@ (800726c <UART_SetConfig+0xac0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	08db      	lsrs	r3, r3, #3
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	4a28      	ldr	r2, [pc, #160]	@ (8007270 <UART_SetConfig+0xac4>)
 80071ce:	fa22 f303 	lsr.w	r3, r2, r3
 80071d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071d4:	e00f      	b.n	80071f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80071d6:	4b26      	ldr	r3, [pc, #152]	@ (8007270 <UART_SetConfig+0xac4>)
 80071d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071da:	e00c      	b.n	80071f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071dc:	4b25      	ldr	r3, [pc, #148]	@ (8007274 <UART_SetConfig+0xac8>)
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e0:	e009      	b.n	80071f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e8:	e005      	b.n	80071f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80071f4:	bf00      	nop
    }

    if (pclk != 0U)
 80071f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d021      	beq.n	8007240 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007200:	4a1d      	ldr	r2, [pc, #116]	@ (8007278 <UART_SetConfig+0xacc>)
 8007202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007206:	461a      	mov	r2, r3
 8007208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800720a:	fbb3 f2f2 	udiv	r2, r3, r2
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	085b      	lsrs	r3, r3, #1
 8007214:	441a      	add	r2, r3
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007222:	2b0f      	cmp	r3, #15
 8007224:	d909      	bls.n	800723a <UART_SetConfig+0xa8e>
 8007226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800722c:	d205      	bcs.n	800723a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800722e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007230:	b29a      	uxth	r2, r3
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60da      	str	r2, [r3, #12]
 8007238:	e002      	b.n	8007240 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2201      	movs	r2, #1
 8007244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2201      	movs	r2, #1
 800724c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2200      	movs	r2, #0
 8007254:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2200      	movs	r2, #0
 800725a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800725c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007260:	4618      	mov	r0, r3
 8007262:	3748      	adds	r7, #72	@ 0x48
 8007264:	46bd      	mov	sp, r7
 8007266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800726a:	bf00      	nop
 800726c:	58024400 	.word	0x58024400
 8007270:	03d09000 	.word	0x03d09000
 8007274:	003d0900 	.word	0x003d0900
 8007278:	08009940 	.word	0x08009940

0800727c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	f003 0310 	and.w	r3, r3, #16
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01a      	beq.n	8007392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800737a:	d10a      	bne.n	8007392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	605a      	str	r2, [r3, #4]
  }
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b098      	sub	sp, #96	@ 0x60
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073d0:	f7fa f87a 	bl	80014c8 <HAL_GetTick>
 80073d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d12f      	bne.n	8007444 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073ec:	2200      	movs	r2, #0
 80073ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f88e 	bl	8007514 <UART_WaitOnFlagUntilTimeout>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d022      	beq.n	8007444 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800740c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800740e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007412:	653b      	str	r3, [r7, #80]	@ 0x50
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800741c:	647b      	str	r3, [r7, #68]	@ 0x44
 800741e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800742a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e6      	bne.n	80073fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e063      	b.n	800750c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b04      	cmp	r3, #4
 8007450:	d149      	bne.n	80074e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007452:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800745a:	2200      	movs	r2, #0
 800745c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f857 	bl	8007514 <UART_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d03c      	beq.n	80074e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	623b      	str	r3, [r7, #32]
   return(result);
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800748a:	633b      	str	r3, [r7, #48]	@ 0x30
 800748c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e6      	bne.n	800746c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3308      	adds	r3, #8
 80074bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074be:	61fa      	str	r2, [r7, #28]
 80074c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	69b9      	ldr	r1, [r7, #24]
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	617b      	str	r3, [r7, #20]
   return(result);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e012      	b.n	800750c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3758      	adds	r7, #88	@ 0x58
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007524:	e04f      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d04b      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800752e:	f7f9 ffcb 	bl	80014c8 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	429a      	cmp	r2, r3
 800753c:	d302      	bcc.n	8007544 <UART_WaitOnFlagUntilTimeout+0x30>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e04e      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	d037      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b80      	cmp	r3, #128	@ 0x80
 800755a:	d034      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b40      	cmp	r3, #64	@ 0x40
 8007560:	d031      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b08      	cmp	r3, #8
 800756e:	d110      	bne.n	8007592 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2208      	movs	r2, #8
 8007576:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f95b 	bl	8007834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2208      	movs	r2, #8
 8007582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e029      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800759c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a0:	d111      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f941 	bl	8007834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e00f      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4013      	ands	r3, r2
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	bf0c      	ite	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	2300      	movne	r3, #0
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d0a0      	beq.n	8007526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b0a3      	sub	sp, #140	@ 0x8c
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007622:	d10e      	bne.n	8007642 <UART_Start_Receive_IT+0x52>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d105      	bne.n	8007638 <UART_Start_Receive_IT+0x48>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007632:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007636:	e02d      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	22ff      	movs	r2, #255	@ 0xff
 800763c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007640:	e028      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10d      	bne.n	8007666 <UART_Start_Receive_IT+0x76>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d104      	bne.n	800765c <UART_Start_Receive_IT+0x6c>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	22ff      	movs	r2, #255	@ 0xff
 8007656:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800765a:	e01b      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	227f      	movs	r2, #127	@ 0x7f
 8007660:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007664:	e016      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800766e:	d10d      	bne.n	800768c <UART_Start_Receive_IT+0x9c>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <UART_Start_Receive_IT+0x92>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	227f      	movs	r2, #127	@ 0x7f
 800767c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007680:	e008      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	223f      	movs	r2, #63	@ 0x3f
 8007686:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800768a:	e003      	b.n	8007694 <UART_Start_Receive_IT+0xa4>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2222      	movs	r2, #34	@ 0x22
 80076a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80076b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80076c8:	673a      	str	r2, [r7, #112]	@ 0x70
 80076ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80076ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80076d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e3      	bne.n	80076a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e4:	d14f      	bne.n	8007786 <UART_Start_Receive_IT+0x196>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80076ec:	88fa      	ldrh	r2, [r7, #6]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d349      	bcc.n	8007786 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fa:	d107      	bne.n	800770c <UART_Start_Receive_IT+0x11c>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d103      	bne.n	800770c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a47      	ldr	r2, [pc, #284]	@ (8007824 <UART_Start_Receive_IT+0x234>)
 8007708:	675a      	str	r2, [r3, #116]	@ 0x74
 800770a:	e002      	b.n	8007712 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4a46      	ldr	r2, [pc, #280]	@ (8007828 <UART_Start_Receive_IT+0x238>)
 8007710:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01a      	beq.n	8007750 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800772a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800772e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800773c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800773e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007742:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800774a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e4      	bne.n	800771a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007766:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007770:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007772:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800777e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e5      	bne.n	8007750 <UART_Start_Receive_IT+0x160>
 8007784:	e046      	b.n	8007814 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800778e:	d107      	bne.n	80077a0 <UART_Start_Receive_IT+0x1b0>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a24      	ldr	r2, [pc, #144]	@ (800782c <UART_Start_Receive_IT+0x23c>)
 800779c:	675a      	str	r2, [r3, #116]	@ 0x74
 800779e:	e002      	b.n	80077a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a23      	ldr	r2, [pc, #140]	@ (8007830 <UART_Start_Receive_IT+0x240>)
 80077a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d019      	beq.n	80077e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077be:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80077c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80077da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e6      	bne.n	80077ae <UART_Start_Receive_IT+0x1be>
 80077e0:	e018      	b.n	8007814 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	613b      	str	r3, [r7, #16]
   return(result);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f043 0320 	orr.w	r3, r3, #32
 80077f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	61bb      	str	r3, [r7, #24]
   return(result);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e6      	bne.n	80077e2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	378c      	adds	r7, #140	@ 0x8c
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	08008399 	.word	0x08008399
 8007828:	08008039 	.word	0x08008039
 800782c:	08007e81 	.word	0x08007e81
 8007830:	08007cc9 	.word	0x08007cc9

08007834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b095      	sub	sp, #84	@ 0x54
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007850:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800785a:	643b      	str	r3, [r7, #64]	@ 0x40
 800785c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e6      	bne.n	800783c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	61fb      	str	r3, [r7, #28]
   return(result);
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	4b1e      	ldr	r3, [pc, #120]	@ (80078fc <UART_EndRxTransfer+0xc8>)
 8007882:	4013      	ands	r3, r2
 8007884:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3308      	adds	r3, #8
 800788c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800788e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007890:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e5      	bne.n	800786e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d118      	bne.n	80078dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f023 0310 	bic.w	r3, r3, #16
 80078be:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078c8:	61bb      	str	r3, [r7, #24]
 80078ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6979      	ldr	r1, [r7, #20]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	613b      	str	r3, [r7, #16]
   return(result);
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078f0:	bf00      	nop
 80078f2:	3754      	adds	r7, #84	@ 0x54
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	effffffe 	.word	0xeffffffe

08007900 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f7fe ff2e 	bl	8006780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800792c:	b480      	push	{r7}
 800792e:	b08f      	sub	sp, #60	@ 0x3c
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793a:	2b21      	cmp	r3, #33	@ 0x21
 800793c:	d14c      	bne.n	80079d8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d132      	bne.n	80079b0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	61fb      	str	r3, [r7, #28]
   return(result);
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800795e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800796a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800796e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e6      	bne.n	800794a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	60bb      	str	r3, [r7, #8]
   return(result);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007990:	633b      	str	r3, [r7, #48]	@ 0x30
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799a:	61bb      	str	r3, [r7, #24]
 800799c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	6979      	ldr	r1, [r7, #20]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	613b      	str	r3, [r7, #16]
   return(result);
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1e6      	bne.n	800797c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80079ae:	e013      	b.n	80079d8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079b4:	781a      	ldrb	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80079d8:	bf00      	nop
 80079da:	373c      	adds	r7, #60	@ 0x3c
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b091      	sub	sp, #68	@ 0x44
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f2:	2b21      	cmp	r3, #33	@ 0x21
 80079f4:	d151      	bne.n	8007a9a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d132      	bne.n	8007a68 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	623b      	str	r3, [r7, #32]
   return(result);
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e6      	bne.n	8007a02 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a52:	61fb      	str	r3, [r7, #28]
 8007a54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	69b9      	ldr	r1, [r7, #24]
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e6      	bne.n	8007a34 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007a66:	e018      	b.n	8007a9a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a7c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a82:	1c9a      	adds	r2, r3, #2
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007a9a:	bf00      	nop
 8007a9c:	3744      	adds	r7, #68	@ 0x44
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b091      	sub	sp, #68	@ 0x44
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab4:	2b21      	cmp	r3, #33	@ 0x21
 8007ab6:	d160      	bne.n	8007b7a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007abe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007ac0:	e057      	b.n	8007b72 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d133      	bne.n	8007b36 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	623b      	str	r3, [r7, #32]
   return(result);
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3308      	adds	r3, #8
 8007aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8007af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e5      	bne.n	8007ace <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b20:	61fb      	str	r3, [r7, #28]
 8007b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	69b9      	ldr	r1, [r7, #24]
 8007b26:	69fa      	ldr	r2, [r7, #28]
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e6      	bne.n	8007b02 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007b34:	e021      	b.n	8007b7a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d013      	beq.n	8007b6c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b48:	781a      	ldrb	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007b72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1a4      	bne.n	8007ac2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007b78:	e7ff      	b.n	8007b7a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007b7a:	bf00      	nop
 8007b7c:	3744      	adds	r7, #68	@ 0x44
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b091      	sub	sp, #68	@ 0x44
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b94:	2b21      	cmp	r3, #33	@ 0x21
 8007b96:	d165      	bne.n	8007c64 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007ba0:	e05c      	b.n	8007c5c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d133      	bne.n	8007c16 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e5      	bne.n	8007bae <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	6979      	ldr	r1, [r7, #20]
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e6      	bne.n	8007be2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007c14:	e026      	b.n	8007c64 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d018      	beq.n	8007c56 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c28:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c38:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c3e:	1c9a      	adds	r2, r3, #2
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007c56:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007c5c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d19f      	bne.n	8007ba2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007c62:	e7ff      	b.n	8007c64 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007c64:	bf00      	nop
 8007c66:	3744      	adds	r7, #68	@ 0x44
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	e853 3f00 	ldrex	r3, [r3]
 8007c84:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c8c:	61fb      	str	r3, [r7, #28]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	61bb      	str	r3, [r7, #24]
 8007c98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	6979      	ldr	r1, [r7, #20]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	e841 2300 	strex	r3, r2, [r1]
 8007ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1e6      	bne.n	8007c78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7fe fd57 	bl	800676c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cbe:	bf00      	nop
 8007cc0:	3720      	adds	r7, #32
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b09c      	sub	sp, #112	@ 0x70
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007cd6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ce0:	2b22      	cmp	r3, #34	@ 0x22
 8007ce2:	f040 80be 	bne.w	8007e62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cf0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007cf4:	b2d9      	uxtb	r1, r3
 8007cf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d00:	400a      	ands	r2, r1
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f040 80a1 	bne.w	8007e72 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e6      	bne.n	8007d30 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3308      	adds	r3, #8
 8007d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3308      	adds	r3, #8
 8007d80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d82:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e5      	bne.n	8007d62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a33      	ldr	r2, [pc, #204]	@ (8007e7c <UART_RxISR_8BIT+0x1b4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d01f      	beq.n	8007df4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d018      	beq.n	8007df4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	623b      	str	r3, [r7, #32]
   return(result);
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007dd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e6      	bne.n	8007dc2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d12e      	bne.n	8007e5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0310 	bic.w	r3, r3, #16
 8007e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e20:	61fb      	str	r3, [r7, #28]
 8007e22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	69b9      	ldr	r1, [r7, #24]
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e6      	bne.n	8007e02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f003 0310 	and.w	r3, r3, #16
 8007e3e:	2b10      	cmp	r3, #16
 8007e40:	d103      	bne.n	8007e4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2210      	movs	r2, #16
 8007e48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fe fc9e 	bl	8006794 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e58:	e00b      	b.n	8007e72 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7f8 ff4e 	bl	8000cfc <HAL_UART_RxCpltCallback>
}
 8007e60:	e007      	b.n	8007e72 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699a      	ldr	r2, [r3, #24]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f042 0208 	orr.w	r2, r2, #8
 8007e70:	619a      	str	r2, [r3, #24]
}
 8007e72:	bf00      	nop
 8007e74:	3770      	adds	r7, #112	@ 0x70
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	58000c00 	.word	0x58000c00

08007e80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b09c      	sub	sp, #112	@ 0x70
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e98:	2b22      	cmp	r3, #34	@ 0x22
 8007e9a:	f040 80be 	bne.w	800801a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007eae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007eb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ebc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec2:	1c9a      	adds	r2, r3, #2
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f040 80a1 	bne.w	800802a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ef0:	e853 3f00 	ldrex	r3, [r3]
 8007ef4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007efc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f06:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f08:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e6      	bne.n	8007ee8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3308      	adds	r3, #8
 8007f20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2c:	f023 0301 	bic.w	r3, r3, #1
 8007f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3308      	adds	r3, #8
 8007f38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e5      	bne.n	8007f1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a33      	ldr	r2, [pc, #204]	@ (8008034 <UART_RxISR_16BIT+0x1b4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d01f      	beq.n	8007fac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d018      	beq.n	8007fac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e6      	bne.n	8007f7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d12e      	bne.n	8008012 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f023 0310 	bic.w	r3, r3, #16
 8007fce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fd8:	61bb      	str	r3, [r7, #24]
 8007fda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	6979      	ldr	r1, [r7, #20]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	e841 2300 	strex	r3, r2, [r1]
 8007fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e6      	bne.n	8007fba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f003 0310 	and.w	r3, r3, #16
 8007ff6:	2b10      	cmp	r3, #16
 8007ff8:	d103      	bne.n	8008002 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2210      	movs	r2, #16
 8008000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fe fbc2 	bl	8006794 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008010:	e00b      	b.n	800802a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7f8 fe72 	bl	8000cfc <HAL_UART_RxCpltCallback>
}
 8008018:	e007      	b.n	800802a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	699a      	ldr	r2, [r3, #24]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0208 	orr.w	r2, r2, #8
 8008028:	619a      	str	r2, [r3, #24]
}
 800802a:	bf00      	nop
 800802c:	3770      	adds	r7, #112	@ 0x70
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	58000c00 	.word	0x58000c00

08008038 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b0ac      	sub	sp, #176	@ 0xb0
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008046:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800806e:	2b22      	cmp	r3, #34	@ 0x22
 8008070:	f040 8180 	bne.w	8008374 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800807a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800807e:	e123      	b.n	80082c8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800808a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800808e:	b2d9      	uxtb	r1, r3
 8008090:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008094:	b2da      	uxtb	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809a:	400a      	ands	r2, r1
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d053      	beq.n	800817a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d011      	beq.n	8008102 <UART_RxISR_8BIT_FIFOEN+0xca>
 80080de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00b      	beq.n	8008102 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2201      	movs	r2, #1
 80080f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f8:	f043 0201 	orr.w	r2, r3, #1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d011      	beq.n	8008132 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800810e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00b      	beq.n	8008132 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2202      	movs	r2, #2
 8008120:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008128:	f043 0204 	orr.w	r2, r3, #4
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d011      	beq.n	8008162 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800813e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00b      	beq.n	8008162 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2204      	movs	r2, #4
 8008150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008158:	f043 0202 	orr.w	r2, r3, #2
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008168:	2b00      	cmp	r3, #0
 800816a:	d006      	beq.n	800817a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7fe fb07 	bl	8006780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	f040 80a0 	bne.w	80082c8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800819c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	461a      	mov	r2, r3
 80081a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081ac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80081b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80081b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e4      	bne.n	8008188 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80081ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081d0:	4b6e      	ldr	r3, [pc, #440]	@ (800838c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80081d2:	4013      	ands	r3, r2
 80081d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3308      	adds	r3, #8
 80081de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80081e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80081e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80081f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e3      	bne.n	80081be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a60      	ldr	r2, [pc, #384]	@ (8008390 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d021      	beq.n	8008258 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01a      	beq.n	8008258 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008232:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008244:	657b      	str	r3, [r7, #84]	@ 0x54
 8008246:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800824a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e4      	bne.n	8008222 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800825c:	2b01      	cmp	r3, #1
 800825e:	d130      	bne.n	80082c2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008276:	f023 0310 	bic.w	r3, r3, #16
 800827a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008288:	643b      	str	r3, [r7, #64]	@ 0x40
 800828a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800828e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e4      	bne.n	8008266 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f003 0310 	and.w	r3, r3, #16
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	d103      	bne.n	80082b2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2210      	movs	r2, #16
 80082b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fe fa6a 	bl	8006794 <HAL_UARTEx_RxEventCallback>
 80082c0:	e002      	b.n	80082c8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7f8 fd1a 	bl	8000cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082c8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d006      	beq.n	80082de <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80082d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f47f aed1 	bne.w	8008080 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d049      	beq.n	8008384 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082f6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d242      	bcs.n	8008384 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3308      	adds	r3, #8
 8008304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	61fb      	str	r3, [r7, #28]
   return(result);
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3308      	adds	r3, #8
 800831e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008324:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e3      	bne.n	80082fe <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a16      	ldr	r2, [pc, #88]	@ (8008394 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800833a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60bb      	str	r3, [r7, #8]
   return(result);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f043 0320 	orr.w	r3, r3, #32
 8008350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	613b      	str	r3, [r7, #16]
   return(result);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e4      	bne.n	800833c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008372:	e007      	b.n	8008384 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0208 	orr.w	r2, r2, #8
 8008382:	619a      	str	r2, [r3, #24]
}
 8008384:	bf00      	nop
 8008386:	37b0      	adds	r7, #176	@ 0xb0
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	effffffe 	.word	0xeffffffe
 8008390:	58000c00 	.word	0x58000c00
 8008394:	08007cc9 	.word	0x08007cc9

08008398 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b0ae      	sub	sp, #184	@ 0xb8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80083a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083ce:	2b22      	cmp	r3, #34	@ 0x22
 80083d0:	f040 8184 	bne.w	80086dc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80083da:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083de:	e127      	b.n	8008630 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80083f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80083f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80083fa:	4013      	ands	r3, r2
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008402:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008408:	1c9a      	adds	r2, r3, #2
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800842a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	2b00      	cmp	r3, #0
 8008434:	d053      	beq.n	80084de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d011      	beq.n	8008466 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2201      	movs	r2, #1
 8008454:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845c:	f043 0201 	orr.w	r2, r3, #1
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d011      	beq.n	8008496 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00b      	beq.n	8008496 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2202      	movs	r2, #2
 8008484:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848c:	f043 0204 	orr.w	r2, r3, #4
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d011      	beq.n	80084c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80084a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2204      	movs	r2, #4
 80084b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084bc:	f043 0202 	orr.w	r2, r3, #2
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d006      	beq.n	80084de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7fe f955 	bl	8006780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f040 80a2 	bne.w	8008630 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008500:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800850e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008512:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008516:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008520:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e2      	bne.n	80084ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008536:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008538:	4b6e      	ldr	r3, [pc, #440]	@ (80086f4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800853a:	4013      	ands	r3, r2
 800853c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3308      	adds	r3, #8
 8008546:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800854a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800854c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008550:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e3      	bne.n	8008526 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a60      	ldr	r2, [pc, #384]	@ (80086f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d021      	beq.n	80085c0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d01a      	beq.n	80085c0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800859a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800859e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085ae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e4      	bne.n	800858a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d130      	bne.n	800862a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085de:	f023 0310 	bic.w	r3, r3, #16
 80085e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e4      	bne.n	80085ce <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b10      	cmp	r3, #16
 8008610:	d103      	bne.n	800861a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2210      	movs	r2, #16
 8008618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe f8b6 	bl	8006794 <HAL_UARTEx_RxEventCallback>
 8008628:	e002      	b.n	8008630 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7f8 fb66 	bl	8000cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008630:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008634:	2b00      	cmp	r3, #0
 8008636:	d006      	beq.n	8008646 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008638:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800863c:	f003 0320 	and.w	r3, r3, #32
 8008640:	2b00      	cmp	r3, #0
 8008642:	f47f aecd 	bne.w	80083e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800864c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008650:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008654:	2b00      	cmp	r3, #0
 8008656:	d049      	beq.n	80086ec <UART_RxISR_16BIT_FIFOEN+0x354>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800865e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008662:	429a      	cmp	r2, r3
 8008664:	d242      	bcs.n	80086ec <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3308      	adds	r3, #8
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	623b      	str	r3, [r7, #32]
   return(result);
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800867c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3308      	adds	r3, #8
 8008686:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800868a:	633a      	str	r2, [r7, #48]	@ 0x30
 800868c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e3      	bne.n	8008666 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a16      	ldr	r2, [pc, #88]	@ (80086fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 80086a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f043 0320 	orr.w	r3, r3, #32
 80086b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	461a      	mov	r2, r3
 80086c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	69b9      	ldr	r1, [r7, #24]
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	617b      	str	r3, [r7, #20]
   return(result);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e4      	bne.n	80086a4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086da:	e007      	b.n	80086ec <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0208 	orr.w	r2, r2, #8
 80086ea:	619a      	str	r2, [r3, #24]
}
 80086ec:	bf00      	nop
 80086ee:	37b8      	adds	r7, #184	@ 0xb8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	effffffe 	.word	0xeffffffe
 80086f8:	58000c00 	.word	0x58000c00
 80086fc:	08007e81 	.word	0x08007e81

08008700 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <HAL_UARTEx_DisableFifoMode+0x16>
 800874e:	2302      	movs	r3, #2
 8008750:	e027      	b.n	80087a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2224      	movs	r2, #36	@ 0x24
 800875e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0201 	bic.w	r2, r2, #1
 8008778:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008780:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087c2:	2302      	movs	r3, #2
 80087c4:	e02d      	b.n	8008822 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2224      	movs	r2, #36	@ 0x24
 80087d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0201 	bic.w	r2, r2, #1
 80087ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f850 	bl	80088a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800883e:	2302      	movs	r3, #2
 8008840:	e02d      	b.n	800889e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2224      	movs	r2, #36	@ 0x24
 800884e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 0201 	bic.w	r2, r2, #1
 8008868:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f812 	bl	80088a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2220      	movs	r2, #32
 8008890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d108      	bne.n	80088ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088c8:	e031      	b.n	800892e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088ca:	2310      	movs	r3, #16
 80088cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088ce:	2310      	movs	r3, #16
 80088d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	0e5b      	lsrs	r3, r3, #25
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	0f5b      	lsrs	r3, r3, #29
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	7b3a      	ldrb	r2, [r7, #12]
 80088f6:	4911      	ldr	r1, [pc, #68]	@ (800893c <UARTEx_SetNbDataToProcess+0x94>)
 80088f8:	5c8a      	ldrb	r2, [r1, r2]
 80088fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088fe:	7b3a      	ldrb	r2, [r7, #12]
 8008900:	490f      	ldr	r1, [pc, #60]	@ (8008940 <UARTEx_SetNbDataToProcess+0x98>)
 8008902:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008904:	fb93 f3f2 	sdiv	r3, r3, r2
 8008908:	b29a      	uxth	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	7b7a      	ldrb	r2, [r7, #13]
 8008914:	4909      	ldr	r1, [pc, #36]	@ (800893c <UARTEx_SetNbDataToProcess+0x94>)
 8008916:	5c8a      	ldrb	r2, [r1, r2]
 8008918:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800891c:	7b7a      	ldrb	r2, [r7, #13]
 800891e:	4908      	ldr	r1, [pc, #32]	@ (8008940 <UARTEx_SetNbDataToProcess+0x98>)
 8008920:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008922:	fb93 f3f2 	sdiv	r3, r3, r2
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800892e:	bf00      	nop
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	08009958 	.word	0x08009958
 8008940:	08009960 	.word	0x08009960

08008944 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008944:	b084      	sub	sp, #16
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	f107 001c 	add.w	r0, r7, #28
 8008952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008956:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800895a:	2b01      	cmp	r3, #1
 800895c:	d121      	bne.n	80089a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008962:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	4b2c      	ldr	r3, [pc, #176]	@ (8008a20 <USB_CoreInit+0xdc>)
 8008970:	4013      	ands	r3, r2
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008982:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008986:	2b01      	cmp	r3, #1
 8008988:	d105      	bne.n	8008996 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 faaa 	bl	8008ef0 <USB_CoreReset>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
 80089a0:	e01b      	b.n	80089da <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fa9e 	bl	8008ef0 <USB_CoreReset>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d106      	bne.n	80089ce <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80089cc:	e005      	b.n	80089da <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089da:	7fbb      	ldrb	r3, [r7, #30]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d116      	bne.n	8008a0e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008a24 <USB_CoreInit+0xe0>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f043 0206 	orr.w	r2, r3, #6
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f043 0220 	orr.w	r2, r3, #32
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a1a:	b004      	add	sp, #16
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	ffbdffbf 	.word	0xffbdffbf
 8008a24:	03ee0000 	.word	0x03ee0000

08008a28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f023 0201 	bic.w	r2, r3, #1
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d115      	bne.n	8008a98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008a78:	200a      	movs	r0, #10
 8008a7a:	f7f8 fd31 	bl	80014e0 <HAL_Delay>
      ms += 10U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	330a      	adds	r3, #10
 8008a82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fa25 	bl	8008ed4 <USB_GetMode>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d01e      	beq.n	8008ace <USB_SetCurrentMode+0x84>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2bc7      	cmp	r3, #199	@ 0xc7
 8008a94:	d9f0      	bls.n	8008a78 <USB_SetCurrentMode+0x2e>
 8008a96:	e01a      	b.n	8008ace <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d115      	bne.n	8008aca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008aaa:	200a      	movs	r0, #10
 8008aac:	f7f8 fd18 	bl	80014e0 <HAL_Delay>
      ms += 10U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	330a      	adds	r3, #10
 8008ab4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa0c 	bl	8008ed4 <USB_GetMode>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <USB_SetCurrentMode+0x84>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ac6:	d9f0      	bls.n	8008aaa <USB_SetCurrentMode+0x60>
 8008ac8:	e001      	b.n	8008ace <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e005      	b.n	8008ada <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2bc8      	cmp	r3, #200	@ 0xc8
 8008ad2:	d101      	bne.n	8008ad8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b086      	sub	sp, #24
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	e009      	b.n	8008b18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	3340      	adds	r3, #64	@ 0x40
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	2200      	movs	r2, #0
 8008b10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	3301      	adds	r3, #1
 8008b16:	613b      	str	r3, [r7, #16]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2b0e      	cmp	r3, #14
 8008b1c:	d9f2      	bls.n	8008b04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11c      	bne.n	8008b60 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b34:	f043 0302 	orr.w	r3, r3, #2
 8008b38:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	e005      	b.n	8008b6c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b72:	461a      	mov	r2, r3
 8008b74:	2300      	movs	r3, #0
 8008b76:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d10d      	bne.n	8008b9c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f968 	bl	8008e60 <USB_SetDevSpeed>
 8008b90:	e008      	b.n	8008ba4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b92:	2101      	movs	r1, #1
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f963 	bl	8008e60 <USB_SetDevSpeed>
 8008b9a:	e003      	b.n	8008ba4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b9c:	2103      	movs	r1, #3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f95e 	bl	8008e60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ba4:	2110      	movs	r1, #16
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f8fa 	bl	8008da0 <USB_FlushTxFifo>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f924 	bl	8008e04 <USB_FlushRxFifo>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be4:	461a      	mov	r2, r3
 8008be6:	2300      	movs	r3, #0
 8008be8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bea:	2300      	movs	r3, #0
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	e043      	b.n	8008c78 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c06:	d118      	bne.n	8008c3a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10a      	bne.n	8008c24 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	e013      	b.n	8008c4c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c30:	461a      	mov	r2, r3
 8008c32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	e008      	b.n	8008c4c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c46:	461a      	mov	r2, r3
 8008c48:	2300      	movs	r3, #0
 8008c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008c70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3301      	adds	r3, #1
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d3b5      	bcc.n	8008bf0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c84:	2300      	movs	r3, #0
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	e043      	b.n	8008d12 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ca0:	d118      	bne.n	8008cd4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	e013      	b.n	8008ce6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	e008      	b.n	8008ce6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d04:	461a      	mov	r2, r3
 8008d06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d16:	461a      	mov	r2, r3
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d3b5      	bcc.n	8008c8a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008d3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d105      	bne.n	8008d54 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f043 0210 	orr.w	r2, r3, #16
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699a      	ldr	r2, [r3, #24]
 8008d58:	4b0f      	ldr	r3, [pc, #60]	@ (8008d98 <USB_DevInit+0x2b4>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f043 0208 	orr.w	r2, r3, #8
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d105      	bne.n	8008d88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	699a      	ldr	r2, [r3, #24]
 8008d80:	4b06      	ldr	r3, [pc, #24]	@ (8008d9c <USB_DevInit+0x2b8>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d94:	b004      	add	sp, #16
 8008d96:	4770      	bx	lr
 8008d98:	803c3800 	.word	0x803c3800
 8008d9c:	40000004 	.word	0x40000004

08008da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3301      	adds	r3, #1
 8008db2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008dba:	d901      	bls.n	8008dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e01b      	b.n	8008df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	daf2      	bge.n	8008dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	019b      	lsls	r3, r3, #6
 8008dd0:	f043 0220 	orr.w	r2, r3, #32
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008de4:	d901      	bls.n	8008dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e006      	b.n	8008df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d0f0      	beq.n	8008dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3301      	adds	r3, #1
 8008e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e1c:	d901      	bls.n	8008e22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e018      	b.n	8008e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	daf2      	bge.n	8008e10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2210      	movs	r2, #16
 8008e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e40:	d901      	bls.n	8008e46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e006      	b.n	8008e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f003 0310 	and.w	r3, r3, #16
 8008e4e:	2b10      	cmp	r3, #16
 8008e50:	d0f0      	beq.n	8008e34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	68f9      	ldr	r1, [r7, #12]
 8008e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e80:	4313      	orrs	r3, r2
 8008e82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008eac:	f023 0303 	bic.w	r3, r3, #3
 8008eb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ec0:	f043 0302 	orr.w	r3, r3, #2
 8008ec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	3301      	adds	r3, #1
 8008f00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f08:	d901      	bls.n	8008f0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e01b      	b.n	8008f46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	daf2      	bge.n	8008efc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	f043 0201 	orr.w	r2, r3, #1
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f32:	d901      	bls.n	8008f38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e006      	b.n	8008f46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d0f0      	beq.n	8008f26 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
	...

08008f54 <sniprintf>:
 8008f54:	b40c      	push	{r2, r3}
 8008f56:	b530      	push	{r4, r5, lr}
 8008f58:	4b17      	ldr	r3, [pc, #92]	@ (8008fb8 <sniprintf+0x64>)
 8008f5a:	1e0c      	subs	r4, r1, #0
 8008f5c:	681d      	ldr	r5, [r3, #0]
 8008f5e:	b09d      	sub	sp, #116	@ 0x74
 8008f60:	da08      	bge.n	8008f74 <sniprintf+0x20>
 8008f62:	238b      	movs	r3, #139	@ 0x8b
 8008f64:	602b      	str	r3, [r5, #0]
 8008f66:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6a:	b01d      	add	sp, #116	@ 0x74
 8008f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f70:	b002      	add	sp, #8
 8008f72:	4770      	bx	lr
 8008f74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008f78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f7c:	bf14      	ite	ne
 8008f7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f82:	4623      	moveq	r3, r4
 8008f84:	9304      	str	r3, [sp, #16]
 8008f86:	9307      	str	r3, [sp, #28]
 8008f88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f8c:	9002      	str	r0, [sp, #8]
 8008f8e:	9006      	str	r0, [sp, #24]
 8008f90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f96:	ab21      	add	r3, sp, #132	@ 0x84
 8008f98:	a902      	add	r1, sp, #8
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	f000 f9a7 	bl	80092f0 <_svfiprintf_r>
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	bfbc      	itt	lt
 8008fa6:	238b      	movlt	r3, #139	@ 0x8b
 8008fa8:	602b      	strlt	r3, [r5, #0]
 8008faa:	2c00      	cmp	r4, #0
 8008fac:	d0dd      	beq.n	8008f6a <sniprintf+0x16>
 8008fae:	9b02      	ldr	r3, [sp, #8]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	e7d9      	b.n	8008f6a <sniprintf+0x16>
 8008fb6:	bf00      	nop
 8008fb8:	24000070 	.word	0x24000070

08008fbc <memset>:
 8008fbc:	4402      	add	r2, r0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d100      	bne.n	8008fc6 <memset+0xa>
 8008fc4:	4770      	bx	lr
 8008fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8008fca:	e7f9      	b.n	8008fc0 <memset+0x4>

08008fcc <strncmp>:
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	b16a      	cbz	r2, 8008fec <strncmp+0x20>
 8008fd0:	3901      	subs	r1, #1
 8008fd2:	1884      	adds	r4, r0, r2
 8008fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d103      	bne.n	8008fe8 <strncmp+0x1c>
 8008fe0:	42a0      	cmp	r0, r4
 8008fe2:	d001      	beq.n	8008fe8 <strncmp+0x1c>
 8008fe4:	2a00      	cmp	r2, #0
 8008fe6:	d1f5      	bne.n	8008fd4 <strncmp+0x8>
 8008fe8:	1ad0      	subs	r0, r2, r3
 8008fea:	bd10      	pop	{r4, pc}
 8008fec:	4610      	mov	r0, r2
 8008fee:	e7fc      	b.n	8008fea <strncmp+0x1e>

08008ff0 <__errno>:
 8008ff0:	4b01      	ldr	r3, [pc, #4]	@ (8008ff8 <__errno+0x8>)
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	24000070 	.word	0x24000070

08008ffc <__libc_init_array>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8009034 <__libc_init_array+0x38>)
 8009000:	4c0d      	ldr	r4, [pc, #52]	@ (8009038 <__libc_init_array+0x3c>)
 8009002:	1b64      	subs	r4, r4, r5
 8009004:	10a4      	asrs	r4, r4, #2
 8009006:	2600      	movs	r6, #0
 8009008:	42a6      	cmp	r6, r4
 800900a:	d109      	bne.n	8009020 <__libc_init_array+0x24>
 800900c:	4d0b      	ldr	r5, [pc, #44]	@ (800903c <__libc_init_array+0x40>)
 800900e:	4c0c      	ldr	r4, [pc, #48]	@ (8009040 <__libc_init_array+0x44>)
 8009010:	f000 fc66 	bl	80098e0 <_init>
 8009014:	1b64      	subs	r4, r4, r5
 8009016:	10a4      	asrs	r4, r4, #2
 8009018:	2600      	movs	r6, #0
 800901a:	42a6      	cmp	r6, r4
 800901c:	d105      	bne.n	800902a <__libc_init_array+0x2e>
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	f855 3b04 	ldr.w	r3, [r5], #4
 8009024:	4798      	blx	r3
 8009026:	3601      	adds	r6, #1
 8009028:	e7ee      	b.n	8009008 <__libc_init_array+0xc>
 800902a:	f855 3b04 	ldr.w	r3, [r5], #4
 800902e:	4798      	blx	r3
 8009030:	3601      	adds	r6, #1
 8009032:	e7f2      	b.n	800901a <__libc_init_array+0x1e>
 8009034:	080099a4 	.word	0x080099a4
 8009038:	080099a4 	.word	0x080099a4
 800903c:	080099a4 	.word	0x080099a4
 8009040:	080099a8 	.word	0x080099a8

08009044 <__retarget_lock_acquire_recursive>:
 8009044:	4770      	bx	lr

08009046 <__retarget_lock_release_recursive>:
 8009046:	4770      	bx	lr

08009048 <_free_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4605      	mov	r5, r0
 800904c:	2900      	cmp	r1, #0
 800904e:	d041      	beq.n	80090d4 <_free_r+0x8c>
 8009050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009054:	1f0c      	subs	r4, r1, #4
 8009056:	2b00      	cmp	r3, #0
 8009058:	bfb8      	it	lt
 800905a:	18e4      	addlt	r4, r4, r3
 800905c:	f000 f8e0 	bl	8009220 <__malloc_lock>
 8009060:	4a1d      	ldr	r2, [pc, #116]	@ (80090d8 <_free_r+0x90>)
 8009062:	6813      	ldr	r3, [r2, #0]
 8009064:	b933      	cbnz	r3, 8009074 <_free_r+0x2c>
 8009066:	6063      	str	r3, [r4, #4]
 8009068:	6014      	str	r4, [r2, #0]
 800906a:	4628      	mov	r0, r5
 800906c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009070:	f000 b8dc 	b.w	800922c <__malloc_unlock>
 8009074:	42a3      	cmp	r3, r4
 8009076:	d908      	bls.n	800908a <_free_r+0x42>
 8009078:	6820      	ldr	r0, [r4, #0]
 800907a:	1821      	adds	r1, r4, r0
 800907c:	428b      	cmp	r3, r1
 800907e:	bf01      	itttt	eq
 8009080:	6819      	ldreq	r1, [r3, #0]
 8009082:	685b      	ldreq	r3, [r3, #4]
 8009084:	1809      	addeq	r1, r1, r0
 8009086:	6021      	streq	r1, [r4, #0]
 8009088:	e7ed      	b.n	8009066 <_free_r+0x1e>
 800908a:	461a      	mov	r2, r3
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	b10b      	cbz	r3, 8009094 <_free_r+0x4c>
 8009090:	42a3      	cmp	r3, r4
 8009092:	d9fa      	bls.n	800908a <_free_r+0x42>
 8009094:	6811      	ldr	r1, [r2, #0]
 8009096:	1850      	adds	r0, r2, r1
 8009098:	42a0      	cmp	r0, r4
 800909a:	d10b      	bne.n	80090b4 <_free_r+0x6c>
 800909c:	6820      	ldr	r0, [r4, #0]
 800909e:	4401      	add	r1, r0
 80090a0:	1850      	adds	r0, r2, r1
 80090a2:	4283      	cmp	r3, r0
 80090a4:	6011      	str	r1, [r2, #0]
 80090a6:	d1e0      	bne.n	800906a <_free_r+0x22>
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	6053      	str	r3, [r2, #4]
 80090ae:	4408      	add	r0, r1
 80090b0:	6010      	str	r0, [r2, #0]
 80090b2:	e7da      	b.n	800906a <_free_r+0x22>
 80090b4:	d902      	bls.n	80090bc <_free_r+0x74>
 80090b6:	230c      	movs	r3, #12
 80090b8:	602b      	str	r3, [r5, #0]
 80090ba:	e7d6      	b.n	800906a <_free_r+0x22>
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	1821      	adds	r1, r4, r0
 80090c0:	428b      	cmp	r3, r1
 80090c2:	bf04      	itt	eq
 80090c4:	6819      	ldreq	r1, [r3, #0]
 80090c6:	685b      	ldreq	r3, [r3, #4]
 80090c8:	6063      	str	r3, [r4, #4]
 80090ca:	bf04      	itt	eq
 80090cc:	1809      	addeq	r1, r1, r0
 80090ce:	6021      	streq	r1, [r4, #0]
 80090d0:	6054      	str	r4, [r2, #4]
 80090d2:	e7ca      	b.n	800906a <_free_r+0x22>
 80090d4:	bd38      	pop	{r3, r4, r5, pc}
 80090d6:	bf00      	nop
 80090d8:	24000960 	.word	0x24000960

080090dc <sbrk_aligned>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	4e0f      	ldr	r6, [pc, #60]	@ (800911c <sbrk_aligned+0x40>)
 80090e0:	460c      	mov	r4, r1
 80090e2:	6831      	ldr	r1, [r6, #0]
 80090e4:	4605      	mov	r5, r0
 80090e6:	b911      	cbnz	r1, 80090ee <sbrk_aligned+0x12>
 80090e8:	f000 fba6 	bl	8009838 <_sbrk_r>
 80090ec:	6030      	str	r0, [r6, #0]
 80090ee:	4621      	mov	r1, r4
 80090f0:	4628      	mov	r0, r5
 80090f2:	f000 fba1 	bl	8009838 <_sbrk_r>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	d103      	bne.n	8009102 <sbrk_aligned+0x26>
 80090fa:	f04f 34ff 	mov.w	r4, #4294967295
 80090fe:	4620      	mov	r0, r4
 8009100:	bd70      	pop	{r4, r5, r6, pc}
 8009102:	1cc4      	adds	r4, r0, #3
 8009104:	f024 0403 	bic.w	r4, r4, #3
 8009108:	42a0      	cmp	r0, r4
 800910a:	d0f8      	beq.n	80090fe <sbrk_aligned+0x22>
 800910c:	1a21      	subs	r1, r4, r0
 800910e:	4628      	mov	r0, r5
 8009110:	f000 fb92 	bl	8009838 <_sbrk_r>
 8009114:	3001      	adds	r0, #1
 8009116:	d1f2      	bne.n	80090fe <sbrk_aligned+0x22>
 8009118:	e7ef      	b.n	80090fa <sbrk_aligned+0x1e>
 800911a:	bf00      	nop
 800911c:	2400095c 	.word	0x2400095c

08009120 <_malloc_r>:
 8009120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009124:	1ccd      	adds	r5, r1, #3
 8009126:	f025 0503 	bic.w	r5, r5, #3
 800912a:	3508      	adds	r5, #8
 800912c:	2d0c      	cmp	r5, #12
 800912e:	bf38      	it	cc
 8009130:	250c      	movcc	r5, #12
 8009132:	2d00      	cmp	r5, #0
 8009134:	4606      	mov	r6, r0
 8009136:	db01      	blt.n	800913c <_malloc_r+0x1c>
 8009138:	42a9      	cmp	r1, r5
 800913a:	d904      	bls.n	8009146 <_malloc_r+0x26>
 800913c:	230c      	movs	r3, #12
 800913e:	6033      	str	r3, [r6, #0]
 8009140:	2000      	movs	r0, #0
 8009142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800921c <_malloc_r+0xfc>
 800914a:	f000 f869 	bl	8009220 <__malloc_lock>
 800914e:	f8d8 3000 	ldr.w	r3, [r8]
 8009152:	461c      	mov	r4, r3
 8009154:	bb44      	cbnz	r4, 80091a8 <_malloc_r+0x88>
 8009156:	4629      	mov	r1, r5
 8009158:	4630      	mov	r0, r6
 800915a:	f7ff ffbf 	bl	80090dc <sbrk_aligned>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	4604      	mov	r4, r0
 8009162:	d158      	bne.n	8009216 <_malloc_r+0xf6>
 8009164:	f8d8 4000 	ldr.w	r4, [r8]
 8009168:	4627      	mov	r7, r4
 800916a:	2f00      	cmp	r7, #0
 800916c:	d143      	bne.n	80091f6 <_malloc_r+0xd6>
 800916e:	2c00      	cmp	r4, #0
 8009170:	d04b      	beq.n	800920a <_malloc_r+0xea>
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	4639      	mov	r1, r7
 8009176:	4630      	mov	r0, r6
 8009178:	eb04 0903 	add.w	r9, r4, r3
 800917c:	f000 fb5c 	bl	8009838 <_sbrk_r>
 8009180:	4581      	cmp	r9, r0
 8009182:	d142      	bne.n	800920a <_malloc_r+0xea>
 8009184:	6821      	ldr	r1, [r4, #0]
 8009186:	1a6d      	subs	r5, r5, r1
 8009188:	4629      	mov	r1, r5
 800918a:	4630      	mov	r0, r6
 800918c:	f7ff ffa6 	bl	80090dc <sbrk_aligned>
 8009190:	3001      	adds	r0, #1
 8009192:	d03a      	beq.n	800920a <_malloc_r+0xea>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	442b      	add	r3, r5
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	f8d8 3000 	ldr.w	r3, [r8]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	bb62      	cbnz	r2, 80091fc <_malloc_r+0xdc>
 80091a2:	f8c8 7000 	str.w	r7, [r8]
 80091a6:	e00f      	b.n	80091c8 <_malloc_r+0xa8>
 80091a8:	6822      	ldr	r2, [r4, #0]
 80091aa:	1b52      	subs	r2, r2, r5
 80091ac:	d420      	bmi.n	80091f0 <_malloc_r+0xd0>
 80091ae:	2a0b      	cmp	r2, #11
 80091b0:	d917      	bls.n	80091e2 <_malloc_r+0xc2>
 80091b2:	1961      	adds	r1, r4, r5
 80091b4:	42a3      	cmp	r3, r4
 80091b6:	6025      	str	r5, [r4, #0]
 80091b8:	bf18      	it	ne
 80091ba:	6059      	strne	r1, [r3, #4]
 80091bc:	6863      	ldr	r3, [r4, #4]
 80091be:	bf08      	it	eq
 80091c0:	f8c8 1000 	streq.w	r1, [r8]
 80091c4:	5162      	str	r2, [r4, r5]
 80091c6:	604b      	str	r3, [r1, #4]
 80091c8:	4630      	mov	r0, r6
 80091ca:	f000 f82f 	bl	800922c <__malloc_unlock>
 80091ce:	f104 000b 	add.w	r0, r4, #11
 80091d2:	1d23      	adds	r3, r4, #4
 80091d4:	f020 0007 	bic.w	r0, r0, #7
 80091d8:	1ac2      	subs	r2, r0, r3
 80091da:	bf1c      	itt	ne
 80091dc:	1a1b      	subne	r3, r3, r0
 80091de:	50a3      	strne	r3, [r4, r2]
 80091e0:	e7af      	b.n	8009142 <_malloc_r+0x22>
 80091e2:	6862      	ldr	r2, [r4, #4]
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	bf0c      	ite	eq
 80091e8:	f8c8 2000 	streq.w	r2, [r8]
 80091ec:	605a      	strne	r2, [r3, #4]
 80091ee:	e7eb      	b.n	80091c8 <_malloc_r+0xa8>
 80091f0:	4623      	mov	r3, r4
 80091f2:	6864      	ldr	r4, [r4, #4]
 80091f4:	e7ae      	b.n	8009154 <_malloc_r+0x34>
 80091f6:	463c      	mov	r4, r7
 80091f8:	687f      	ldr	r7, [r7, #4]
 80091fa:	e7b6      	b.n	800916a <_malloc_r+0x4a>
 80091fc:	461a      	mov	r2, r3
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	42a3      	cmp	r3, r4
 8009202:	d1fb      	bne.n	80091fc <_malloc_r+0xdc>
 8009204:	2300      	movs	r3, #0
 8009206:	6053      	str	r3, [r2, #4]
 8009208:	e7de      	b.n	80091c8 <_malloc_r+0xa8>
 800920a:	230c      	movs	r3, #12
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	4630      	mov	r0, r6
 8009210:	f000 f80c 	bl	800922c <__malloc_unlock>
 8009214:	e794      	b.n	8009140 <_malloc_r+0x20>
 8009216:	6005      	str	r5, [r0, #0]
 8009218:	e7d6      	b.n	80091c8 <_malloc_r+0xa8>
 800921a:	bf00      	nop
 800921c:	24000960 	.word	0x24000960

08009220 <__malloc_lock>:
 8009220:	4801      	ldr	r0, [pc, #4]	@ (8009228 <__malloc_lock+0x8>)
 8009222:	f7ff bf0f 	b.w	8009044 <__retarget_lock_acquire_recursive>
 8009226:	bf00      	nop
 8009228:	24000958 	.word	0x24000958

0800922c <__malloc_unlock>:
 800922c:	4801      	ldr	r0, [pc, #4]	@ (8009234 <__malloc_unlock+0x8>)
 800922e:	f7ff bf0a 	b.w	8009046 <__retarget_lock_release_recursive>
 8009232:	bf00      	nop
 8009234:	24000958 	.word	0x24000958

08009238 <__ssputs_r>:
 8009238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800923c:	688e      	ldr	r6, [r1, #8]
 800923e:	461f      	mov	r7, r3
 8009240:	42be      	cmp	r6, r7
 8009242:	680b      	ldr	r3, [r1, #0]
 8009244:	4682      	mov	sl, r0
 8009246:	460c      	mov	r4, r1
 8009248:	4690      	mov	r8, r2
 800924a:	d82d      	bhi.n	80092a8 <__ssputs_r+0x70>
 800924c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009250:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009254:	d026      	beq.n	80092a4 <__ssputs_r+0x6c>
 8009256:	6965      	ldr	r5, [r4, #20]
 8009258:	6909      	ldr	r1, [r1, #16]
 800925a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800925e:	eba3 0901 	sub.w	r9, r3, r1
 8009262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009266:	1c7b      	adds	r3, r7, #1
 8009268:	444b      	add	r3, r9
 800926a:	106d      	asrs	r5, r5, #1
 800926c:	429d      	cmp	r5, r3
 800926e:	bf38      	it	cc
 8009270:	461d      	movcc	r5, r3
 8009272:	0553      	lsls	r3, r2, #21
 8009274:	d527      	bpl.n	80092c6 <__ssputs_r+0x8e>
 8009276:	4629      	mov	r1, r5
 8009278:	f7ff ff52 	bl	8009120 <_malloc_r>
 800927c:	4606      	mov	r6, r0
 800927e:	b360      	cbz	r0, 80092da <__ssputs_r+0xa2>
 8009280:	6921      	ldr	r1, [r4, #16]
 8009282:	464a      	mov	r2, r9
 8009284:	f000 fae8 	bl	8009858 <memcpy>
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800928e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	6126      	str	r6, [r4, #16]
 8009296:	6165      	str	r5, [r4, #20]
 8009298:	444e      	add	r6, r9
 800929a:	eba5 0509 	sub.w	r5, r5, r9
 800929e:	6026      	str	r6, [r4, #0]
 80092a0:	60a5      	str	r5, [r4, #8]
 80092a2:	463e      	mov	r6, r7
 80092a4:	42be      	cmp	r6, r7
 80092a6:	d900      	bls.n	80092aa <__ssputs_r+0x72>
 80092a8:	463e      	mov	r6, r7
 80092aa:	6820      	ldr	r0, [r4, #0]
 80092ac:	4632      	mov	r2, r6
 80092ae:	4641      	mov	r1, r8
 80092b0:	f000 faa8 	bl	8009804 <memmove>
 80092b4:	68a3      	ldr	r3, [r4, #8]
 80092b6:	1b9b      	subs	r3, r3, r6
 80092b8:	60a3      	str	r3, [r4, #8]
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	4433      	add	r3, r6
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	2000      	movs	r0, #0
 80092c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c6:	462a      	mov	r2, r5
 80092c8:	f000 fad4 	bl	8009874 <_realloc_r>
 80092cc:	4606      	mov	r6, r0
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d1e0      	bne.n	8009294 <__ssputs_r+0x5c>
 80092d2:	6921      	ldr	r1, [r4, #16]
 80092d4:	4650      	mov	r0, sl
 80092d6:	f7ff feb7 	bl	8009048 <_free_r>
 80092da:	230c      	movs	r3, #12
 80092dc:	f8ca 3000 	str.w	r3, [sl]
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ec:	e7e9      	b.n	80092c2 <__ssputs_r+0x8a>
	...

080092f0 <_svfiprintf_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	4698      	mov	r8, r3
 80092f6:	898b      	ldrh	r3, [r1, #12]
 80092f8:	061b      	lsls	r3, r3, #24
 80092fa:	b09d      	sub	sp, #116	@ 0x74
 80092fc:	4607      	mov	r7, r0
 80092fe:	460d      	mov	r5, r1
 8009300:	4614      	mov	r4, r2
 8009302:	d510      	bpl.n	8009326 <_svfiprintf_r+0x36>
 8009304:	690b      	ldr	r3, [r1, #16]
 8009306:	b973      	cbnz	r3, 8009326 <_svfiprintf_r+0x36>
 8009308:	2140      	movs	r1, #64	@ 0x40
 800930a:	f7ff ff09 	bl	8009120 <_malloc_r>
 800930e:	6028      	str	r0, [r5, #0]
 8009310:	6128      	str	r0, [r5, #16]
 8009312:	b930      	cbnz	r0, 8009322 <_svfiprintf_r+0x32>
 8009314:	230c      	movs	r3, #12
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	b01d      	add	sp, #116	@ 0x74
 800931e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009322:	2340      	movs	r3, #64	@ 0x40
 8009324:	616b      	str	r3, [r5, #20]
 8009326:	2300      	movs	r3, #0
 8009328:	9309      	str	r3, [sp, #36]	@ 0x24
 800932a:	2320      	movs	r3, #32
 800932c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009330:	f8cd 800c 	str.w	r8, [sp, #12]
 8009334:	2330      	movs	r3, #48	@ 0x30
 8009336:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094d4 <_svfiprintf_r+0x1e4>
 800933a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800933e:	f04f 0901 	mov.w	r9, #1
 8009342:	4623      	mov	r3, r4
 8009344:	469a      	mov	sl, r3
 8009346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800934a:	b10a      	cbz	r2, 8009350 <_svfiprintf_r+0x60>
 800934c:	2a25      	cmp	r2, #37	@ 0x25
 800934e:	d1f9      	bne.n	8009344 <_svfiprintf_r+0x54>
 8009350:	ebba 0b04 	subs.w	fp, sl, r4
 8009354:	d00b      	beq.n	800936e <_svfiprintf_r+0x7e>
 8009356:	465b      	mov	r3, fp
 8009358:	4622      	mov	r2, r4
 800935a:	4629      	mov	r1, r5
 800935c:	4638      	mov	r0, r7
 800935e:	f7ff ff6b 	bl	8009238 <__ssputs_r>
 8009362:	3001      	adds	r0, #1
 8009364:	f000 80a7 	beq.w	80094b6 <_svfiprintf_r+0x1c6>
 8009368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800936a:	445a      	add	r2, fp
 800936c:	9209      	str	r2, [sp, #36]	@ 0x24
 800936e:	f89a 3000 	ldrb.w	r3, [sl]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 809f 	beq.w	80094b6 <_svfiprintf_r+0x1c6>
 8009378:	2300      	movs	r3, #0
 800937a:	f04f 32ff 	mov.w	r2, #4294967295
 800937e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009382:	f10a 0a01 	add.w	sl, sl, #1
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	9307      	str	r3, [sp, #28]
 800938a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800938e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009390:	4654      	mov	r4, sl
 8009392:	2205      	movs	r2, #5
 8009394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009398:	484e      	ldr	r0, [pc, #312]	@ (80094d4 <_svfiprintf_r+0x1e4>)
 800939a:	f7f6 ffa9 	bl	80002f0 <memchr>
 800939e:	9a04      	ldr	r2, [sp, #16]
 80093a0:	b9d8      	cbnz	r0, 80093da <_svfiprintf_r+0xea>
 80093a2:	06d0      	lsls	r0, r2, #27
 80093a4:	bf44      	itt	mi
 80093a6:	2320      	movmi	r3, #32
 80093a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093ac:	0711      	lsls	r1, r2, #28
 80093ae:	bf44      	itt	mi
 80093b0:	232b      	movmi	r3, #43	@ 0x2b
 80093b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093b6:	f89a 3000 	ldrb.w	r3, [sl]
 80093ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80093bc:	d015      	beq.n	80093ea <_svfiprintf_r+0xfa>
 80093be:	9a07      	ldr	r2, [sp, #28]
 80093c0:	4654      	mov	r4, sl
 80093c2:	2000      	movs	r0, #0
 80093c4:	f04f 0c0a 	mov.w	ip, #10
 80093c8:	4621      	mov	r1, r4
 80093ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ce:	3b30      	subs	r3, #48	@ 0x30
 80093d0:	2b09      	cmp	r3, #9
 80093d2:	d94b      	bls.n	800946c <_svfiprintf_r+0x17c>
 80093d4:	b1b0      	cbz	r0, 8009404 <_svfiprintf_r+0x114>
 80093d6:	9207      	str	r2, [sp, #28]
 80093d8:	e014      	b.n	8009404 <_svfiprintf_r+0x114>
 80093da:	eba0 0308 	sub.w	r3, r0, r8
 80093de:	fa09 f303 	lsl.w	r3, r9, r3
 80093e2:	4313      	orrs	r3, r2
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	46a2      	mov	sl, r4
 80093e8:	e7d2      	b.n	8009390 <_svfiprintf_r+0xa0>
 80093ea:	9b03      	ldr	r3, [sp, #12]
 80093ec:	1d19      	adds	r1, r3, #4
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	9103      	str	r1, [sp, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bfbb      	ittet	lt
 80093f6:	425b      	neglt	r3, r3
 80093f8:	f042 0202 	orrlt.w	r2, r2, #2
 80093fc:	9307      	strge	r3, [sp, #28]
 80093fe:	9307      	strlt	r3, [sp, #28]
 8009400:	bfb8      	it	lt
 8009402:	9204      	strlt	r2, [sp, #16]
 8009404:	7823      	ldrb	r3, [r4, #0]
 8009406:	2b2e      	cmp	r3, #46	@ 0x2e
 8009408:	d10a      	bne.n	8009420 <_svfiprintf_r+0x130>
 800940a:	7863      	ldrb	r3, [r4, #1]
 800940c:	2b2a      	cmp	r3, #42	@ 0x2a
 800940e:	d132      	bne.n	8009476 <_svfiprintf_r+0x186>
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	1d1a      	adds	r2, r3, #4
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	9203      	str	r2, [sp, #12]
 8009418:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800941c:	3402      	adds	r4, #2
 800941e:	9305      	str	r3, [sp, #20]
 8009420:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80094e4 <_svfiprintf_r+0x1f4>
 8009424:	7821      	ldrb	r1, [r4, #0]
 8009426:	2203      	movs	r2, #3
 8009428:	4650      	mov	r0, sl
 800942a:	f7f6 ff61 	bl	80002f0 <memchr>
 800942e:	b138      	cbz	r0, 8009440 <_svfiprintf_r+0x150>
 8009430:	9b04      	ldr	r3, [sp, #16]
 8009432:	eba0 000a 	sub.w	r0, r0, sl
 8009436:	2240      	movs	r2, #64	@ 0x40
 8009438:	4082      	lsls	r2, r0
 800943a:	4313      	orrs	r3, r2
 800943c:	3401      	adds	r4, #1
 800943e:	9304      	str	r3, [sp, #16]
 8009440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009444:	4824      	ldr	r0, [pc, #144]	@ (80094d8 <_svfiprintf_r+0x1e8>)
 8009446:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800944a:	2206      	movs	r2, #6
 800944c:	f7f6 ff50 	bl	80002f0 <memchr>
 8009450:	2800      	cmp	r0, #0
 8009452:	d036      	beq.n	80094c2 <_svfiprintf_r+0x1d2>
 8009454:	4b21      	ldr	r3, [pc, #132]	@ (80094dc <_svfiprintf_r+0x1ec>)
 8009456:	bb1b      	cbnz	r3, 80094a0 <_svfiprintf_r+0x1b0>
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	3307      	adds	r3, #7
 800945c:	f023 0307 	bic.w	r3, r3, #7
 8009460:	3308      	adds	r3, #8
 8009462:	9303      	str	r3, [sp, #12]
 8009464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009466:	4433      	add	r3, r6
 8009468:	9309      	str	r3, [sp, #36]	@ 0x24
 800946a:	e76a      	b.n	8009342 <_svfiprintf_r+0x52>
 800946c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009470:	460c      	mov	r4, r1
 8009472:	2001      	movs	r0, #1
 8009474:	e7a8      	b.n	80093c8 <_svfiprintf_r+0xd8>
 8009476:	2300      	movs	r3, #0
 8009478:	3401      	adds	r4, #1
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	4619      	mov	r1, r3
 800947e:	f04f 0c0a 	mov.w	ip, #10
 8009482:	4620      	mov	r0, r4
 8009484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009488:	3a30      	subs	r2, #48	@ 0x30
 800948a:	2a09      	cmp	r2, #9
 800948c:	d903      	bls.n	8009496 <_svfiprintf_r+0x1a6>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0c6      	beq.n	8009420 <_svfiprintf_r+0x130>
 8009492:	9105      	str	r1, [sp, #20]
 8009494:	e7c4      	b.n	8009420 <_svfiprintf_r+0x130>
 8009496:	fb0c 2101 	mla	r1, ip, r1, r2
 800949a:	4604      	mov	r4, r0
 800949c:	2301      	movs	r3, #1
 800949e:	e7f0      	b.n	8009482 <_svfiprintf_r+0x192>
 80094a0:	ab03      	add	r3, sp, #12
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	462a      	mov	r2, r5
 80094a6:	4b0e      	ldr	r3, [pc, #56]	@ (80094e0 <_svfiprintf_r+0x1f0>)
 80094a8:	a904      	add	r1, sp, #16
 80094aa:	4638      	mov	r0, r7
 80094ac:	f3af 8000 	nop.w
 80094b0:	1c42      	adds	r2, r0, #1
 80094b2:	4606      	mov	r6, r0
 80094b4:	d1d6      	bne.n	8009464 <_svfiprintf_r+0x174>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	065b      	lsls	r3, r3, #25
 80094ba:	f53f af2d 	bmi.w	8009318 <_svfiprintf_r+0x28>
 80094be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094c0:	e72c      	b.n	800931c <_svfiprintf_r+0x2c>
 80094c2:	ab03      	add	r3, sp, #12
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	462a      	mov	r2, r5
 80094c8:	4b05      	ldr	r3, [pc, #20]	@ (80094e0 <_svfiprintf_r+0x1f0>)
 80094ca:	a904      	add	r1, sp, #16
 80094cc:	4638      	mov	r0, r7
 80094ce:	f000 f879 	bl	80095c4 <_printf_i>
 80094d2:	e7ed      	b.n	80094b0 <_svfiprintf_r+0x1c0>
 80094d4:	08009968 	.word	0x08009968
 80094d8:	08009972 	.word	0x08009972
 80094dc:	00000000 	.word	0x00000000
 80094e0:	08009239 	.word	0x08009239
 80094e4:	0800996e 	.word	0x0800996e

080094e8 <_printf_common>:
 80094e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ec:	4616      	mov	r6, r2
 80094ee:	4698      	mov	r8, r3
 80094f0:	688a      	ldr	r2, [r1, #8]
 80094f2:	690b      	ldr	r3, [r1, #16]
 80094f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094f8:	4293      	cmp	r3, r2
 80094fa:	bfb8      	it	lt
 80094fc:	4613      	movlt	r3, r2
 80094fe:	6033      	str	r3, [r6, #0]
 8009500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009504:	4607      	mov	r7, r0
 8009506:	460c      	mov	r4, r1
 8009508:	b10a      	cbz	r2, 800950e <_printf_common+0x26>
 800950a:	3301      	adds	r3, #1
 800950c:	6033      	str	r3, [r6, #0]
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	0699      	lsls	r1, r3, #26
 8009512:	bf42      	ittt	mi
 8009514:	6833      	ldrmi	r3, [r6, #0]
 8009516:	3302      	addmi	r3, #2
 8009518:	6033      	strmi	r3, [r6, #0]
 800951a:	6825      	ldr	r5, [r4, #0]
 800951c:	f015 0506 	ands.w	r5, r5, #6
 8009520:	d106      	bne.n	8009530 <_printf_common+0x48>
 8009522:	f104 0a19 	add.w	sl, r4, #25
 8009526:	68e3      	ldr	r3, [r4, #12]
 8009528:	6832      	ldr	r2, [r6, #0]
 800952a:	1a9b      	subs	r3, r3, r2
 800952c:	42ab      	cmp	r3, r5
 800952e:	dc26      	bgt.n	800957e <_printf_common+0x96>
 8009530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009534:	6822      	ldr	r2, [r4, #0]
 8009536:	3b00      	subs	r3, #0
 8009538:	bf18      	it	ne
 800953a:	2301      	movne	r3, #1
 800953c:	0692      	lsls	r2, r2, #26
 800953e:	d42b      	bmi.n	8009598 <_printf_common+0xb0>
 8009540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009544:	4641      	mov	r1, r8
 8009546:	4638      	mov	r0, r7
 8009548:	47c8      	blx	r9
 800954a:	3001      	adds	r0, #1
 800954c:	d01e      	beq.n	800958c <_printf_common+0xa4>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	6922      	ldr	r2, [r4, #16]
 8009552:	f003 0306 	and.w	r3, r3, #6
 8009556:	2b04      	cmp	r3, #4
 8009558:	bf02      	ittt	eq
 800955a:	68e5      	ldreq	r5, [r4, #12]
 800955c:	6833      	ldreq	r3, [r6, #0]
 800955e:	1aed      	subeq	r5, r5, r3
 8009560:	68a3      	ldr	r3, [r4, #8]
 8009562:	bf0c      	ite	eq
 8009564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009568:	2500      	movne	r5, #0
 800956a:	4293      	cmp	r3, r2
 800956c:	bfc4      	itt	gt
 800956e:	1a9b      	subgt	r3, r3, r2
 8009570:	18ed      	addgt	r5, r5, r3
 8009572:	2600      	movs	r6, #0
 8009574:	341a      	adds	r4, #26
 8009576:	42b5      	cmp	r5, r6
 8009578:	d11a      	bne.n	80095b0 <_printf_common+0xc8>
 800957a:	2000      	movs	r0, #0
 800957c:	e008      	b.n	8009590 <_printf_common+0xa8>
 800957e:	2301      	movs	r3, #1
 8009580:	4652      	mov	r2, sl
 8009582:	4641      	mov	r1, r8
 8009584:	4638      	mov	r0, r7
 8009586:	47c8      	blx	r9
 8009588:	3001      	adds	r0, #1
 800958a:	d103      	bne.n	8009594 <_printf_common+0xac>
 800958c:	f04f 30ff 	mov.w	r0, #4294967295
 8009590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009594:	3501      	adds	r5, #1
 8009596:	e7c6      	b.n	8009526 <_printf_common+0x3e>
 8009598:	18e1      	adds	r1, r4, r3
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	2030      	movs	r0, #48	@ 0x30
 800959e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095a2:	4422      	add	r2, r4
 80095a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095ac:	3302      	adds	r3, #2
 80095ae:	e7c7      	b.n	8009540 <_printf_common+0x58>
 80095b0:	2301      	movs	r3, #1
 80095b2:	4622      	mov	r2, r4
 80095b4:	4641      	mov	r1, r8
 80095b6:	4638      	mov	r0, r7
 80095b8:	47c8      	blx	r9
 80095ba:	3001      	adds	r0, #1
 80095bc:	d0e6      	beq.n	800958c <_printf_common+0xa4>
 80095be:	3601      	adds	r6, #1
 80095c0:	e7d9      	b.n	8009576 <_printf_common+0x8e>
	...

080095c4 <_printf_i>:
 80095c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095c8:	7e0f      	ldrb	r7, [r1, #24]
 80095ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095cc:	2f78      	cmp	r7, #120	@ 0x78
 80095ce:	4691      	mov	r9, r2
 80095d0:	4680      	mov	r8, r0
 80095d2:	460c      	mov	r4, r1
 80095d4:	469a      	mov	sl, r3
 80095d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095da:	d807      	bhi.n	80095ec <_printf_i+0x28>
 80095dc:	2f62      	cmp	r7, #98	@ 0x62
 80095de:	d80a      	bhi.n	80095f6 <_printf_i+0x32>
 80095e0:	2f00      	cmp	r7, #0
 80095e2:	f000 80d2 	beq.w	800978a <_printf_i+0x1c6>
 80095e6:	2f58      	cmp	r7, #88	@ 0x58
 80095e8:	f000 80b9 	beq.w	800975e <_printf_i+0x19a>
 80095ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095f4:	e03a      	b.n	800966c <_printf_i+0xa8>
 80095f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095fa:	2b15      	cmp	r3, #21
 80095fc:	d8f6      	bhi.n	80095ec <_printf_i+0x28>
 80095fe:	a101      	add	r1, pc, #4	@ (adr r1, 8009604 <_printf_i+0x40>)
 8009600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009604:	0800965d 	.word	0x0800965d
 8009608:	08009671 	.word	0x08009671
 800960c:	080095ed 	.word	0x080095ed
 8009610:	080095ed 	.word	0x080095ed
 8009614:	080095ed 	.word	0x080095ed
 8009618:	080095ed 	.word	0x080095ed
 800961c:	08009671 	.word	0x08009671
 8009620:	080095ed 	.word	0x080095ed
 8009624:	080095ed 	.word	0x080095ed
 8009628:	080095ed 	.word	0x080095ed
 800962c:	080095ed 	.word	0x080095ed
 8009630:	08009771 	.word	0x08009771
 8009634:	0800969b 	.word	0x0800969b
 8009638:	0800972b 	.word	0x0800972b
 800963c:	080095ed 	.word	0x080095ed
 8009640:	080095ed 	.word	0x080095ed
 8009644:	08009793 	.word	0x08009793
 8009648:	080095ed 	.word	0x080095ed
 800964c:	0800969b 	.word	0x0800969b
 8009650:	080095ed 	.word	0x080095ed
 8009654:	080095ed 	.word	0x080095ed
 8009658:	08009733 	.word	0x08009733
 800965c:	6833      	ldr	r3, [r6, #0]
 800965e:	1d1a      	adds	r2, r3, #4
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6032      	str	r2, [r6, #0]
 8009664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800966c:	2301      	movs	r3, #1
 800966e:	e09d      	b.n	80097ac <_printf_i+0x1e8>
 8009670:	6833      	ldr	r3, [r6, #0]
 8009672:	6820      	ldr	r0, [r4, #0]
 8009674:	1d19      	adds	r1, r3, #4
 8009676:	6031      	str	r1, [r6, #0]
 8009678:	0606      	lsls	r6, r0, #24
 800967a:	d501      	bpl.n	8009680 <_printf_i+0xbc>
 800967c:	681d      	ldr	r5, [r3, #0]
 800967e:	e003      	b.n	8009688 <_printf_i+0xc4>
 8009680:	0645      	lsls	r5, r0, #25
 8009682:	d5fb      	bpl.n	800967c <_printf_i+0xb8>
 8009684:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009688:	2d00      	cmp	r5, #0
 800968a:	da03      	bge.n	8009694 <_printf_i+0xd0>
 800968c:	232d      	movs	r3, #45	@ 0x2d
 800968e:	426d      	negs	r5, r5
 8009690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009694:	4859      	ldr	r0, [pc, #356]	@ (80097fc <_printf_i+0x238>)
 8009696:	230a      	movs	r3, #10
 8009698:	e011      	b.n	80096be <_printf_i+0xfa>
 800969a:	6821      	ldr	r1, [r4, #0]
 800969c:	6833      	ldr	r3, [r6, #0]
 800969e:	0608      	lsls	r0, r1, #24
 80096a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80096a4:	d402      	bmi.n	80096ac <_printf_i+0xe8>
 80096a6:	0649      	lsls	r1, r1, #25
 80096a8:	bf48      	it	mi
 80096aa:	b2ad      	uxthmi	r5, r5
 80096ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80096ae:	4853      	ldr	r0, [pc, #332]	@ (80097fc <_printf_i+0x238>)
 80096b0:	6033      	str	r3, [r6, #0]
 80096b2:	bf14      	ite	ne
 80096b4:	230a      	movne	r3, #10
 80096b6:	2308      	moveq	r3, #8
 80096b8:	2100      	movs	r1, #0
 80096ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096be:	6866      	ldr	r6, [r4, #4]
 80096c0:	60a6      	str	r6, [r4, #8]
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	bfa2      	ittt	ge
 80096c6:	6821      	ldrge	r1, [r4, #0]
 80096c8:	f021 0104 	bicge.w	r1, r1, #4
 80096cc:	6021      	strge	r1, [r4, #0]
 80096ce:	b90d      	cbnz	r5, 80096d4 <_printf_i+0x110>
 80096d0:	2e00      	cmp	r6, #0
 80096d2:	d04b      	beq.n	800976c <_printf_i+0x1a8>
 80096d4:	4616      	mov	r6, r2
 80096d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80096da:	fb03 5711 	mls	r7, r3, r1, r5
 80096de:	5dc7      	ldrb	r7, [r0, r7]
 80096e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096e4:	462f      	mov	r7, r5
 80096e6:	42bb      	cmp	r3, r7
 80096e8:	460d      	mov	r5, r1
 80096ea:	d9f4      	bls.n	80096d6 <_printf_i+0x112>
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d10b      	bne.n	8009708 <_printf_i+0x144>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	07df      	lsls	r7, r3, #31
 80096f4:	d508      	bpl.n	8009708 <_printf_i+0x144>
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	6861      	ldr	r1, [r4, #4]
 80096fa:	4299      	cmp	r1, r3
 80096fc:	bfde      	ittt	le
 80096fe:	2330      	movle	r3, #48	@ 0x30
 8009700:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009704:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009708:	1b92      	subs	r2, r2, r6
 800970a:	6122      	str	r2, [r4, #16]
 800970c:	f8cd a000 	str.w	sl, [sp]
 8009710:	464b      	mov	r3, r9
 8009712:	aa03      	add	r2, sp, #12
 8009714:	4621      	mov	r1, r4
 8009716:	4640      	mov	r0, r8
 8009718:	f7ff fee6 	bl	80094e8 <_printf_common>
 800971c:	3001      	adds	r0, #1
 800971e:	d14a      	bne.n	80097b6 <_printf_i+0x1f2>
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	b004      	add	sp, #16
 8009726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	f043 0320 	orr.w	r3, r3, #32
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	4833      	ldr	r0, [pc, #204]	@ (8009800 <_printf_i+0x23c>)
 8009734:	2778      	movs	r7, #120	@ 0x78
 8009736:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	6831      	ldr	r1, [r6, #0]
 800973e:	061f      	lsls	r7, r3, #24
 8009740:	f851 5b04 	ldr.w	r5, [r1], #4
 8009744:	d402      	bmi.n	800974c <_printf_i+0x188>
 8009746:	065f      	lsls	r7, r3, #25
 8009748:	bf48      	it	mi
 800974a:	b2ad      	uxthmi	r5, r5
 800974c:	6031      	str	r1, [r6, #0]
 800974e:	07d9      	lsls	r1, r3, #31
 8009750:	bf44      	itt	mi
 8009752:	f043 0320 	orrmi.w	r3, r3, #32
 8009756:	6023      	strmi	r3, [r4, #0]
 8009758:	b11d      	cbz	r5, 8009762 <_printf_i+0x19e>
 800975a:	2310      	movs	r3, #16
 800975c:	e7ac      	b.n	80096b8 <_printf_i+0xf4>
 800975e:	4827      	ldr	r0, [pc, #156]	@ (80097fc <_printf_i+0x238>)
 8009760:	e7e9      	b.n	8009736 <_printf_i+0x172>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	f023 0320 	bic.w	r3, r3, #32
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	e7f6      	b.n	800975a <_printf_i+0x196>
 800976c:	4616      	mov	r6, r2
 800976e:	e7bd      	b.n	80096ec <_printf_i+0x128>
 8009770:	6833      	ldr	r3, [r6, #0]
 8009772:	6825      	ldr	r5, [r4, #0]
 8009774:	6961      	ldr	r1, [r4, #20]
 8009776:	1d18      	adds	r0, r3, #4
 8009778:	6030      	str	r0, [r6, #0]
 800977a:	062e      	lsls	r6, r5, #24
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	d501      	bpl.n	8009784 <_printf_i+0x1c0>
 8009780:	6019      	str	r1, [r3, #0]
 8009782:	e002      	b.n	800978a <_printf_i+0x1c6>
 8009784:	0668      	lsls	r0, r5, #25
 8009786:	d5fb      	bpl.n	8009780 <_printf_i+0x1bc>
 8009788:	8019      	strh	r1, [r3, #0]
 800978a:	2300      	movs	r3, #0
 800978c:	6123      	str	r3, [r4, #16]
 800978e:	4616      	mov	r6, r2
 8009790:	e7bc      	b.n	800970c <_printf_i+0x148>
 8009792:	6833      	ldr	r3, [r6, #0]
 8009794:	1d1a      	adds	r2, r3, #4
 8009796:	6032      	str	r2, [r6, #0]
 8009798:	681e      	ldr	r6, [r3, #0]
 800979a:	6862      	ldr	r2, [r4, #4]
 800979c:	2100      	movs	r1, #0
 800979e:	4630      	mov	r0, r6
 80097a0:	f7f6 fda6 	bl	80002f0 <memchr>
 80097a4:	b108      	cbz	r0, 80097aa <_printf_i+0x1e6>
 80097a6:	1b80      	subs	r0, r0, r6
 80097a8:	6060      	str	r0, [r4, #4]
 80097aa:	6863      	ldr	r3, [r4, #4]
 80097ac:	6123      	str	r3, [r4, #16]
 80097ae:	2300      	movs	r3, #0
 80097b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097b4:	e7aa      	b.n	800970c <_printf_i+0x148>
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	4632      	mov	r2, r6
 80097ba:	4649      	mov	r1, r9
 80097bc:	4640      	mov	r0, r8
 80097be:	47d0      	blx	sl
 80097c0:	3001      	adds	r0, #1
 80097c2:	d0ad      	beq.n	8009720 <_printf_i+0x15c>
 80097c4:	6823      	ldr	r3, [r4, #0]
 80097c6:	079b      	lsls	r3, r3, #30
 80097c8:	d413      	bmi.n	80097f2 <_printf_i+0x22e>
 80097ca:	68e0      	ldr	r0, [r4, #12]
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	4298      	cmp	r0, r3
 80097d0:	bfb8      	it	lt
 80097d2:	4618      	movlt	r0, r3
 80097d4:	e7a6      	b.n	8009724 <_printf_i+0x160>
 80097d6:	2301      	movs	r3, #1
 80097d8:	4632      	mov	r2, r6
 80097da:	4649      	mov	r1, r9
 80097dc:	4640      	mov	r0, r8
 80097de:	47d0      	blx	sl
 80097e0:	3001      	adds	r0, #1
 80097e2:	d09d      	beq.n	8009720 <_printf_i+0x15c>
 80097e4:	3501      	adds	r5, #1
 80097e6:	68e3      	ldr	r3, [r4, #12]
 80097e8:	9903      	ldr	r1, [sp, #12]
 80097ea:	1a5b      	subs	r3, r3, r1
 80097ec:	42ab      	cmp	r3, r5
 80097ee:	dcf2      	bgt.n	80097d6 <_printf_i+0x212>
 80097f0:	e7eb      	b.n	80097ca <_printf_i+0x206>
 80097f2:	2500      	movs	r5, #0
 80097f4:	f104 0619 	add.w	r6, r4, #25
 80097f8:	e7f5      	b.n	80097e6 <_printf_i+0x222>
 80097fa:	bf00      	nop
 80097fc:	08009979 	.word	0x08009979
 8009800:	0800998a 	.word	0x0800998a

08009804 <memmove>:
 8009804:	4288      	cmp	r0, r1
 8009806:	b510      	push	{r4, lr}
 8009808:	eb01 0402 	add.w	r4, r1, r2
 800980c:	d902      	bls.n	8009814 <memmove+0x10>
 800980e:	4284      	cmp	r4, r0
 8009810:	4623      	mov	r3, r4
 8009812:	d807      	bhi.n	8009824 <memmove+0x20>
 8009814:	1e43      	subs	r3, r0, #1
 8009816:	42a1      	cmp	r1, r4
 8009818:	d008      	beq.n	800982c <memmove+0x28>
 800981a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800981e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009822:	e7f8      	b.n	8009816 <memmove+0x12>
 8009824:	4402      	add	r2, r0
 8009826:	4601      	mov	r1, r0
 8009828:	428a      	cmp	r2, r1
 800982a:	d100      	bne.n	800982e <memmove+0x2a>
 800982c:	bd10      	pop	{r4, pc}
 800982e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009836:	e7f7      	b.n	8009828 <memmove+0x24>

08009838 <_sbrk_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d06      	ldr	r5, [pc, #24]	@ (8009854 <_sbrk_r+0x1c>)
 800983c:	2300      	movs	r3, #0
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7f7 fcd2 	bl	80011ec <_sbrk>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_sbrk_r+0x1a>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_sbrk_r+0x1a>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	24000954 	.word	0x24000954

08009858 <memcpy>:
 8009858:	440a      	add	r2, r1
 800985a:	4291      	cmp	r1, r2
 800985c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009860:	d100      	bne.n	8009864 <memcpy+0xc>
 8009862:	4770      	bx	lr
 8009864:	b510      	push	{r4, lr}
 8009866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800986a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800986e:	4291      	cmp	r1, r2
 8009870:	d1f9      	bne.n	8009866 <memcpy+0xe>
 8009872:	bd10      	pop	{r4, pc}

08009874 <_realloc_r>:
 8009874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009878:	4680      	mov	r8, r0
 800987a:	4615      	mov	r5, r2
 800987c:	460c      	mov	r4, r1
 800987e:	b921      	cbnz	r1, 800988a <_realloc_r+0x16>
 8009880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009884:	4611      	mov	r1, r2
 8009886:	f7ff bc4b 	b.w	8009120 <_malloc_r>
 800988a:	b92a      	cbnz	r2, 8009898 <_realloc_r+0x24>
 800988c:	f7ff fbdc 	bl	8009048 <_free_r>
 8009890:	2400      	movs	r4, #0
 8009892:	4620      	mov	r0, r4
 8009894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009898:	f000 f81a 	bl	80098d0 <_malloc_usable_size_r>
 800989c:	4285      	cmp	r5, r0
 800989e:	4606      	mov	r6, r0
 80098a0:	d802      	bhi.n	80098a8 <_realloc_r+0x34>
 80098a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80098a6:	d8f4      	bhi.n	8009892 <_realloc_r+0x1e>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4640      	mov	r0, r8
 80098ac:	f7ff fc38 	bl	8009120 <_malloc_r>
 80098b0:	4607      	mov	r7, r0
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d0ec      	beq.n	8009890 <_realloc_r+0x1c>
 80098b6:	42b5      	cmp	r5, r6
 80098b8:	462a      	mov	r2, r5
 80098ba:	4621      	mov	r1, r4
 80098bc:	bf28      	it	cs
 80098be:	4632      	movcs	r2, r6
 80098c0:	f7ff ffca 	bl	8009858 <memcpy>
 80098c4:	4621      	mov	r1, r4
 80098c6:	4640      	mov	r0, r8
 80098c8:	f7ff fbbe 	bl	8009048 <_free_r>
 80098cc:	463c      	mov	r4, r7
 80098ce:	e7e0      	b.n	8009892 <_realloc_r+0x1e>

080098d0 <_malloc_usable_size_r>:
 80098d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d4:	1f18      	subs	r0, r3, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bfbc      	itt	lt
 80098da:	580b      	ldrlt	r3, [r1, r0]
 80098dc:	18c0      	addlt	r0, r0, r3
 80098de:	4770      	bx	lr

080098e0 <_init>:
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	bf00      	nop
 80098e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e6:	bc08      	pop	{r3}
 80098e8:	469e      	mov	lr, r3
 80098ea:	4770      	bx	lr

080098ec <_fini>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	bf00      	nop
 80098f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f2:	bc08      	pop	{r3}
 80098f4:	469e      	mov	lr, r3
 80098f6:	4770      	bx	lr
